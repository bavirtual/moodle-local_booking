{"version":3,"file":"booking.min.js","sources":["../src/booking.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module is responsible for registering listeners\n * for all session booking and logentry events.\n *\n * @module     local_booking/booking\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n        'jquery',\n        'core/str',\n        'core/pending',\n        'core/modal_factory',\n        'core/notification',\n        'local_booking/booking_view_manager',\n        'local_booking/booking_actions',\n        'local_booking/events',\n        'local_booking/modal_logentry_form',\n        'local_booking/selectors'\n    ],\n    function(\n        $,\n        Str,\n        Pending,\n        ModalFactory,\n        Notification,\n        ViewManager,\n        BookingActions,\n        BookingEvents,\n        ModalLogentryEditForm,\n        Selectors\n    ) {\n\n    /**\n     * Listen to and handle any logentry events fired by\n     * Logentry and PIREP the modal forms.\n     *\n     * @method registerBookingEventListeners\n     * @param  {object} root The booking root element\n     */\n     const registerBookingEventListeners = function(root) {\n        const body = $('body');\n\n        body.on(BookingEvents.canceled, function() {\n            ViewManager.refreshBookingsContent(root);\n        });\n        body.on(BookingEvents.created, function() {\n            ViewManager.refreshBookingsContent(root);\n        });\n        body.on(BookingEvents.updated, function() {\n            ViewManager.refreshBookingsContent(root);\n        });\n        body.on(BookingEvents.deleted, function() {\n            ViewManager.refreshBookingsContent(root);\n        });\n\n        // Listen to the click on the Cancel booking buttons in 'Instructor dashboard' page.\n        root.on('click', Selectors.cancelbutton, function(e) {\n            Str.get_string('commentcancel', 'local_booking').then(function(promptMsg) {\n                // eslint-disable-next-line no-alert\n                const comment = prompt(promptMsg);\n                if (comment !== null) {\n                    BookingActions.cancelBooking(root, e, comment, false);\n                }\n                return;\n            }).catch(Notification.exception);\n        });\n\n        // Listen to the click on the 'No-show' booking buttons in 'Instructor dashboard' page.\n        root.on('click', Selectors.noshowbutton, function(e) {\n            // Get number of no shows\n            const noshows = $(e.target).closest(Selectors.sessionbutton).data('noshows');\n            // Get the message associated with the number of no-show occurence\n            const noShowComment = Str.get_string('commentnoshow' + noshows, 'local_booking').then(function(noshowMsg) {\n                return noshowMsg;\n            }).catch(Notification.exception);\n            // Chain the two retrieved strings in the prompt\n            $.when(Str.get_string('commentnoshow', 'local_booking'), noShowComment)\n            .then(function(promptMsg, noshowMsg) {\n                // eslint-disable-next-line no-alert\n                if (confirm(promptMsg + '\\n\\n' + noshowMsg)) {\n                    BookingActions.cancelBooking(root, e, null, true);\n                }\n                return;\n            }).catch(Notification.exception);\n        });\n\n        // Register the listeners required to redirect to\n        // $('input[name=\"studentsfilter\"]').change(function() {\n        // $('input[type=radio][name=studentsfilter]').change(function() {\n        root.on('change', 'input[type=radio][name=studentsfilter]', function() {\n            // Call redirect to assignment feedback page\n            ViewManager.refreshBookingsContent(root, 0, 0, null, $('input[name=\"studentsfilter\"]:checked').val());\n        });\n\n        // Register the listeners required to redirect to\n        root.on('click', Selectors.actions.gotoFeedback, function(e) {\n            // Call redirect to assignment feedback page\n            BookingActions.gotoFeedback(root, e);\n\n            e.preventDefault();\n        });\n    };\n\n    /**\n     * Register event listeners for session clicks.\n     *\n     * @param {object} root The root element.\n     */\n    const registerSessionEventListeners = (root) => {\n\n        // Get promise for the logentry form for create and edit\n        const contextId = $(Selectors.bookingwrapper).data('contextid'),\n        courseId = $(Selectors.bookingwrapper).data('courseid');\n\n        if (contextId) {\n            // Listen the click on the progression table of sessions for a logentry (new/view).\n            root.on('click', Selectors.actions.viewLogEntry, function(e) {\n                let logentryId = $(this).attr('data-logentry-id'),\n                userId = $(this).attr('data-student-id');\n\n                // A logentry needs to be created or edite, show the modal form.\n                e.preventDefault();\n                // We've handled the event so stop it from bubbling\n                // and causing the day click handler to fire.\n                e.stopPropagation();\n\n                if (logentryId == 0) {\n                    registerLogentryEditForm(null, e, contextId, courseId, userId, logentryId, true);\n                } else {\n                    registerLogentrySummaryForm(contextId, courseId, userId, logentryId);\n                }\n                e.stopImmediatePropagation();\n            });\n        }\n    };\n\n    /**\n     * Register the form and listeners required for\n     * creating and editing logentries.\n     *\n     * @method registerLogentryEditForm\n     * @param  {object} root       The root element.\n     * @param  {object} e          The triggered event.\n     * @param  {Number} contextId  The course context id of the logentry.\n     * @param  {Number} courseId   The course id of the logentry.\n     * @param  {Number} userId     The user id the logentry belongs to.\n     * @param  {Number} logentryId The logentry id.\n     * @param  {bool}   isNew      Whether to register for edit mode.\n     */\n    const registerLogentryEditForm = (root, e, contextId, courseId, userId, logentryId, isNew) => {\n        const LogentryFormPromise = ModalFactory.create({\n            type: ModalLogentryEditForm.TYPE,\n            large: true\n        });\n\n        const target = e.target;\n        const pendingPromise = new Pending('local_booking/registerLogentryEditForm');\n\n        ViewManager.renderLogentryModal(root, e, LogentryFormPromise, target, contextId, courseId, userId, logentryId, isNew)\n        .then(pendingPromise.resolve())\n        .catch();\n    };\n\n    /**\n     * Register the form and listeners required for\n     * viewing the logentry summary form.\n     *\n     * @method registerLogentrySummaryForm\n     * @param  {Number} contextId  The course context id of the logentry.\n     * @param  {Number} courseId   The course id of the logentry.\n     * @param  {Number} userId     The user id the logentry belongs to.\n     * @param  {Number} logentryId The logentry id.\n     */\n    const registerLogentrySummaryForm = (contextId, courseId, userId, logentryId) => {\n        const pendingPromise = new Pending('local_booking/registerLogentrySummaryForm');\n\n        if (logentryId) {\n            ViewManager.renderLogentrySummaryModal(courseId, userId, logentryId)\n            .then(function(modal) {\n                $('body').on(BookingEvents.editLogentry, function(e, userId, logentryId) {\n                    registerLogentryEditForm(modal.getRoot(), e, contextId, courseId, userId, logentryId);\n                    e.stopImmediatePropagation();\n                });\n                $('body').on(BookingEvents.addLogentry, function(e, userId) {\n                    registerLogentryEditForm(modal.getRoot(), e, contextId, courseId, userId, 0);\n                    e.stopImmediatePropagation();\n                });\n                return modal;\n            })\n            .then(pendingPromise.resolve())\n            .catch();\n        } else {\n            pendingPromise.resolve();\n        }\n    };\n\n    /**\n     * Register event listeners for logbook entry,\n     * and session cancellation in both\n     * 'Instructor dashboard' and 'Session selection' pages.\n     *\n     * @method  registerEventListeners\n     * @param   {object} root The booking root element\n     */\n     const registerEventListeners = function(root) {\n\n        // Register listeners to booking actions\n        registerBookingEventListeners(root);\n\n        // Register listeners to session click actions\n        registerSessionEventListeners(root);\n    };\n\n    return {\n        init: function(root) {\n            var root = $(root);\n            registerEventListeners(root);\n            ViewManager.stopLoading(root);\n        }\n    };\n});\n"],"names":["define","$","Str","Pending","ModalFactory","Notification","ViewManager","BookingActions","BookingEvents","ModalLogentryEditForm","Selectors","registerSessionEventListeners","root","contextId","bookingwrapper","data","courseId","on","actions","viewLogEntry","e","logentryId","this","attr","userId","preventDefault","stopPropagation","registerLogentryEditForm","registerLogentrySummaryForm","stopImmediatePropagation","isNew","LogentryFormPromise","create","type","TYPE","large","target","pendingPromise","renderLogentryModal","then","resolve","catch","renderLogentrySummaryModal","modal","editLogentry","getRoot","addLogentry","registerEventListeners","body","canceled","refreshBookingsContent","created","updated","deleted","cancelbutton","get_string","promptMsg","comment","prompt","cancelBooking","exception","noshowbutton","noshows","closest","sessionbutton","noShowComment","noshowMsg","when","confirm","val","gotoFeedback","registerBookingEventListeners","init","stopLoading"],"mappings":"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"}