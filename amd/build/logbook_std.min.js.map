{"version":3,"file":"logbook_std.min.js","sources":["../src/logbook_std.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module is responsible for registering listeners\n * for logbook std view events.\n *\n * @module     local_booking/logbook_std\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2023\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n        'jquery',\n        'core/str',\n        'core/pending',\n        'core/modal_factory',\n        'core/templates',\n        'core/notification',\n        'local_booking/booking_view_manager',\n        'local_booking/modal_actions',\n        'local_booking/events',\n        'local_booking/modal_logentry_form',\n        'local_booking/repository',\n        'local_booking/selectors'\n    ],\n    function(\n        $,\n        Str,\n        Pending,\n        ModalFactory,\n        Templates,\n        Notification,\n        ViewManager,\n        ModalActions,\n        BookingEvents,\n        ModalLogentryEditForm,\n        Repository,\n        Selectors\n    ) {\n\n    /**\n     * Register event listeners for session clicks.\n     *\n     * @param {object} root The root element.\n     */\n    const registerEventListeners = (root) => {\n\n        // Listen to logentry updated events\n        $('body').on(BookingEvents.logentryupdated, function(e, logentry) {\n            // Refresh logbook\n            refreshLogbookContent(root, logentry);\n        });\n\n        // Listen to logentry deleted event\n        $('body').on(BookingEvents.logentrydeleted, function(e, logentryid) {\n            // Remove logentry from the logbook\n            $('#logentry_' + logentryid).slideUp(300);\n            e.stopImmediatePropagation();\n        });\n\n        // Get promise for the logentry form for create and edit\n        const contextId = $(Selectors.logbookwrapper).data('contextid'),\n        courseId = $(Selectors.logbookwrapper).data('courseid'),\n        userId = $(Selectors.logbookwrapper).data('userid');\n\n        if (contextId) {\n            // Listen the edit click of a logbook entry.\n            root.on('click', Selectors.actions.edit, function(e) {\n                // From logbook\n                const target = e.target;\n                let logegntry = target.closest(Selectors.containers.summaryForm),\n                    logentryId = logegntry.dataset.logentryId;\n\n                // A logentry needs to be created or edite, show the modal form.\n                e.preventDefault();\n                e.stopPropagation();\n                registerLogentryEditForm(root, e, contextId, courseId, userId, logentryId);\n                e.stopImmediatePropagation();\n            });\n        }\n    };\n\n    /**\n     * Refresh the logbook entry edited.\n     *\n     * @method  refreshLogbookContent\n     * @param   {object} root     The root element.\n     * @param   {object} logentry The updated logentry.\n     * @return  {promise}\n     */\n    const refreshLogbookContent = (root, logentry) => {\n        let card = $('#cardid_' + logentry.id);\n\n        showPlaceholder(card);\n\n        const courseId = $(Selectors.logbookwrapper).data('courseid'),\n        userId = $(Selectors.logbookwrapper).data('userid');\n\n        M.util.js_pending(root.get('id') + '-' + courseId);\n        return Repository.getLogentryById(logentry.id, courseId, userId)\n            .then((context) => {\n                return Templates.render('local_booking/logbook_std_detail', context.logentry);\n            })\n            .then((html, js) => {\n                return Templates.replaceNode(card, html, js);\n            })\n            .always(() => {\n                M.util.js_complete(root.get('id') + '-' + courseId);\n                return showContent(card);\n            })\n            .fail(Notification.exception);\n    };\n\n    /**\n     * Register the form and listeners required for\n     * creating and editing logentries.\n     *\n     * @method registerLogentryEditForm\n     * @param  {object} root       The root element.\n     * @param  {object} e          The triggered event.\n     * @param  {Number} contextId  The course context id of the logentry.\n     * @param  {Number} courseId   The course id of the logentry.\n     * @param  {Number} userId     The user id the logentry belongs to.\n     * @param  {Number} logentryId The logentry id.\n     */\n    const registerLogentryEditForm = (root, e, contextId, courseId, userId, logentryId) => {\n        const LogentryFormPromise = ModalFactory.create({\n            type: ModalLogentryEditForm.TYPE,\n            large: true\n        });\n\n        const target = e.target;\n        const pendingPromise = new Pending('local_booking/registerLogentryEditForm');\n\n        ViewManager.renderLogentryModal(root, e, LogentryFormPromise, target, contextId, courseId, userId,\n            logentryId, false, 'local_booking/logbook_std')\n        .then(pendingPromise.resolve())\n        .catch(window.console.error);\n    };\n\n    /**\n     * Show the empty message when no logentries are found.\n     *\n     * @param {object} card The card element for the logentry view.\n     */\n    const showPlaceholder = function(card) {\n        card.find(Selectors.containers.loadingPlaceholder).removeClass('hidden');\n        card.find(Selectors.containers.content).addClass('hidden');\n    };\n\n    /**\n     * Show the empty message when no logentries are found.\n     *\n     * @param {object} card The card element for the logentry view.\n     */\n    const showContent = function(card) {\n        card.find(Selectors.containers.content).removeClass('hidden');\n        card.find(Selectors.containers.loadingPlaceholder).addClass('hidden');\n    };\n\n    return {\n        init: function(rt) {\n            var root = $(rt);\n            registerEventListeners(root);\n            ModalActions.registerDelete(root);\n            ViewManager.stopLoading(root);\n        }\n    };\n});\n"],"names":["define","$","Str","Pending","ModalFactory","Templates","Notification","ViewManager","ModalActions","BookingEvents","ModalLogentryEditForm","Repository","Selectors","refreshLogbookContent","root","logentry","card","id","showPlaceholder","courseId","logbookwrapper","data","userId","M","util","js_pending","get","getLogentryById","then","context","render","html","js","replaceNode","always","js_complete","showContent","fail","exception","registerLogentryEditForm","e","contextId","logentryId","LogentryFormPromise","create","type","TYPE","large","target","pendingPromise","renderLogentryModal","resolve","catch","window","console","error","find","containers","loadingPlaceholder","removeClass","content","addClass","init","rt","on","logentryupdated","logentrydeleted","logentryid","slideUp","stopImmediatePropagation","actions","edit","closest","summaryForm","dataset","preventDefault","stopPropagation","registerEventListeners","registerDelete","stopLoading"],"mappings":";;;;;;;;;AAyBAA,mCAAO,CACC,SACA,WACA,eACA,qBACA,iBACA,oBACA,qCACA,8BACA,uBACA,oCACA,2BACA,4BAEJ,SACIC,EACAC,IACAC,QACAC,aACAC,UACAC,aACAC,YACAC,aACAC,cACAC,sBACAC,WACAC,iBAqDEC,sBAAwB,CAACC,KAAMC,gBAC7BC,KAAOf,EAAE,WAAac,SAASE,IAEnCC,gBAAgBF,YAEVG,SAAWlB,EAAEW,UAAUQ,gBAAgBC,KAAK,YAClDC,OAASrB,EAAEW,UAAUQ,gBAAgBC,KAAK,iBAE1CE,EAAEC,KAAKC,WAAWX,KAAKY,IAAI,MAAQ,IAAMP,UAClCR,WAAWgB,gBAAgBZ,SAASE,GAAIE,SAAUG,QACpDM,MAAMC,SACIxB,UAAUyB,OAAO,mCAAoCD,QAAQd,YAEvEa,MAAK,CAACG,KAAMC,KACF3B,UAAU4B,YAAYjB,KAAMe,KAAMC,MAE5CE,QAAO,KACJX,EAAEC,KAAKW,YAAYrB,KAAKY,IAAI,MAAQ,IAAMP,UACnCiB,YAAYpB,SAEtBqB,KAAK/B,aAAagC,YAerBC,yBAA2B,CAACzB,KAAM0B,EAAGC,UAAWtB,SAAUG,OAAQoB,oBAC9DC,oBAAsBvC,aAAawC,OAAO,CAC5CC,KAAMnC,sBAAsBoC,KAC5BC,OAAO,IAGLC,OAASR,EAAEQ,OACXC,eAAiB,IAAI9C,QAAQ,0CAEnCI,YAAY2C,oBAAoBpC,KAAM0B,EAAGG,oBAAqBK,OAAQP,UAAWtB,SAAUG,OACvFoB,YAAY,EAAO,6BACtBd,KAAKqB,eAAeE,WACpBC,MAAMC,OAAOC,QAAQC,QAQpBrC,gBAAkB,SAASF,MAC7BA,KAAKwC,KAAK5C,UAAU6C,WAAWC,oBAAoBC,YAAY,UAC/D3C,KAAKwC,KAAK5C,UAAU6C,WAAWG,SAASC,SAAS,WAQ/CzB,YAAc,SAASpB,MACzBA,KAAKwC,KAAK5C,UAAU6C,WAAWG,SAASD,YAAY,UACpD3C,KAAKwC,KAAK5C,UAAU6C,WAAWC,oBAAoBG,SAAS,iBAGzD,CACHC,KAAM,SAASC,QACPjD,KAAOb,EAAE8D,IArHWjD,CAAAA,OAG5Bb,EAAE,QAAQ+D,GAAGvD,cAAcwD,iBAAiB,SAASzB,EAAGzB,UAEpDF,sBAAsBC,KAAMC,aAIhCd,EAAE,QAAQ+D,GAAGvD,cAAcyD,iBAAiB,SAAS1B,EAAG2B,YAEpDlE,EAAE,aAAekE,YAAYC,QAAQ,KACrC5B,EAAE6B,oCAIA5B,UAAYxC,EAAEW,UAAUQ,gBAAgBC,KAAK,aACnDF,SAAWlB,EAAEW,UAAUQ,gBAAgBC,KAAK,YAC5CC,OAASrB,EAAEW,UAAUQ,gBAAgBC,KAAK,UAEtCoB,WAEA3B,KAAKkD,GAAG,QAASpD,UAAU0D,QAAQC,MAAM,SAAS/B,OAI1CE,WAFWF,EAAEQ,OACMwB,QAAQ5D,UAAU6C,WAAWgB,aACzBC,QAAQhC,WAGnCF,EAAEmC,iBACFnC,EAAEoC,kBACFrC,yBAAyBzB,KAAM0B,EAAGC,UAAWtB,SAAUG,OAAQoB,YAC/DF,EAAE6B,+BAsFNQ,CAAuB/D,MACvBN,aAAasE,eAAehE,MAC5BP,YAAYwE,YAAYjE"}