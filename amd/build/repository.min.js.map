{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle calendar ajax actions.\n *\n * @module     local_booking/repository\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\n\n/**\n * Get calendar data for the month view.\n *\n * @method getCalendarWeekData\n * @param {number} year Year\n * @param {number} week Week\n * @param {number} time Timestamp\n * @param {number} courseId The course id.\n * @param {number} categoryId The category id.\n * @param {string} action The action type.\n * @param {string} view The view type user/all.\n * @param {number} studentId The id of the associated user.\n * @param {number} exerciseId The exercise id for the booked session.\n * @return {promise} Resolved with the month view data.\n */\n export const getCalendarWeekData = (year, week, time, courseId, categoryId, action, view, studentId, exerciseId) => {\n    const request = {\n        methodname: 'local_booking_get_weekly_view',\n        args: {\n            year,\n            week,\n            time,\n            courseid: courseId,\n            categoryid: categoryId,\n            action: action,\n            view: view,\n            studentid: studentId,\n            exerciseid: exerciseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get student progression  section data.\n *\n * @method getBookingsData\n * @param {number} courseId     The course id.\n * @param {string} filter       The filter to show students, inactive (including graduates), suspended, and default to active.\n * @param   {number} userId The user id for single user booking view.\n * @return {promise} Resolved with the student progression data.\n */\n export const getBookingsData = (courseId, filter, userId) => {\n    const request = {\n        methodname: 'local_booking_get_bookings_view',\n        args: {\n            courseid: courseId,\n            userid: userId,\n            filter: filter,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get instructor my bookings section data.\n *\n * @method getInstructorBookingsData\n * @param {number} courseId     The course id.\n * @return {promise} Resolved with the instructor bookings data.\n */\n export const getInstructorBookingsData = (courseId) => {\n    const request = {\n        methodname: 'local_booking_get_instructor_bookings_view',\n        args: {\n            courseid: courseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get sesison booking, my bookings, and my students data to view.\n *\n * @method getExerciseName\n * @param {number} courseId   The course id.\n * @param {number} exerciseId The exercise id.\n * @return {promise} Resolved with the month view data.\n */\n export const getExerciseName = (courseId, exerciseId) => {\n    const request = {\n        methodname: 'local_booking_get_exercise_name',\n        args: {\n            courseid: courseId,\n            exerciseid: exerciseId,\n            returnempty: true,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send booked slots to the server for persistence\n *\n * @method saveBookedSlot\n * @param {array} bookedslot    The array of booked slots\n * @param {int} courseId        The course id of the booking\n * @param {int} exerciseId      The exercise id of the associated course\n * @param {int} studentId       The id of the associated user\n * @return {promise}\n */\n export const saveBookedSlot = (bookedslot, courseId, exerciseId, studentId) => {\n    const request = {\n        methodname: 'local_booking_save_booking',\n        args: {\n            bookedslot: bookedslot,\n            courseid: courseId,\n            exerciseid: exerciseId,\n            studentid: studentId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Cancel a sepcific booking for a student.\n *\n * @method cancelBooking\n * @param {int} bookingId   The booking id to cancel\n * @param {string} comment  The booking id to cancel\n * @param {bool} noshow     Whether the cancellation is a no-show or instructor initiated\n * @return {promise}\n */\n export const cancelBooking = (bookingId, comment, noshow) => {\n    const request = {\n        methodname: 'local_booking_cancel_booking',\n        args: {\n            bookingid: bookingId,\n            comment: comment,\n            noshow: noshow,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Checks if the booking conflicts with another booking.\n *\n * @method isConflictingBookings\n * @param {int}   studentid    The student id the booking is for\n * @param {array} bookedslot   The array of booked slots\n * @return {promise}\n */\nexport const isConflictingBookings = (studentid, bookedslot) => {\n    const request = {\n        methodname: 'local_booking_is_conflicting_booking',\n        args: {\n            studentid: studentid,\n            bookedslot: bookedslot,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send marked availability posts (time slots)\n * to the server to be persisted\n *\n * @method saveSlots\n * @param {string} weekSlots The URL encoded values from the form\n * @param {int} course The id of the associated course\n * @param {int} year The id of the event to update\n * @param {int} week A timestamp for some time during the target day\n * @return {promise}\n */\n export const saveSlots = (weekSlots, course, year, week) => {\n    const request = {\n        methodname: 'local_booking_save_slots',\n        args: {\n            slots: weekSlots,\n            courseid: course,\n            year: year,\n            week: week\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Remove all saved slots for a specific week & year\n * for the current user (student)\n *\n * @method clearSlots\n * @param {int} course The id of the associated course\n * @param {int} year The id of the event to update\n * @param {int} week A timestamp for some time during the target day\n * @return {promise}\n */\n export const clearSlots = (course, year, week) => {\n    const request = {\n        methodname: 'local_booking_delete_slots',\n        args: {\n            courseid: course,\n            year: year,\n            week: week\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send the form data of the logbook entry form\n * to be persisted at the server.\n *\n * @method submitCreateUpdateLogentryForm\n * @param {string} formArgs An array of J URL encoded values from the form\n * @param {string} formData The URL encoded values from the form\n * @return {promise} Resolved with the new or edited logbook entry\n */\n export const submitCreateUpdateLogentryForm = (formArgs, formData) => {\n    const request = {\n        methodname: 'local_booking_submit_logentry_form',\n        args: {\n            formargs: formArgs,\n            formdata: formData\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get a graded session logbook entry by id.\n *\n * @method getLogentryById\n * @param {number} logentryId The logbook entry id.\n * @param {number} courseId The associated course id.\n * @param {number} userId The user id of entry.\n * @return {promise} Resolved with requested calendar event\n */\n export const getLogentryById = (logentryId, courseId, userId) => {\n\n    const request = {\n        methodname: 'local_booking_get_logentry_by_id',\n        args: {\n            logentryid: logentryId,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Delete a log book entry by id.\n *\n * @method deleteLogentry\n * @param {number} logentryId The logbook entry id to delete.\n * @param {number} userId The logbook entry course id.\n * @param {number} courseId The logbook entry user id.\n * @param {bool}   cascade Whether to cascade deletion of linked logbook entry.\n * @return {promise} Resolved with requested calendar event\n */\n export const deleteLogentry = (logentryId, userId, courseId, cascade) => {\n\n    const request = {\n        methodname: 'local_booking_delete_logentry',\n        args: {\n            logentryid: logentryId,\n            userid: userId,\n            courseid: courseId,\n            cascade: cascade\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send the form data of the logbook entry form\n * to be persisted at the server.\n *\n * @method findPirep\n * @param  {string} pirep The passed PIREP number\n * @param  {number} courseId The logbook entry user id.\n * @param  {number} userId The logbook entry course id.\n * @param  {number} exerciseId The logbook entry course id.\n * @return  {promise} Resolved with the pirep data\n */\n export const findPirep = (pirep, courseId, userId, exerciseId) => {\n    const request = {\n        methodname: 'local_booking_get_pirep',\n        args: {\n            pirep: pirep,\n            courseid: courseId,\n            userid: userId,\n            exerciseid: exerciseId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update Suspended status from the user profile.\n *\n * @method updateSuspendedStatus\n * @param  {bool}   status   Suspended true or false.\n * @param  {number} courseId The profile user id.\n * @param  {number} userId   The profile course id.\n * @return {promise}         Resolved with suspension true/false promise\n */\n export const updateSuspendedStatus = (status, courseId, userId) => {\n    const request = {\n        methodname: 'local_booking_update_suspended_status',\n        args: {\n            status: status,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update group membership status for Onhold and Keep Active groups for the user profile.\n *\n * @method updateGroup\n * @param  {string} group    Group name.\n * @param  {bool}   ismember Membership true or false.\n * @param  {number} courseId The profile user id.\n * @param  {number} userId   The profile course id.\n * @return {promise}         Resolved with group membership true/false promise\n */\n export const updateGroup = (group, ismember, courseId, userId) => {\n    const request = {\n        methodname: 'local_booking_update_group_status',\n        args: {\n            group: group,\n            ismember: ismember,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update user preferences for restrictions override or\n * endorsement status.\n *\n * @method updateUserPreferences\n * @param  {string} preference  Preference name.\n * @param  {string} value       User preference value.\n * @param  {number} courseId    The profile user id.\n * @param  {number} userId      The profile course id.\n * @return {promise}            Resolved with preference set promise\n */\n export const updateUserPreferences = (preference, value, courseId, userId) => {\n    const request = {\n        methodname: 'local_booking_update_user_preferences',\n        args: {\n            preference: preference,\n            value: value,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update user comment (description).\n *\n * @method updateProfileComment\n * @param  {number} courseId    The profile course id.\n * @param  {number} userId      The profile user id.\n * @param  {string} comment     Comment text.\n * @return {promise}            Resolved with preference set promise\n */\n export const updateProfileComment = (courseId, userId, comment) => {\n    const request = {\n        methodname: 'local_booking_update_profile_comment',\n        args: {\n            courseid: courseId,\n            userid: userId,\n            comment: comment\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n"],"names":["e","_ajax","__esModule","default","_exports","getCalendarWeekData","year","week","time","courseId","categoryId","action","view","studentId","exerciseId","request","methodname","args","courseid","categoryid","studentid","exerciseid","Ajax","call","getBookingsData","filter","userId","userid","getInstructorBookingsData","getExerciseName","returnempty","saveBookedSlot","bookedslot","cancelBooking","bookingId","comment","noshow","bookingid","isConflictingBookings","saveSlots","weekSlots","course","slots","clearSlots","submitCreateUpdateLogentryForm","formArgs","formData","formargs","formdata","getLogentryById","logentryId","logentryid","deleteLogentry","cascade","findPirep","pirep","updateSuspendedStatus","status","updateGroup","group","ismember","updateUserPreferences","preference","value","updateProfileComment"],"mappings":"oFAuB6B,IAAAA;;;;;;;;wgBAA7BC,OAA6BD,EAA7BC,QAA6BD,EAAAE,WAAAF,EAAAG,CAAAA,QAAAH,GAkC3BI,SAAAC,oBAjBkCA,CAACC,KAAMC,KAAMC,KAAMC,SAAUC,WAAYC,OAAQC,KAAMC,UAAWC,cAClG,MAAMC,QAAU,CACZC,WAAY,gCACZC,KAAM,CACFX,UACAC,UACAC,UACAU,SAAUT,SACVU,WAAYT,WACZC,OAAQA,OACRC,KAAMA,KACNQ,UAAWP,UACXQ,WAAYP,aAIpB,OAAOQ,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAuBhCX,SAAAoB,gBAX8BA,CAACf,SAAUgB,OAAQC,UAC/C,MAAMX,QAAU,CACZC,WAAY,kCACZC,KAAM,CACFC,SAAUT,SACVkB,OAAQD,OACRD,OAAQA,SAIhB,OAAOH,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAmBhCX,SAAAwB,0BATyCnB,WACvC,MAAMM,QAAU,CACZC,WAAY,6CACZC,KAAM,CACFC,SAAUT,WAIlB,OAAOa,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAsBhCX,SAAAyB,gBAX8BA,CAACpB,SAAUK,cACvC,MAAMC,QAAU,CACZC,WAAY,kCACZC,KAAM,CACFC,SAAUT,SACVY,WAAYP,WACZgB,aAAa,IAIrB,OAAOR,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAyBhCX,SAAA2B,eAZ6BA,CAACC,WAAYvB,SAAUK,WAAYD,aAC9D,MAAME,QAAU,CACZC,WAAY,6BACZC,KAAM,CACFe,WAAYA,WACZd,SAAUT,SACVY,WAAYP,WACZM,UAAWP,YAInB,OAAOS,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAuBhCX,SAAA6B,cAX4BA,CAACC,UAAWC,QAASC,UAC/C,MAAMrB,QAAU,CACZC,WAAY,+BACZC,KAAM,CACFoB,UAAWH,UACXC,QAASA,QACTC,OAAQA,SAIhB,OAAOd,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAqBhCX,SAAAkC,sBAVmCA,CAAClB,UAAWY,cAC7C,MAAMjB,QAAU,CACZC,WAAY,uCACZC,KAAM,CACFG,UAAWA,UACXY,WAAYA,aAIpB,OAAOV,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EA0BhCX,SAAAmC,UAZwBA,CAACC,UAAWC,OAAQnC,KAAMC,QAChD,MAAMQ,QAAU,CACZC,WAAY,2BACZC,KAAM,CACFyB,MAAOF,UACPtB,SAAUuB,OACVnC,KAAMA,KACNC,KAAMA,OAId,OAAOe,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAwBhCX,SAAAuC,WAXyBA,CAACF,OAAQnC,KAAMC,QACtC,MAAMQ,QAAU,CACZC,WAAY,6BACZC,KAAM,CACFC,SAAUuB,OACVnC,KAAMA,KACNC,KAAMA,OAId,OAAOe,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAsBhCX,SAAAwC,+BAV6CA,CAACC,SAAUC,YACtD,MAAM/B,QAAU,CACZC,WAAY,qCACZC,KAAM,CACF8B,SAAUF,SACVG,SAAUF,WAIlB,OAAOxB,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAwBhCX,SAAA6C,gBAZ8BA,CAACC,WAAYzC,SAAUiB,UAEnD,MAAMX,QAAU,CACZC,WAAY,mCACZC,KAAM,CACFkC,WAAYD,WACZhC,SAAUT,SACVkB,OAAQD,SAIhB,OAAOJ,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EA0BhCX,SAAAgD,eAb6BA,CAACF,WAAYxB,OAAQjB,SAAU4C,WAE1D,MAAMtC,QAAU,CACZC,WAAY,gCACZC,KAAM,CACFkC,WAAYD,WACZvB,OAAQD,OACRR,SAAUT,SACV4C,QAASA,UAIjB,OAAO/B,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EA0BhCX,SAAAkD,UAZwBA,CAACC,MAAO9C,SAAUiB,OAAQZ,cAChD,MAAMC,QAAU,CACZC,WAAY,0BACZC,KAAM,CACFsC,MAAOA,MACPrC,SAAUT,SACVkB,OAAQD,OACRL,WAAYP,aAIpB,OAAOQ,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAuBhCX,SAAAoD,sBAXoCA,CAACC,OAAQhD,SAAUiB,UACrD,MAAMX,QAAU,CACZC,WAAY,wCACZC,KAAM,CACFwC,OAAQA,OACRvC,SAAUT,SACVkB,OAAQD,SAIhB,OAAOJ,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAyBhCX,SAAAsD,YAZ0BA,CAACC,MAAOC,SAAUnD,SAAUiB,UACpD,MAAMX,QAAU,CACZC,WAAY,oCACZC,KAAM,CACF0C,MAAOA,MACPC,SAAUA,SACV1C,SAAUT,SACVkB,OAAQD,SAIhB,OAAOJ,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EA0BhCX,SAAAyD,sBAZoCA,CAACC,WAAYC,MAAOtD,SAAUiB,UAChE,MAAMX,QAAU,CACZC,WAAY,wCACZC,KAAM,CACF6C,WAAYA,WACZC,MAAOA,MACP7C,SAAUT,SACVkB,OAAQD,SAIhB,OAAOJ,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,EAuBhCX,SAAA4D,qBAXmCA,CAACvD,SAAUiB,OAAQS,WACpD,MAAMpB,QAAU,CACZC,WAAY,uCACZC,KAAM,CACFC,SAAUT,SACVkB,OAAQD,OACRS,QAASA,UAIjB,OAAOb,MAAAA,QAAKC,KAAK,CAACR,UAAU,EAAE,CAChC"}