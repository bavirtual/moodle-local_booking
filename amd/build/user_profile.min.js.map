{"version":3,"file":"user_profile.min.js","sources":["../src/user_profile.js"],"sourcesContent":["/* eslint-disable no-bitwise */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the message preference page.\n *\n * @module     local_booking/administration\n * @author     Mustafa Hajjar (mustafa.hajjar)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/str',\n    'core/notification',\n    'local_booking/repository',\n    'local_booking/selectors'\n],\nfunction(\n    $,\n    Str,\n    Notification,\n    Repository,\n    Selectors\n) {\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @method registerEventListeners\n     * @param  {object} root    The root element.\n     */\n    const registerEventListeners = function(root) {\n\n        var userProfile = root.find(Selectors.wrappers.userprofilewrapper),\n        courseId = userProfile.data('courseid'),\n        userId = userProfile.data('userid');\n\n        // Handle endorsement toggle clicks\n        $('#endorse').click(function() {\n            processSetting(courseId, userId, 'endorse', this.checked, root);\n        });\n\n        // Handle suspension toggle clicks\n        $('#suspended').click(function() {\n            processSetting(courseId, userId, 'suspend', this.checked);\n        });\n\n        // Handle on-hold toggle clicks\n        $('#onhold').click(function() {\n            // Add to OnHold group then trigger Keep Active if successful\n            processSetting(courseId, userId, 'onhold', this.checked, root)\n                .then((response) => {\n                    if (0 !== response) {\n                        // Toggle 'Keep Alive' so the student is not automatically placed on-hold again\n                        $('#keepactive').prop(\"checked\", !this.checked);\n                        return processSetting(courseId, userId, 'keepactive', !this.checked, root);\n                    }\n                    return true;\n                })\n                .fail(Notification.exception);\n        });\n\n        // Handle keep active toggle clicks\n        $('#keepactive').click(function() {\n            processSetting(courseId, userId, 'keepactive', this.checked, root);\n        });\n\n        // Handle restriction override toggle clicks\n        $('#overrideminslotperiod').click(function() {\n            processSetting(courseId, userId, 'overrideminslotperiod', this.checked, root);\n        });\n\n        // Handle show cross-course bookings toggle clicks\n        $('#xcoursebookings').click(function() {\n            processSetting(courseId, userId, 'xcoursebookings', this.checked, root);\n        });\n\n        // Handle save comment click\n        $('#save_comment_button').click(function() {\n            updateComment(courseId, userId, root);\n        });\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @method processSetting\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} key         The key of the setting.\n     * @param  {string} value       Setting value.\n     * @param  {object} root        The root element.\n     */\n    const processSetting = function(courseId, userId, key, value, root) {\n\n        // Show progressing icon\n        startLoading($('#' + key + '-region'));\n\n        let response;\n        // Process the different toggle actions\n        switch (key) {\n            case 'endorse':\n                // Process student endorsement and handle UI\n                response = setEndorsement(courseId, userId, value, root);\n                break;\n            case 'xcoursebookings':\n                // Process availability override in user preferences and handle UI, site level courseid=1\n                response = processUserPreference(key, value, 1, userId, key);\n                break;\n            case 'overrideminslotperiod':\n                // Process availability override in user preferences and handle UI\n                response = processProgressUpdate(key, value, courseId, userId, key);\n                break;\n            case 'suspend':\n                // Toggle enrolment status suspension on/off and handle UI\n                response = processSuspendedStatus(value, courseId, userId);\n                break;\n            case 'onhold':\n            case 'keepactive':\n                // Process keep active in user preferences and handle UI\n                response = processGroup(key, value, courseId, userId, root);\n                break;\n        }\n\n        // Stop showing progressing icon\n        stopLoading($('#' + key + '-region'));\n\n        return response;\n    };\n\n    /**\n     * Set the endorsed message.\n     *\n     * @method setEndorsement\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} endorse     Endorse true/false.\n     * @param  {object} root        The root element.\n     */\n     const setEndorsement = function(courseId, userId, endorse, root) {\n        // Get endorsement information (endorser, date, and message) from template\n        let userProfile = root.find(Selectors.wrappers.userprofilewrapper),\n        endorsername = userProfile.data('endorsername'),\n        endorser = userProfile.data('endorser'),\n        endorsedate = new Date(),\n        endorsedon = endorsedate.toDateString(),\n        endorsedatets = Math.round(endorsedate.getTime() / 1000),\n        endorsestr = endorse ? 'endorsementmgs' : 'skilltestendorse';\n\n        // Process endorsement message\n        let endorsemsgPromise = Str.get_string(endorsestr, 'local_booking', {endorser: endorsername, endorsedate: endorsedon});\n        endorsemsgPromise.then(function(message) {\n            // Set endorsement message\n            $('#endorsement-label').html(message);\n            // Show/hide recommendation letter link\n            if (endorse) {\n                $('#endorsement-letter').removeClass('hidden');\n            } else {\n                $('#endorsement-letter').addClass('hidden');\n            }\n            return message;\n        })\n        .fail(Notification.exception);\n\n         let result = endorsemsgPromise.trim().length !== 0;\n\n        // Persist endorsement in user preferences\n        result &= processProgressUpdate('endorse', endorse, courseId, userId, 'endorse');\n        result &= processProgressUpdate('endorser', endorse ? endorser : '', courseId, userId, 'endorse');\n        result &= processProgressUpdate('endorsedate', endorse ? endorsedatets : '', courseId, userId, 'endorse');\n        result &= processProgressUpdate('notifyendorsement', endorse, courseId, userId, 'endorse');\n\n         return result;\n    };\n\n    /**\n     * Process student progress update.\n     *\n     * @method processProgressUpdate\n     * @param  {string} progressKey The progress key.\n     * @param  {string} value       The value data.\n     * @param  {string} courseId    The associated course id.\n     * @param  {string} studentId   The student.\n     * @param  {string} element     The element to handle GUI.\n     * @return {bool}\n     */\n     const processProgressUpdate = function(progressKey, value, courseId, studentId, element) {\n\n        return Repository.updateStudentProgress(progressKey, value, courseId, studentId)\n        .then(function(result) {\n            return result.saved;\n        })\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            $('#' + element).prop('checked', !$('#' + element).prop('checked'));\n            return true;\n        });\n    };\n\n    /**\n     * Process the user setting preference depending on the passed\n     * preference and value pairs.\n     *\n     * @method processUserPreference\n     * @param  {string} preference  The preference key of the setting.\n     * @param  {string} value       The value data.\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} element     The element to handle GUI.\n     * @return {bool}\n     */\n     const processUserPreference = function(preference, value, courseId, userId, element) {\n\n        return Repository.setUserPreferences(preference, value, courseId, userId)\n        .then(function(result) {\n            return result.saved;\n        })\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            $('#' + element).prop('checked', !$('#' + element).prop('checked'));\n            return true;\n        });\n    };\n\n    /**\n     * Process the user suspension status.\n     *\n     * @method processSuspendedStatus\n     * @param  {bool}   suspend     Suspend true/false.\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @return {bool}\n     */\n     const processSuspendedStatus = function(suspend, courseId, userId) {\n        // eslint-disable-next-line promise/valid-params\n        return Repository.updateSuspendedStatus(suspend, courseId, userId)\n        .then()\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            $('#suspended').prop('checked', !$('#suspended').prop('checked'));\n            return true;\n        });\n    };\n\n    /**\n     * Process the user group membership status on-hold and keep active.\n     *\n     * @method processGroup\n     * @param  {string} key      The key of the setting.\n     * @param  {bool}   add      Join or leave true/false.\n     * @param  {string} courseId The course id for suspension.\n     * @param  {string} userId   The user id to be suspended.\n     * @param  {object} root     The root element.\n     * @return {bool}\n     */\n    const processGroup = function(key, add, courseId, userId, root) {\n\n        // Get the group name from the template\n        const userProfile = root.find(Selectors.wrappers.userprofilewrapper),\n        groupName = userProfile.data(key + 'group');\n\n        // Add or remove the user from the group\n        return Repository.groupAddRemove(courseId, userId, groupName, add)\n            .then(function(response) {\n                return response.result;\n            })\n            .always(function() {\n                Notification.fetchNotifications();\n            })\n            .fail(function(ex) {\n                Notification.exception(ex);\n                // Handle toggle failure\n                $('#' + key).prop('checked', !$('#' + key).prop('checked'));\n                return false;\n            });\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {object} root        The root element.\n     * @method processSetting\n     * @return {bool}\n     */\n     const updateComment = function(courseId, userId, root) {\n\n        // Show progressing icon\n        startLoading(root);\n        const comment = $('#comment').val();\n\n        // Save the comment\n        return Repository.updateProfileComment(courseId, userId, comment)\n        .then(function(response) {\n            // Add success status element if necessary\n            let result = response.result;\n            // eslint-disable-next-line promise/no-nesting\n            Str.get_string((result ? 'commentsaved' : 'commentnotsaved'), 'local_booking').then(function(string) {\n                // Show the status for a little bit\n                $('#status').addClass('comment-status-' + (result ? 'success' : 'error'));\n                $('#status').removeClass('comment-status-' + (!result ? 'success' : 'error'));\n                $('#status').text(string).slideDown(1000).delay(2000).slideUp(1000);\n                return true;\n            })\n            .fail(Notification.exception);\n            return false;\n        })\n        .always(function() {\n            Notification.fetchNotifications();\n            // Stop showing progressing icon\n            stopLoading(root);\n        })\n        .fail(Notification.exception);\n    };\n\n    /**\n     * Set the element state to loading.\n     *\n     * @method  startLoading\n     * @param   {object} root The container element\n     */\n    const startLoading = (root) => {\n        const loadingIconContainer = root.find(Selectors.containers.loadingIcon);\n        loadingIconContainer.removeClass('hidden');\n    };\n\n    /**\n     * Unset the element state of loading.\n     *\n     * @method  stopLoading\n     * @param   {object} root The container element\n     */\n    const stopLoading = (root) => {\n        const loadingIconContainer = root.find(Selectors.containers.loadingIcon);\n        loadingIconContainer.addClass('hidden');\n    };\n\n    return {\n        init: function(root) {\n            root = $(root);\n            registerEventListeners(root);\n        }\n    };\n});\n"],"names":["define","$","Str","Notification","Repository","Selectors","processSetting","courseId","userId","key","value","root","response","startLoading","setEndorsement","processUserPreference","processProgressUpdate","processSuspendedStatus","processGroup","stopLoading","endorse","userProfile","find","wrappers","userprofilewrapper","endorsername","data","endorser","endorsedate","Date","endorsedon","toDateString","endorsedatets","Math","round","getTime","endorsestr","endorsemsgPromise","get_string","then","message","html","removeClass","addClass","fail","exception","result","trim","length","progressKey","studentId","element","updateStudentProgress","saved","always","fetchNotifications","ex","prop","preference","setUserPreferences","suspend","updateSuspendedStatus","add","groupName","groupAddRemove","updateComment","comment","val","updateProfileComment","string","text","slideDown","delay","slideUp","containers","loadingIcon","init","click","this","checked","registerEventListeners"],"mappings":";;;;;;;;AAwBAA,oCAAO,CACH,SACA,WACA,oBACA,2BACA,4BAEJ,SACIC,EACAC,IACAC,aACAC,WACAC,iBAuEMC,eAAiB,SAASC,SAAUC,OAAQC,IAAKC,MAAOC,UAKtDC,gBAFJC,aAAaZ,EAAE,IAAMQ,IAAM,YAInBA,SACC,UAEDG,SAAWE,eAAeP,SAAUC,OAAQE,MAAOC,gBAElD,kBAEDC,SAAWG,sBAAsBN,IAAKC,MAAO,EAAGF,OAAQC,eAEvD,wBAEDG,SAAWI,sBAAsBP,IAAKC,MAAOH,SAAUC,OAAQC,eAE9D,UAEDG,SAAWK,uBAAuBP,MAAOH,SAAUC,kBAElD,aACA,aAEDI,SAAWM,aAAaT,IAAKC,MAAOH,SAAUC,OAAQG,aAK9DQ,YAAYlB,EAAE,IAAMQ,IAAM,YAEnBG,UAYJE,eAAiB,SAASP,SAAUC,OAAQY,QAAST,UAEpDU,YAAcV,KAAKW,KAAKjB,UAAUkB,SAASC,oBAC/CC,aAAeJ,YAAYK,KAAK,gBAChCC,SAAWN,YAAYK,KAAK,YAC5BE,YAAc,IAAIC,KAClBC,WAAaF,YAAYG,eACzBC,cAAgBC,KAAKC,MAAMN,YAAYO,UAAY,KACnDC,WAAahB,QAAU,iBAAmB,mBAGtCiB,kBAAoBnC,IAAIoC,WAAWF,WAAY,gBAAiB,CAACT,SAAUF,aAAcG,YAAaE,aAC1GO,kBAAkBE,MAAK,SAASC,gBAE5BvC,EAAE,sBAAsBwC,KAAKD,SAEzBpB,QACAnB,EAAE,uBAAuByC,YAAY,UAErCzC,EAAE,uBAAuB0C,SAAS,UAE/BH,WAEVI,KAAKzC,aAAa0C,eAEdC,OAA6C,IAApCT,kBAAkBU,OAAOC,cAGvCF,QAAU9B,sBAAsB,UAAWI,QAASb,SAAUC,OAAQ,WACtEsC,QAAU9B,sBAAsB,WAAYI,QAAUO,SAAW,GAAIpB,SAAUC,OAAQ,WACvFsC,QAAU9B,sBAAsB,cAAeI,QAAUY,cAAgB,GAAIzB,SAAUC,OAAQ,WAC/FsC,QAAU9B,sBAAsB,oBAAqBI,QAASb,SAAUC,OAAQ,WAExEsC,QAcL9B,sBAAwB,SAASiC,YAAavC,MAAOH,SAAU2C,UAAWC,gBAEtE/C,WAAWgD,sBAAsBH,YAAavC,MAAOH,SAAU2C,WACrEX,MAAK,SAASO,eACJA,OAAOO,SAEjBC,QAAO,WACJnD,aAAaoD,wBAEhBX,MAAK,SAASY,WACXrD,aAAa0C,UAAUW,IAEvBvD,EAAE,IAAMkD,SAASM,KAAK,WAAYxD,EAAE,IAAMkD,SAASM,KAAK,aACjD,MAgBR1C,sBAAwB,SAAS2C,WAAYhD,MAAOH,SAAUC,OAAQ2C,gBAElE/C,WAAWuD,mBAAmBD,WAAYhD,MAAOH,SAAUC,QACjE+B,MAAK,SAASO,eACJA,OAAOO,SAEjBC,QAAO,WACJnD,aAAaoD,wBAEhBX,MAAK,SAASY,WACXrD,aAAa0C,UAAUW,IAEvBvD,EAAE,IAAMkD,SAASM,KAAK,WAAYxD,EAAE,IAAMkD,SAASM,KAAK,aACjD,MAaRxC,uBAAyB,SAAS2C,QAASrD,SAAUC,eAEjDJ,WAAWyD,sBAAsBD,QAASrD,SAAUC,QAC1D+B,OACAe,QAAO,WACJnD,aAAaoD,wBAEhBX,MAAK,SAASY,WACXrD,aAAa0C,UAAUW,IAEvBvD,EAAE,cAAcwD,KAAK,WAAYxD,EAAE,cAAcwD,KAAK,aAC/C,MAeTvC,aAAe,SAAST,IAAKqD,IAAKvD,SAAUC,OAAQG,YAItDoD,UADoBpD,KAAKW,KAAKjB,UAAUkB,SAASC,oBACzBE,KAAKjB,IAAM,gBAG5BL,WAAW4D,eAAezD,SAAUC,OAAQuD,UAAWD,KACzDvB,MAAK,SAAS3B,iBACJA,SAASkC,UAEnBQ,QAAO,WACJnD,aAAaoD,wBAEhBX,MAAK,SAASY,WACXrD,aAAa0C,UAAUW,IAEvBvD,EAAE,IAAMQ,KAAKgD,KAAK,WAAYxD,EAAE,IAAMQ,KAAKgD,KAAK,aACzC,MAaZQ,cAAgB,SAAS1D,SAAUC,OAAQG,MAG9CE,aAAaF,YACPuD,QAAUjE,EAAE,YAAYkE,aAGvB/D,WAAWgE,qBAAqB7D,SAAUC,OAAQ0D,SACxD3B,MAAK,SAAS3B,cAEPkC,OAASlC,SAASkC,cAEtB5C,IAAIoC,WAAYQ,OAAS,eAAiB,kBAAoB,iBAAiBP,MAAK,SAAS8B,eAEzFpE,EAAE,WAAW0C,SAAS,mBAAqBG,OAAS,UAAY,UAChE7C,EAAE,WAAWyC,YAAY,mBAAsBI,OAAqB,QAAZ,YACxD7C,EAAE,WAAWqE,KAAKD,QAAQE,UAAU,KAAMC,MAAM,KAAMC,QAAQ,MACvD,KAEV7B,KAAKzC,aAAa0C,YACZ,KAEVS,QAAO,WACJnD,aAAaoD,qBAEbpC,YAAYR,SAEfiC,KAAKzC,aAAa0C,YASjBhC,aAAgBF,OACWA,KAAKW,KAAKjB,UAAUqE,WAAWC,aACvCjC,YAAY,WAS/BvB,YAAeR,OACYA,KAAKW,KAAKjB,UAAUqE,WAAWC,aACvChC,SAAS,iBAG3B,CACHiC,KAAM,SAASjE,OAhUY,SAASA,UAEhCU,YAAcV,KAAKW,KAAKjB,UAAUkB,SAASC,oBAC/CjB,SAAWc,YAAYK,KAAK,YAC5BlB,OAASa,YAAYK,KAAK,UAG1BzB,EAAE,YAAY4E,OAAM,WAChBvE,eAAeC,SAAUC,OAAQ,UAAWsE,KAAKC,QAASpE,SAI9DV,EAAE,cAAc4E,OAAM,WAClBvE,eAAeC,SAAUC,OAAQ,UAAWsE,KAAKC,YAIrD9E,EAAE,WAAW4E,OAAM,WAEfvE,eAAeC,SAAUC,OAAQ,SAAUsE,KAAKC,QAASpE,MACpD4B,MAAM3B,UACC,IAAMA,WAENX,EAAE,eAAewD,KAAK,WAAYqB,KAAKC,SAChCzE,eAAeC,SAAUC,OAAQ,cAAesE,KAAKC,QAASpE,SAI5EiC,KAAKzC,aAAa0C,cAI3B5C,EAAE,eAAe4E,OAAM,WACnBvE,eAAeC,SAAUC,OAAQ,aAAcsE,KAAKC,QAASpE,SAIjEV,EAAE,0BAA0B4E,OAAM,WAC9BvE,eAAeC,SAAUC,OAAQ,wBAAyBsE,KAAKC,QAASpE,SAI5EV,EAAE,oBAAoB4E,OAAM,WACxBvE,eAAeC,SAAUC,OAAQ,kBAAmBsE,KAAKC,QAASpE,SAItEV,EAAE,wBAAwB4E,OAAM,WAC5BZ,cAAc1D,SAAUC,OAAQG,SAkRhCqE,CADArE,KAAOV,EAAEU"}