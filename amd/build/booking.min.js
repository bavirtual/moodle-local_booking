/**
 * This module is responsible for registering listeners
 * for all session booking and logentry events.
 *
 * @module     local_booking/booking
 * @author     Mustafa Hajjar (mustafahajjar@gmail.com)
 * @copyright  BAVirtual.co.uk Â© 2021
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("local_booking/booking",["jquery","core/str","core/pending","core/modal_factory","core/notification","local_booking/booking_view_manager","local_booking/booking_actions","local_booking/events","local_booking/modal_logentry_form","local_booking/selectors"],(function($,Str,Pending,ModalFactory,Notification,ViewManager,BookingActions,BookingEvents,ModalLogentryEditForm,Selectors){const registerSessionEventListeners=root=>{const contextId=$(Selectors.bookingwrapper).data("contextid"),courseId=$(Selectors.bookingwrapper).data("courseid");contextId&&root.on("click",Selectors.actions.viewLogEntry,(function(e){let logentryId=$(this).attr("data-logentry-id"),userId=$(this).attr("data-student-id");e.preventDefault(),e.stopPropagation(),0==logentryId?registerLogentryEditForm(null,e,contextId,courseId,userId,logentryId,!0):registerLogentrySummaryForm(contextId,courseId,userId,logentryId),e.stopImmediatePropagation()}))},registerLogentryEditForm=(root,e,contextId,courseId,userId,logentryId,isNew)=>{const LogentryFormPromise=ModalFactory.create({type:ModalLogentryEditForm.TYPE,large:!0}),target=e.target,pendingPromise=new Pending("local_booking/registerLogentryEditForm");ViewManager.renderLogentryModal(root,e,LogentryFormPromise,target,contextId,courseId,userId,logentryId,isNew).then(pendingPromise.resolve()).catch()},registerLogentrySummaryForm=(contextId,courseId,userId,logentryId)=>{const pendingPromise=new Pending("local_booking/registerLogentrySummaryForm");logentryId?ViewManager.renderLogentrySummaryModal(courseId,userId,logentryId).then((function(modal){return $("body").on(BookingEvents.editLogentry,(function(e,userId,logentryId){registerLogentryEditForm(modal.getRoot(),e,contextId,courseId,userId,logentryId),e.stopImmediatePropagation()})),$("body").on(BookingEvents.addLogentry,(function(e,userId){registerLogentryEditForm(modal.getRoot(),e,contextId,courseId,userId,0),e.stopImmediatePropagation()})),modal})).then(pendingPromise.resolve()).catch():pendingPromise.resolve()},registerEventListeners=function(root){!function(root){const body=$("body");body.on(BookingEvents.canceled,(function(){ViewManager.refreshBookingsContent(root)})),body.on(BookingEvents.created,(function(){ViewManager.refreshBookingsContent(root)})),body.on(BookingEvents.updated,(function(){ViewManager.refreshBookingsContent(root)})),body.on(BookingEvents.deleted,(function(){ViewManager.refreshBookingsContent(root)})),root.on("click",Selectors.cancelbutton,(function(e){Str.get_string("commentcancel","local_booking").then((function(promptMsg){const comment=prompt(promptMsg);null!==comment&&BookingActions.cancelBooking(root,e,comment,!1)})).catch(Notification.exception)})),root.on("click",Selectors.noshowbutton,(function(e){const noshows=$(e.target).closest(Selectors.sessionbutton).data("noshows"),noShowComment=Str.get_string("commentnoshow"+noshows,"local_booking").then((function(noshowMsg){return noshowMsg})).catch(Notification.exception);$.when(Str.get_string("commentnoshow","local_booking"),noShowComment).then((function(promptMsg,noshowMsg){confirm(promptMsg+"\n\n"+noshowMsg)&&BookingActions.cancelBooking(root,e,null,!0)})).catch(Notification.exception)})),root.on("change","input[type=radio][name=studentsfilter]",(function(){ViewManager.refreshBookingsContent(root,0,0,null,$('input[name="studentsfilter"]:checked').val())})),root.on("click",Selectors.actions.gotoFeedback,(function(e){BookingActions.gotoFeedback(root,e),e.preventDefault()}))}(root),registerSessionEventListeners(root)};return{init:function(root){root=$(root);registerEventListeners(root),ViewManager.stopLoading(root)}}}));

//# sourceMappingURL=booking.min.js.map