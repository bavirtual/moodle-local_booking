{"version":3,"file":"modal_logentry_form.min.js","sources":["../src/modal_logentry_form.js"],"sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable @babel/new-cap */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles logbook entry form.\n *\n * @module     local_booking/logentry_modal_form\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as FormEvents from 'core_form/events';\nimport * as Str from 'core/str';\nimport * as Notification from 'core/notification';\nimport * as CustomEvents from 'core/custom_interaction_events';\nimport Modal from 'core/modal';\nimport * as Fragment from 'core/fragment';\nimport * as Repository from 'local_booking/repository';\nimport * as LogbookEvents from 'local_booking/events';\nimport * as Selectors from 'local_booking/selectors';\n\nvar SELECTORS = {\n    ADVANCED_FORM: '[data-form-type=\"other\"]',\n    SAVE_BUTTON: '[data-action=\"save\"]',\n    LOADING_ICON_CONTAINER: '[data-region=\"loading-icon-container\"]',\n};\n\n/**\n * Constructor for the Modal.\n *\n * @param {object} root The root jQuery element for the modal\n */\nexport default class ModalLogEntryForm extends Modal {\n    static TYPE = 'local_booking-logentry_modal_form';\n    static TEMPLATE = 'local_booking/logentry_modal_form';\n\n    /**\n     * Constructor for the Modal.\n     *\n     * @param {object} root The root jQuery element for the modal\n     */\n    constructor(root) {\n        super(root);\n\n        this.contextId = null;\n        this.courseId = null;\n        this.userId = null;\n        this.logentryId = null;\n        this.flightDate = null;\n        this.exerciseId = null;\n        this.sessionId = null;\n        this.pirepLookupId = null;\n        this.hasfindpirep = false;\n        this.reloadingBody = false;\n        this.reloadingTitle = false;\n        this.saveButton = this.getFooter().find(SELECTORS.SAVE_BUTTON);\n    }\n\n    configure(modalConfig) {\n        modalConfig.large = true;\n        super.configure(modalConfig);\n    }\n\n    /**\n     * Set the context id to the given value.\n     *\n     * @method setContextId\n     * @param {Number} id The context id\n     */\n    setContextId(id) {\n        this.contextId = id;\n    }\n\n    /**\n     * Get the current context id, if any.\n     *\n     * @method getContextId\n     * @return {Number|null} The context id\n     */\n    getContextId() {\n        return this.contextId;\n    }\n\n    /**\n     * Set the course id to the given value.\n     *\n     * @method setCourseId\n     * @param {int} id The course id\n     */\n    setCourseId(id) {\n        this.courseId = id;\n    }\n\n    /**\n     * Get the current course id, if any.\n     *\n     * @method getCourseId\n     * @return {int|null} The course id\n     */\n    getCourseId() {\n        return this.courseId;\n    }\n\n    /**\n     * Check if the modal has an course id.\n     *\n     * @method hasCourseId\n     * @return {bool}\n     */\n    hasCourseId() {\n        return this.courseId !== null;\n    }\n\n    /**\n     * Set the exercise id to the given value.\n     *\n     * @method setExerciseId\n     * @param {int} id The exercise id\n     */\n        setExerciseId(id) {\n        this.exerciseId = id;\n    }\n\n    /**\n     * Get the current exercise id, if any.\n     *\n     * @method getExerciseId\n     * @return {int|null} The exercise id\n     */\n    getExerciseId() {\n        return this.exerciseId;\n    }\n\n    /**\n     * Check if the modal has an exercise id.\n     *\n     * @method hasExerciseId\n     * @return {bool}\n     */\n    hasExerciseId() {\n        return this.exerciseId !== null;\n    }\n\n    /**\n     * Set the session id to the given value.\n     *\n     * @method setSessionId\n     * @param {int} id The session id\n     */\n    setSessionId(id) {\n        this.sessionId = id;\n    }\n\n    /**\n     * Get the current session id, if any.\n     *\n     * @method getSessionId\n     * @return {int|null} The session id\n     */\n    getSessionId() {\n        return this.sessionId;\n    }\n\n    /**\n     * Check if the modal has an session id.\n     *\n     * @method hasSessionId\n     * @return {bool}\n     */\n    hasSessionId() {\n        return this.sessionId !== null;\n    }\n\n    /**\n     * Set the user id to the given value.\n     *\n     * @method setUserId\n     * @param {int} id The user id\n     */\n    setUserId(id) {\n        this.userId = id;\n    }\n\n    /**\n     * Get the current user id, if any.\n     *\n     * @method getUserId\n     * @return {int|null} The user id\n     */\n    getUserId() {\n        return this.userId;\n    }\n\n    /**\n     * Check if the modal has an user id.\n     *\n     * @method hasUserId\n     * @return {bool}\n     */\n    hasUserId() {\n        return this.userId !== null;\n    }\n\n    /**\n     * Set the logentry id to the given value.\n     *\n     * @method setLogentryId\n     * @param {int} id The logentry id\n     */\n    setLogentryId(id) {\n        this.logentryId = id;\n    }\n\n    /**\n     * Get the current logentry id, if any.\n     *\n     * @method getLogentryId\n     * @return {int|null} The logentry id\n     */\n    getLogentryId() {\n        return this.logentryId;\n    }\n\n    /**\n     * Check if the modal has an logentry id.\n     *\n     * @method hasLogentryId\n     * @return {bool}\n     */\n    hasLogentryId() {\n        return this.logentryId !== null && this.logentryId != 0;\n    }\n\n    /**\n     * Set the start time to the given value.\n     *\n     * @method setFlightDate\n     * @param {int} time The session date time\n     */\n    setFlightDate(time) {\n        this.flightDate = time;\n    }\n\n    /**\n     * Get the current start time, if any.\n     *\n     * @method getFlightDate\n     * @return {int|null} The start time\n     */\n    getFlightDate() {\n        return this.flightDate;\n    }\n\n    /**\n     * Check if the modal has session date time.\n     *\n     * @method hasFlightDate\n     * @return {bool}\n     */\n    hasFlightDate() {\n        return this.flightDate !== null;\n    }\n\n    /**\n     * Set the flight type of the logentry to the given value.\n     *\n     * @method setFlightType\n     * @param {string} flighttype The flight type (training/solo/check)\n     */\n    setFlightType(flighttype) {\n        this.flightType = flighttype;\n    }\n\n    /**\n     * Get flight type of the logentry.\n     *\n     * @method getFlightType\n     * @return {string} The flight type (training/solo/check)\n     */\n    getFlightType() {\n        return this.flightType;\n    }\n\n    /**\n     * Check if the modal has an logentry id.\n     *\n     * @param  {bool} hasfindpirep  Whether find PIREP is enabled\n     * @method hasFindPIREP\n     * @return {bool}\n     */\n    hasFindPIREP(hasfindpirep) {\n        if (typeof hasfindpirep !== 'undefined') {\n            this.hasfindpirep = hasfindpirep;\n        }\n        return this.hasfindpirep;\n    }\n\n    /**\n     * Get the form element from the modal.\n     *\n     * @method getForm\n     * @return {object}\n     */\n    getForm() {\n        return this.getBody().find('form');\n    }\n\n    /**\n     * Disable the buttons in the footer.\n     *\n     * @method disableButtons\n     */\n    disableButtons() {\n        this.saveButton.prop('disabled', true);\n    }\n\n    /**\n     * Enable the buttons in the footer.\n     *\n     * @method enableButtons\n     */\n    enableButtons() {\n        this.saveButton.prop('disabled', false);\n    }\n\n    /**\n     * Reload the title for the modal to the appropriate value\n     * depending on whether we are creating a new log book entry\n     * or editing an existing one.\n     *\n     * @method reloadTitleContent\n     * @return {object} A promise resolved with the new title text\n     */\n    reloadTitleContent() {\n        if (this.reloadingTitle) {\n            return this.titlePromise;\n        }\n\n        this.reloadingTitle = true;\n\n        // Get exercise name\n        this.titlePromise = Repository.getExerciseName(this.courseId, this.exerciseId)\n            .then(function(response) {\n                // Handle the response\n                return response.exercisename == '' ? 'New logentry' : response.exercisename;\n            })\n        .fail(Notification.exception);\n\n        this.titlePromise.then(function(string) {\n            this.setTitle(string);\n            return string;\n        }.bind(this))\n        .always(function() {\n            this.reloadingTitle = false;\n            return;\n        }.bind(this))\n        .fail(Notification.exception);\n\n        return this.titlePromise;\n    }\n\n    /**\n     * Send a request to the server to get the logentry_form in a fragment\n     * and render the result in the body of the modal.\n     *\n     * If serialised form data is provided then it will be sent in the\n     * request to the server to have the form rendered with the data. This\n     * is used when the form had a server side error and we need the server\n     * to re-render it for us to display the error to the user.\n     *\n     * @method reloadBodyContent\n     * @param {string} formData The serialised form data\n     * @return {object} A promise resolved with the fragment html and js from\n     */\n    reloadBodyContent(formData) {\n        if (this.reloadingBody) {\n            return this.bodyPromise;\n        }\n\n        this.reloadingBody = true;\n        this.disableButtons();\n\n        var args = {};\n\n        if (this.hasUserId()) {\n            args.userid = this.getUserId();\n        }\n\n        if (this.hasLogentryId()) {\n            args.logentryid = this.getLogentryId();\n        }\n\n        if (this.hasFlightDate()) {\n            args.flightdate = this.getFlightDate();\n        }\n\n        if (this.hasCourseId()) {\n            args.courseid = this.getCourseId();\n        }\n\n        if (this.hasExerciseId()) {\n            args.exerciseid = this.getExerciseId();\n        }\n\n        if (this.hasSessionId()) {\n            args.sessionid = this.getSessionId();\n        }\n\n        if (typeof formData !== 'undefined') {\n            args.formdata = formData;\n        }\n\n        // Get the content of the modal\n        this.bodyPromise = Fragment.loadFragment('local_booking', 'logentry_form', this.getContextId(), args);\n\n        // Set the body data using the promise\n        this.setBody(this.bodyPromise);\n\n        this.bodyPromise.then(function() {\n            // Add Find PIREP button\n            if (this.hasFindPIREP()) {\n                if (!$('#id_error2_p1pirep').length) {\n                    let p1pirep = $('#id_p1pirep');\n                    let pirepdiv = p1pirep.parent();\n\n                    // Append PIREP search group\n                    pirepdiv.prepend('<div class=\"input-group\" id=\"id_pirepgroup\">');\n                    $('#id_pirepgroup').append(p1pirep);\n                    $('#id_pirepgroup').append('<div class=\"input-group-append\" id=\"id_find_pirep\">');\n                    $('#id_find_pirep').append('<button type=\"button\" class=\"btn btn-primary search-icon\"><i class=\"icon ' +\n                        'fa fa-search fa-fw \" aria-hidden=\"true\"></i></button>');\n                }\n            }\n\n            // Hide/show elements set training type\n            this.doDynamicDisplay();\n            this.enableButtons();\n            this.setInputMask();\n            this.registerChangeListeners();\n\n            return;\n        }.bind(this))\n        .fail(Notification.exception)\n        .always(function() {\n            this.reloadingBody = false;\n            return;\n        }.bind(this))\n        .fail(Notification.exception);\n\n        return this.bodyPromise;\n    }\n\n    /**\n     * Sets the input mask for all masked elements.\n     *\n     * @method setInputMask\n     */\n    setInputMask() {\n        // Mask flight times < 5hrs and departure/arrival times to 24hr format\n        // Mask flight time elements based on training type\n\n        if ($(Selectors.bookingwrapper).data('trainingtype') == \"Dual\") {\n            Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_dualtime\"));\n        } else if ($(Selectors.bookingwrapper).data('trainingtype') == \"Multicrew\") {\n            Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_multipilottime\"));\n\n            // TODO: Instructor logentry edit:\n            // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_copilottime\"));\n        }\n        // Check for the flight type before masking related elements\n        if ($(\"input[name='flighttypehidden']\").val() == 'check') {\n            Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_picustime\"));\n\n            // TODO: Instructor logentry edit:\n            // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_checkpilottime\"));\n        } else if ($(\"input[name='flighttypehidden']\").val() == 'solo') {\n            Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_flighttime\"));\n        } else {\n            Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_groundtime\"));\n        }\n\n        // TODO: Instructor logentry edit:\n        // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_pictime\"));\n        // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_instructortime\"));\n\n        // Mask remaining elements\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_flighttime\"));\n        Inputmask({\"regex\": \"^([01]?[0-9]|2[0-3]):[0-5][0-9]\"}).mask(document.getElementById(\"id_deptime\"));\n        Inputmask({\"regex\": \"^([01]?[0-9]|2[0-3]):[0-5][0-9]\"}).mask(document.getElementById(\"id_arrtime\"));\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_nighttime\"));\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_ifrtime\"));\n        Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp1day\"));\n        Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp1night\"));\n\n        // Check for new logentries noting landings of both instructor and student\n        if (this.getLogentryId() == 0) {\n            Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp2day\"));\n            Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp2night\"));\n        }\n    }\n\n    /**\n     * Sets the input mask for all masked elements.\n     *\n     * @method registerChangeListeners\n     */\n    registerChangeListeners() {\n\n        // PIREP search trigger\n        if (this.hasFindPIREP()) {\n            var pirepbutton = $('#id_find_pirep');\n            pirepbutton.on('click', function(e) {\n                if (!isNaN($('#id_p1pirep').val())) {\n                    return this.getPIREPData(e);\n                }\n                return false;\n            }.bind(this));\n        }\n\n        // Update elements based on selected exercise\n        var exercises = $('#id_exercises');\n        exercises.on('change', function() {\n            // Assign the value selected in the radio buttons to the hidden flight type element\n            let $exerciseid = $(\"#id_exercises\").val();\n            $(\"input[name='exerciseid']\").val($exerciseid);\n            if ($exerciseid == $(\"input[name='graduationexerciseid']\").val()) {\n                $(\"input[name='flighttypehidden']\").val(\"check\");\n            } else {\n                $(\"input[name='flighttypehidden']\").val($(\"input[name='flighttype']:checked\").val());\n            }\n            this.doDynamicDisplay();\n        }.bind(this));\n\n        // Update elements based on selected flighttype (Training/Solo)\n        var flighttype = $('input[name=\"flighttype\"]');\n        flighttype.on('change', function() {\n            // Assign the value selected in the radio buttons to the hidden flight type element\n            $(\"input[name='flighttypehidden']\").val($(\"input[name='flighttype']:checked\").val());\n            this.doDynamicDisplay();\n            this.applyFlightTimes();\n        }.bind(this));\n\n        // Update flight times when the test result status is changed\n        var passfail = $('input[name=\"passfail\"]');\n        passfail.on('change', function() {\n            $(\"input[name='flighttypehidden']\").val(\"check\");\n            this.doDynamicDisplay();\n            this.applyFlightTimes();\n        }.bind(this));\n\n        // Update flight times when flight rules are changed\n        var flightrule = $('input[name=\"flightrule\"]');\n        flightrule.on('change', function() {\n            this.doDynamicDisplay();\n            this.applyFlightTimes();\n        }.bind(this));\n\n        // The onchange property has to be set due to the flighttime element being masked\n        var flighttime = document.getElementById(\"id_flighttime\");\n        flighttime.onchange = function() {\n            return this.applyFlightTimes(true);\n        }.bind(this);\n    }\n\n    /**\n     * Get and populate log entry data from\n     * the server's PIREP lookup service.\n     *\n     * @method getPIREPData\n     * @param  {object} e The triggered event\n     * @return {object} pirep of the logentry\n     */\n    getPIREPData(e) {\n        var loadingContainer = this.getFooter().find(SELECTORS.LOADING_ICON_CONTAINER);\n        var pirepdiv = $('#id_p1pirep').parent(),\n        pirep = $('#id_p1pirep').val(),\n        courseid = this.getCourseId(),\n        exerciseid = this.getExerciseId();\n\n        if (pirep != '') {\n            loadingContainer.removeClass('hidden');\n            return Repository.findPirep(pirep, courseid, $('#id_p1id').val(), exerciseid)\n                .then(function(response) {\n                    // Clean up any past client side errors\n                    $('#id_p1pirep').removeClass('is-invalid');\n\n                    // Handle the response\n                    if (response.result) {\n                        // Get found message\n                        if (!$('#id_valid_p1pirep').length) {\n                            pirepdiv.append('<div class=\"form-control-feedback valid-feedback\" id=\"id_valid_p1pirep\" ' +\n                            'tabindex=\"0\" style=\"\">' + response.warnings[0].message + '</div>');\n                            $('#id_p1pirep').addClass('is-valid');\n                        }\n\n                        // Update elements with PIREP returned data depending on\n                        // solo flight status and flight rule (Dual/Multicrew)\n                        var d = new Date(response.logentry.flightdate * 1000),\n                            month = '' + (d.getMonth() + 1),\n                            day = '' + d.getDate(),\n                            year = d.getFullYear(),\n                            time = response.logentry.deptime,\n                            hour = time.substring(0, 2),\n                            minute = time.substring(time.indexOf(':') + 1, time.length);\n                        // Fill remaining data\n                        $('#id_flightdate_day').val(day);\n                        $('#id_flightdate_month').val(month);\n                        $('#id_flightdate_year').val(year);\n                        $('#id_flightdate_hour').val(hour);\n                        $('#id_flightdate_minute').val(minute);\n                        $('input[name=\"linkedpirep\"]').val(response.logentry.linkedpirep);\n                        $('#id_flighttime').val(response.logentry.flighttime);\n                        $('#id_depicao').val(response.logentry.depicao);\n                        $('#id_arricao').val(response.logentry.arricao);\n                        $('#id_deptime').val(response.logentry.deptime);\n                        $('#id_arrtime').val(response.logentry.arrtime);\n                        $('#id_callsign').val(response.logentry.callsign);\n                        $('#id_aircraft').val(response.logentry.aircraft);\n                        $('#id_aircraftreg').val(response.logentry.aircraftreg);\n                        $('#id_enginetype').val(response.logentry.enginetype);\n                        $('#id_route').val(response.logentry.route);\n                        $('#id_fstd').val(response.logentry.fstd);\n                        this.doDynamicDisplay();\n                        this.applyFlightTimes();\n                    } else {\n                        // Display inline error for the PIREP then clear it and give it focus\n                        $('#id_p1pirep').addClass('is-invalid');\n                        if (!$('#id_error2_p1pirep').length) {\n                            pirepdiv.append('<div class=\"form-control-feedback invalid-feedback\" id=\"id_error2_p1pirep\" ' +\n                                'tabindex=\"0\" style=\"\">' + response.warnings[0].message + '</div>');\n                            $('#id_p1pirep').val('');\n                            $('#id_p1pirep').focus();\n                        } else {\n                            $('#id_error2_p1pirep').show();\n                        }\n                        // Make sure the find button is always after the P1 PIREP element\n                        if (this.hasFindPIREP()) {\n                            $('#id_p1pirep').parent().each(function() {\n                                $('#id_find_pirep').insertAfter($('#id_p1pirep'), this);\n                            });\n                        }\n                    }\n\n                    return;\n                }.bind(this))\n                .always(function() {\n                    // Regardless of success or error we should always stop\n                    // the loading icon and re-enable the buttons.\n                    loadingContainer.addClass('hidden');\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    return;\n                })\n                .fail(Notification.exception);\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Apply default values set flight operation\n     * Dual vs Multicrew taking solo flights in conisderation\n     *\n     * Populates a log book entry with a modal form data.\n     *\n     * @param {bool} force Force applying flight times\n     * @method applyFlightTimes\n     */\n    applyFlightTimes(force) {\n\n        let rule = $(Selectors.bookingwrapper).data('trainingtype');\n        if (typeof rule == 'undefined') {\n            rule = $(\"input[name='trainingtype']\").val();\n        }\n        var flighttype = $(\"input[name='flighttypehidden']\").val(),\n            flighttime = $('#id_flighttime').val(),\n            passfail = $(\"input[name='passfail']:checked\").val(),\n            ifr = $(\"input[name='flightrule']:checked\").val() == 'ifr',\n            editmode = this.getLogentryId() != 0,\n            newentry = !editmode;\n\n        // Check the training rule type\n        if (newentry || force) {\n            if (flighttype == 'training' || (flighttype == 'check' && passfail == 'fail')) {\n                $('#id_dualtime').val(rule == 'Dual' ? flighttime : '');\n                $('#id_ifrtime').val(ifr ? flighttime : '');\n                $('#id_multipilottime').val(rule == 'Multicrew' ? flighttime : '');\n                $('#id_copilottime').val(rule == 'Multicrew' ? flighttime : '');\n                $('#id_checkpilottime').val(flighttype == 'check' ? flighttime : '');\n                $('#id_picustime').val('');\n            } else if (flighttype == 'solo') {\n                $('#id_ifrtime').val(ifr ? flighttime : '');\n                $('#id_dualtime').val('');\n                $('#id_multipilottime').val('');\n                $('#id_copilottime').val('');\n                $('#id_picustime').val('');\n            } else if (flighttype == 'check' || passfail == 'pass') {\n                $('#id_ifrtime').val(ifr ? flighttime : '');\n                $('#id_picustime').val(flighttime);\n                $('#id_checkpilottime').val(flighttime);\n                $('#id_multipilottime').val(rule == 'Multicrew' ? flighttime : '');\n                $('#id_dualtime').val('');\n                $('#id_copilottime').val('');\n            }\n        }\n    }\n\n    /**\n     * Apply default values set flight operation\n     * Dual vs Multicrew taking solo flights in conisderation\n     *\n     * Populates a log book entry with a modal form data.\n     *\n     * @method doDynamicDisplay\n     */\n    doDynamicDisplay() {\n\n        let rule = $(Selectors.bookingwrapper).data('trainingtype');\n        if (typeof rule == 'undefined') {\n            rule = $(\"input[name='trainingtype']\").val();\n        }\n        var flighttype = $(\"input[name='flighttypehidden']\").val(),\n            passfail = $(\"input[name='passfail']:checked\").val(),\n            editmode = this.getLogentryId() != 0;\n\n        // Toggle the display of elements depending on flight type\n        var toggle = function(div, element, show, value, force = false) {\n            if (typeof div !== 'undefined' && typeof element !== 'undefined') {\n                // Check expanded status of Advanced elements\n                var ariaexpanded = this.getForm().find('[aria-expanded=\"true\"]').attr('aria-expanded');\n                if (ariaexpanded || force) {\n                    if (show) {\n                        $(div).slideDown('fast');\n                    } else {\n                        $(div).slideUp('fast');\n                    }\n                }\n\n                // Process the passed value\n                if (typeof value !== 'undefined') {\n                    $(element).val(value);\n                }\n            }\n        }.bind(this);\n\n        // Set dynamic element labels\n        var setLabel = function(element, editlabelkey, labelkey) {\n            if (editmode) {\n                Str.get_string(editlabelkey, 'local_booking').then(function(label) {\n                    $(element).text(label);\n                    return label;\n                }).fail(Notification.exception);\n            } else {\n                Str.get_string(labelkey, 'local_booking').then(function(label) {\n                    $(element).text(label);\n                    return label;\n                }).fail(Notification.exception);\n            }\n        };\n\n        // TODO: Instructor logentry edit:\n        // // Toggle PIC time in new and edit\n        // toggle('#fitem_id_pictime', '#id_pictime', $('#id_pictime').val());\n\n        // Check the training rule type\n        if (flighttype == 'training' || (flighttype == 'check' && passfail == 'fail')) {\n            let p1label;\n            // Set P1 id and label, and handle edit mode\n            if (flighttype == 'training' || editmode) {\n                p1label = rule == 'Dual' ? 'p1dual' : 'p1multicrew';\n            } else {\n                p1label = 'examiner';\n            }\n\n            setLabel(\"label[for='id_p1pirep']\", 'pirep', flighttype == 'training' ? 'instpirep' : 'examinerpirep');\n            setLabel(\"label[for='id_p1id']\", p1label, p1label);\n\n            // Toggle showing elements conditionally for training flight and failed check flights\n            toggle('#fitem_id_p2id', '#id_p2id', true);\n            toggle('#fitem_id_groundtime', '#id_groundtime', true, $('#id_groundtime').val(), true);\n            toggle('#fitem_id_dualtime', '#id_dualtime', true);\n\n            // Toggle hiding elements\n            toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false);\n            toggle('#fitem_id_picustime', '#id_picustime', false);\n\n            // TODO: Instructor logentry edit:\n            // // Toggle instructor time in new and edit\n            // toggle('#fitem_id_instructortime', '#id_instructortime', ((newentry && flighttype != 'check') || (editmode &&\n            //     $('#id_instructortime').val() != '')), editmode || flighttype == 'check' ?\n            //     $('#id_instructortime').val() ? $('#id_instructortime').val() : '' : flighttime);\n            // TODO: Instructor logentry edit:\n            // toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false, '');\n\n        } else if (flighttype == 'solo') {\n            // Set P1 PIREP label for student solo flights, and handle edit mode\n            setLabel(\"label[for='id_p1pirep']\", 'logbooksolopirep', 'logbooksolopirep');\n            setLabel(\"label[for='id_p1id']\", 'p2dual', 'p2dual');\n            if (!editmode) {\n                $('#id_p1id').val($('#id_p2id').val());\n            }\n\n            // Toggle showing elements for solo flight\n            $('#id_landingsp1day').val('1');\n            $('#id_landingsp2day').val('0');\n\n            // Toggle hiding elements for solo flights\n            toggle('#fitem_id_p2id', '#id_p2id', false, $('#id_p2id').val(), true);\n            toggle('#fitem_id_groundtime', '#id_groundtime', false, '', true);\n            toggle('#fitem_id_dualtime', '#id_dualtime', false);\n            toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false);\n            toggle('#fitem_id_picustime', '#id_picustime', false);\n            toggle('#fgroup_id_landingsp2', '#id_landingsp2', false);\n\n            // TODO: Instructor logentry edit:\n            // toggle('#fitem_id_instructortime', '#id_instructortime', false);\n            // TODO: Instructor logentry edit:\n            // toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false);\n\n        } else if (flighttype == 'check' || passfail == 'pass') {\n            // Get id and label for P1 and PIREP\n            setLabel(\"label[for='id_p1pirep']\", 'pirep', 'examinerpirep');\n            setLabel(\"label[for='id_p1id']\", 'examiner', 'examiner');\n\n            // Toggle showing elements for passsed check flight\n            toggle('#fitem_id_p2id', '#id_p2id', true);\n            toggle('#fitem_id_groundtime', '#id_groundtime', false, '', true);\n            toggle('#fitem_id_dualtime', '#id_dualtime', false);\n\n            // TODO: Instructor logentry edit:\n            // toggle('#fitem_id_instructortime', '#id_instructortime', false);\n            toggle('#fitem_id_checkpilottime', '#id_checkpilottime', true);\n            toggle('#fitem_id_picustime', '#id_picustime', true);\n        }\n    }\n\n    /**\n     * Reload both the title and body content.\n     *\n     * @method reloadAllContent\n     * @return {object} promise\n     */\n    reloadAllContent() {\n        return $.when(this.reloadTitleContent(), this.reloadBodyContent());\n    }\n\n    /**\n     * Kick off a reload the modal content before showing it. This\n     * is to allow us to re-use the same modal for creating and\n     * editing different log book entries within the booking view page.\n     *\n     * We do the reload when showing the modal rather than hiding it\n     * to save a request to the server if the user closes the modal\n     * and never re-opens it.\n     *\n     * @method show\n     */\n    show() {\n        this.reloadAllContent();\n        Modal.prototype.show.call(this);\n    }\n\n    /**\n     * Clear the logentry id from the modal when it's closed so\n     * that it is loaded fresh next time it's displayed.\n     *\n     * The logentry id will be set by the calling code if it wants\n     * to edit a specific log entry.\n     *\n     * @method hide\n     */\n    hide() {\n        Modal.prototype.hide.call(this);\n        this.setLogentryId(null);\n        this.setFlightDate(null);\n        this.setContextId(null);\n        this.setCourseId(null);\n        this.setExerciseId(null);\n        this.setSessionId(null);\n    }\n\n    /**\n     * Get the serialised form data.\n     *\n     * @method getFormData\n     * @return {string} serialised form data\n     */\n    getFormData() {\n        return this.getForm().serialize();\n    }\n\n    /**\n     * Send the form data to the server to create or update\n     * a log book entry.\n     *\n     * If there is a server side validation error then we re-request the\n     * rendered form (with the data) from the server in order to get the\n     * server side errors to display.\n     *\n     * On success the modal is hidden and the page is reloaded so that the\n     * new log book entry will display in the booking view user tooltip.\n     *\n     * @method save\n     * @return {object} A promise\n     */\n    save() {\n        var invalid,\n            loadingContainer = this.saveButton.find(SELECTORS.LOADING_ICON_CONTAINER);\n\n        // Set ground time to 0 for none training flights as it is a required a value\n        if (!($(\"input[name='flighttypehidden']\").val() == 'training')) {\n            $('#id_groundtime').val(\"00:00\");\n        }\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        invalid = this.getForm().find('[aria-invalid=\"true\"]');\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return;\n        }\n\n        loadingContainer.removeClass('hidden');\n        this.disableButtons();\n\n        var formData = this.getFormData();\n        var formArgs = 'contextid=' + this.contextId + '&courseid=' + this.courseId\n            + '&exerciseid=' + this.exerciseId + '&sessionid=' + this.sessionId + '&userid=' + this.userId;\n\n        // Send the form data to the server for processing.\n        // eslint-disable-next-line consistent-return\n        return Repository.submitCreateUpdateLogentryForm(formArgs, formData)\n            .then(function(response) {\n                if (response.validationerror) {\n                    // If there was a server side validation error then\n                    // we need to re-request the rendered form from the server\n                    // in order to display the error for the user.\n                    this.reloadBodyContent(formData);\n                    return;\n                } else {\n                    // Check whether this was a new logbook entry or not.\n                    // check if the logentry is from the prgression view\n                    // logentry from the confirmation view\n                    // The hide function unsets the form data so grab this before the hide.\n                    var isExisting = this.hasLogentryId();\n\n                    // No problemo! Our work here is done.\n                    this.hide();\n\n                    // Trigger the appropriate logbook event so that the view can be updated.\n                    if (isExisting) {\n                        $('body').trigger(LogbookEvents.logentryupdated, [response.logentry]);\n                    } else {\n                        $('body').trigger(LogbookEvents.logentrycreated, [response.logentry]);\n                    }\n                }\n\n                return;\n            }.bind(this))\n            .always(function() {\n                // Regardless of success or error we should always stop\n                // the loading icon and re-enable the buttons.\n                loadingContainer.addClass('hidden');\n                Notification.fetchNotifications();\n                this.enableButtons();\n\n                return;\n            }.bind(this))\n            .fail(Notification.exception);\n    }\n\n    /**\n     * Set up all of the event handling for the modal.\n     *\n     * @method registerEventListeners\n     */\n    registerEventListeners() {\n        // Apply parent event listeners.\n        Modal.prototype.registerEventListeners.call(this);\n\n        // When the user clicks the save button we trigger the form submission. We need to\n        // trigger an actual submission because there is some JS code in the form that is\n        // listening for this event and doing some stuff (e.g. saving draft areas etc).\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.SAVE_BUTTON, function(e, data) {\n            this.getForm().submit();\n            data.originalEvent.preventDefault();\n            e.stopPropagation();\n        }.bind(this));\n\n        // Catch the submit event before it is actually processed by the browser and\n        // prevent the submission. We'll take it from here.\n        this.getModal().on('submit', function(e) {\n            FormEvents.notifyFormSubmittedByJavascript(this.getForm()[0]);\n\n            this.save();\n\n            // Stop the form from actually submitting and prevent it's\n            // propagation because we have already handled the event.\n            e.preventDefault();\n            e.stopPropagation();\n        }.bind(this));\n\n        // Register a lister to Update elements for Advanced section when expanded, after its loaded\n        this.getModal().on('click', 'a[aria-expanded]', function() {\n            setTimeout(function() {\n                this.doDynamicDisplay();\n            }.bind(this), 100);\n        }.bind(this));\n    }\n}\n\nModalLogEntryForm.registerModalType();\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_jquery","FormEvents","Str","Notification","CustomEvents","_modal","Fragment","Repository","LogbookEvents","Selectors","SELECTORS","ModalLogEntryForm","Modal","static","constructor","root","super","this","contextId","courseId","userId","logentryId","flightDate","exerciseId","sessionId","pirepLookupId","hasfindpirep","reloadingBody","reloadingTitle","saveButton","getFooter","find","configure","modalConfig","large","setContextId","id","getContextId","setCourseId","getCourseId","hasCourseId","setExerciseId","getExerciseId","hasExerciseId","setSessionId","getSessionId","hasSessionId","setUserId","getUserId","hasUserId","setLogentryId","getLogentryId","hasLogentryId","setFlightDate","time","getFlightDate","hasFlightDate","setFlightType","flighttype","flightType","getFlightType","hasFindPIREP","getForm","getBody","disableButtons","prop","enableButtons","reloadTitleContent","titlePromise","getExerciseName","then","response","exercisename","fail","exception","string","setTitle","bind","always","reloadBodyContent","formData","bodyPromise","args","userid","logentryid","flightdate","courseid","exerciseid","sessionid","formdata","loadFragment","setBody","$","length","p1pirep","parent","prepend","append","doDynamicDisplay","setInputMask","registerChangeListeners","bookingwrapper","data","Inputmask","regex","mask","document","getElementById","val","on","isNaN","getPIREPData","$exerciseid","applyFlightTimes","onchange","loadingContainer","pirepdiv","pirep","removeClass","findPirep","result","warnings","message","addClass","d","Date","logentry","month","getMonth","day","getDate","year","getFullYear","deptime","hour","substring","minute","indexOf","linkedpirep","flighttime","depicao","arricao","arrtime","callsign","aircraft","aircraftreg","enginetype","route","fstd","show","focus","each","insertAfter","preventDefault","stopPropagation","force","rule","passfail","ifr","editmode","toggle","div","element","value","arguments","undefined","attr","slideDown","slideUp","setLabel","editlabelkey","labelkey","get_string","label","text","p1label","reloadAllContent","when","prototype","hide","getFormData","serialize","save","invalid","formArgs","submitCreateUpdateLogentryForm","validationerror","isExisting","trigger","logentryupdated","logentrycreated","fetchNotifications","first","registerEventListeners","getModal","events","activate","submit","originalEvent","notifyFormSubmittedByJavascript","setTimeout","_exports","registerModalType"],"mappings":"oXAmCqD,SAAAA,yBAAAC,GAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,eAAAF,yBAAA,SAAAC,GAAAA,OAAAA,EAAAG,EAAAD,IAAAF,EAAA,CAAA,SAAAI,wBAAAJ,EAAAE,GAAAA,IAAAA,GAAAF,GAAAA,EAAAK,WAAAL,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAM,MAAAA,CAAAA,QAAAN,GAAAG,IAAAA,EAAAJ,yBAAAG,GAAA,GAAAC,GAAAA,EAAAI,IAAAP,GAAA,OAAAG,EAAAK,IAAAR,GAAA,IAAAS,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,IAAA,IAAAC,KAAAf,EAAAe,GAAAA,YAAAA,GAAAC,CAAAA,EAAAA,eAAAC,KAAAjB,EAAAe,GAAAG,CAAAA,IAAAA,EAAAP,EAAAC,OAAAE,yBAAAd,EAAAe,GAAAG,KAAAA,IAAAA,EAAAV,KAAAU,EAAAC,KAAAP,OAAAC,eAAAJ,EAAAM,EAAAG,GAAAT,EAAAM,GAAAf,EAAAe,GAAAN,OAAAA,EAAAH,QAAAN,EAAAG,GAAAA,EAAAgB,IAAAnB,EAAAS,GAAAA,CAAA,CAAA,SAAAW,uBAAApB,GAAAA,OAAAA,GAAAA,EAAAK,WAAAL,EAAAM,CAAAA,QAAAN,EAAA;;;;;;;;qFATrDqB,QAAAD,uBAAAC,SACAC,WAAAlB,wBAAAkB,YACAC,IAAAnB,wBAAAmB,KACAC,aAAApB,wBAAAoB,cACAC,aAAArB,wBAAAqB,cACAC,OAAAN,uBAAAM,QACAC,SAAAvB,wBAAAuB,UACAC,WAAAxB,wBAAAwB,YACAC,cAAAzB,wBAAAyB,eACAC,UAAA1B,wBAAA0B,WAEA,IAAIC,sBAEa,uBAFbA,iCAGwB,yCAQb,MAAMC,0BAA0BC,OAAAA,QAC3CC,YAAc,oCACdA,gBAAkB,oCAOlBC,WAAAA,CAAYC,MACRC,MAAMD,MAENE,KAAKC,UAAY,KACjBD,KAAKE,SAAW,KAChBF,KAAKG,OAAS,KACdH,KAAKI,WAAa,KAClBJ,KAAKK,WAAa,KAClBL,KAAKM,WAAa,KAClBN,KAAKO,UAAY,KACjBP,KAAKQ,cAAgB,KACrBR,KAAKS,cAAe,EACpBT,KAAKU,eAAgB,EACrBV,KAAKW,gBAAiB,EACtBX,KAAKY,WAAaZ,KAAKa,YAAYC,KAAKrB,sBAC5C,CAEAsB,SAAAA,CAAUC,aACNA,YAAYC,OAAQ,EACpBlB,MAAMgB,UAAUC,YACpB,CAQAE,YAAAA,CAAaC,IACTnB,KAAKC,UAAYkB,EACrB,CAQAC,YAAAA,GACI,OAAOpB,KAAKC,SAChB,CAQAoB,WAAAA,CAAYF,IACRnB,KAAKE,SAAWiB,EACpB,CAQAG,WAAAA,GACI,OAAOtB,KAAKE,QAChB,CAQAqB,WAAAA,GACI,OAAyB,OAAlBvB,KAAKE,QAChB,CAQIsB,aAAAA,CAAcL,IACdnB,KAAKM,WAAaa,EACtB,CAQAM,aAAAA,GACI,OAAOzB,KAAKM,UAChB,CAQAoB,aAAAA,GACI,OAA2B,OAApB1B,KAAKM,UAChB,CAQAqB,YAAAA,CAAaR,IACTnB,KAAKO,UAAYY,EACrB,CAQAS,YAAAA,GACI,OAAO5B,KAAKO,SAChB,CAQAsB,YAAAA,GACI,OAA0B,OAAnB7B,KAAKO,SAChB,CAQAuB,SAAAA,CAAUX,IACNnB,KAAKG,OAASgB,EAClB,CAQAY,SAAAA,GACI,OAAO/B,KAAKG,MAChB,CAQA6B,SAAAA,GACI,OAAuB,OAAhBhC,KAAKG,MAChB,CAQA8B,aAAAA,CAAcd,IACVnB,KAAKI,WAAae,EACtB,CAQAe,aAAAA,GACI,OAAOlC,KAAKI,UAChB,CAQA+B,aAAAA,GACI,OAA2B,OAApBnC,KAAKI,YAA0C,GAAnBJ,KAAKI,UAC5C,CAQAgC,aAAAA,CAAcC,MACVrC,KAAKK,WAAagC,IACtB,CAQAC,aAAAA,GACI,OAAOtC,KAAKK,UAChB,CAQAkC,aAAAA,GACI,OAA2B,OAApBvC,KAAKK,UAChB,CAQAmC,aAAAA,CAAcC,YACVzC,KAAK0C,WAAaD,UACtB,CAQAE,aAAAA,GACI,OAAO3C,KAAK0C,UAChB,CASAE,YAAAA,CAAanC,cAIT,YAH4B,IAAjBA,eACPT,KAAKS,aAAeA,cAEjBT,KAAKS,YAChB,CAQAoC,OAAAA,GACI,OAAO7C,KAAK8C,UAAUhC,KAAK,OAC/B,CAOAiC,cAAAA,GACI/C,KAAKY,WAAWoC,KAAK,YAAY,EACrC,CAOAC,aAAAA,GACIjD,KAAKY,WAAWoC,KAAK,YAAY,EACrC,CAUAE,kBAAAA,GACI,OAAIlD,KAAKW,iBAITX,KAAKW,gBAAiB,EAGtBX,KAAKmD,aAAe7D,WAAW8D,gBAAgBpD,KAAKE,SAAUF,KAAKM,YAC9D+C,MAAK,SAASC,UAEX,MAAgC,IAAzBA,SAASC,aAAqB,eAAiBD,SAASC,YAClE,IACJC,KAAKtE,aAAauE,WAEnBzD,KAAKmD,aAAaE,KAAK,SAASK,QAE5B,OADA1D,KAAK2D,SAASD,QACPA,MACV,EAACE,KAAK5D,OACN6D,OAAO,WACJ7D,KAAKW,gBAAiB,CAE1B,EAAEiD,KAAK5D,OACNwD,KAAKtE,aAAauE,YArBRzD,KAAKmD,YAwBpB,CAeAW,iBAAAA,CAAkBC,UACd,GAAI/D,KAAKU,cACL,OAAOV,KAAKgE,YAGhBhE,KAAKU,eAAgB,EACrBV,KAAK+C,iBAEL,IAAIkB,KAAO,CAAA,EAmEX,OAjEIjE,KAAKgC,cACLiC,KAAKC,OAASlE,KAAK+B,aAGnB/B,KAAKmC,kBACL8B,KAAKE,WAAanE,KAAKkC,iBAGvBlC,KAAKuC,kBACL0B,KAAKG,WAAapE,KAAKsC,iBAGvBtC,KAAKuB,gBACL0C,KAAKI,SAAWrE,KAAKsB,eAGrBtB,KAAK0B,kBACLuC,KAAKK,WAAatE,KAAKyB,iBAGvBzB,KAAK6B,iBACLoC,KAAKM,UAAYvE,KAAK4B,qBAGF,IAAbmC,WACPE,KAAKO,SAAWT,UAIpB/D,KAAKgE,YAAc3E,SAASoF,aAAa,gBAAiB,gBAAiBzE,KAAKoB,eAAgB6C,MAGhGjE,KAAK0E,QAAQ1E,KAAKgE,aAElBhE,KAAKgE,YAAYX,KAAK,WAElB,GAAIrD,KAAK4C,kBACA,EAAA+B,QAAC3G,SAAC,sBAAsB4G,OAAQ,CACjC,IAAIC,SAAU,EAAAF,QAAC3G,SAAC,eACD6G,QAAQC,SAGdC,QAAQ,iDACjB,EAAAJ,QAAAA,SAAE,kBAAkBK,OAAOH,UAC3B,EAAAF,QAAAA,SAAE,kBAAkBK,OAAO,wDAC3B,EAAAL,QAAAA,SAAE,kBAAkBK,OAAO,iIAE/B,CAIJhF,KAAKiF,mBACLjF,KAAKiD,gBACLjD,KAAKkF,eACLlF,KAAKmF,yBAGT,EAAEvB,KAAK5D,OACNwD,KAAKtE,aAAauE,WAClBI,OAAO,WACJ7D,KAAKU,eAAgB,CAEzB,EAAEkD,KAAK5D,OACNwD,KAAKtE,aAAauE,WAEZzD,KAAKgE,WAChB,CAOAkB,YAAAA,GAI4D,SAApD,EAAAP,QAAAA,SAAEnF,UAAU4F,gBAAgBC,KAAK,gBACjCC,UAAU,CAACC,MAAS,gCAAgCC,KAAKC,SAASC,eAAe,gBACtB,cAApD,EAAAf,QAAC3G,SAACwB,UAAU4F,gBAAgBC,KAAK,iBACxCC,UAAU,CAACC,MAAS,gCAAgCC,KAAKC,SAASC,eAAe,sBAMpC,UAA7C,EAAAf,QAAC3G,SAAC,kCAAkC2H,MACpCL,UAAU,CAACC,MAAS,gCAAgCC,KAAKC,SAASC,eAAe,iBAI7B,SAA7C,EAAAf,QAAAA,SAAE,kCAAkCgB,MAC3CL,UAAU,CAACC,MAAS,gCAAgCC,KAAKC,SAASC,eAAe,kBAEjFJ,UAAU,CAACC,MAAS,gCAAgCC,KAAKC,SAASC,eAAe,kBAQrFJ,UAAU,CAACC,MAAS,gCAAgCC,KAAKC,SAASC,eAAe,kBACjFJ,UAAU,CAACC,MAAS,oCAAoCC,KAAKC,SAASC,eAAe,eACrFJ,UAAU,CAACC,MAAS,oCAAoCC,KAAKC,SAASC,eAAe,eACrFJ,UAAU,CAACC,MAAS,gCAAgCC,KAAKC,SAASC,eAAe,iBACjFJ,UAAU,CAACC,MAAS,gCAAgCC,KAAKC,SAASC,eAAe,eACjFJ,UAAU,CAACC,MAAS,UAAUC,KAAKC,SAASC,eAAe,qBAC3DJ,UAAU,CAACC,MAAS,UAAUC,KAAKC,SAASC,eAAe,uBAG/B,GAAxB1F,KAAKkC,kBACLoD,UAAU,CAACC,MAAS,UAAUC,KAAKC,SAASC,eAAe,qBAC3DJ,UAAU,CAACC,MAAS,UAAUC,KAAKC,SAASC,eAAe,uBAEnE,CAOAP,uBAAAA,GAGQnF,KAAK4C,iBACa,EAAA+B,QAAC3G,SAAC,kBACR4H,GAAG,QAAS,SAASlI,GAC7B,OAAKmI,OAAM,EAAAlB,QAAC3G,SAAC,eAAe2H,QACjB3F,KAAK8F,aAAapI,EAGjC,EAAEkG,KAAK5D,QAIK,EAAA2E,QAAC3G,SAAC,iBACR4H,GAAG,SAAU,WAEnB,IAAIG,aAAc,EAAApB,QAAC3G,SAAC,iBAAiB2H,OACrC,EAAAhB,QAAAA,SAAE,4BAA4BgB,IAAII,aAC9BA,cAAe,EAAApB,QAAC3G,SAAC,sCAAsC2H,OACvD,EAAAhB,QAAAA,SAAE,kCAAkCgB,IAAI,UAExC,EAAAhB,iBAAE,kCAAkCgB,KAAI,EAAAhB,QAAC3G,SAAC,oCAAoC2H,OAElF3F,KAAKiF,kBACT,EAAErB,KAAK5D,QAGU,EAAA2E,QAAC3G,SAAC,4BACR4H,GAAG,SAAU,YAEpB,EAAAjB,iBAAE,kCAAkCgB,KAAI,EAAAhB,QAAC3G,SAAC,oCAAoC2H,OAC9E3F,KAAKiF,mBACLjF,KAAKgG,kBACT,EAAEpC,KAAK5D,QAGQ,EAAA2E,QAAC3G,SAAC,0BACR4H,GAAG,SAAU,YAClB,EAAAjB,QAAAA,SAAE,kCAAkCgB,IAAI,SACxC3F,KAAKiF,mBACLjF,KAAKgG,kBACT,EAAEpC,KAAK5D,QAGU,EAAA2E,QAAC3G,SAAC,4BACR4H,GAAG,SAAU,WACpB5F,KAAKiF,mBACLjF,KAAKgG,kBACT,EAAEpC,KAAK5D,OAGUyF,SAASC,eAAe,iBAC9BO,SAAW,WAClB,OAAOjG,KAAKgG,kBAAiB,EACjC,EAAEpC,KAAK5D,KACX,CAUA8F,YAAAA,CAAapI,GACT,IAAIwI,iBAAmBlG,KAAKa,YAAYC,KAAKrB,kCACzC0G,UAAW,EAAAxB,QAAC3G,SAAC,eAAe8G,SAChCsB,OAAQ,EAAAzB,QAAC3G,SAAC,eAAe2H,MACzBtB,SAAWrE,KAAKsB,cAChBgD,WAAatE,KAAKyB,gBAElB,MAAa,IAAT2E,OACAF,iBAAiBG,YAAY,UACtB/G,WAAWgH,UAAUF,MAAO/B,UAAU,EAAAM,QAAAA,SAAE,YAAYgB,MAAOrB,YAC7DjB,KAAK,SAASC,UAKX,IAHA,EAAAqB,QAAAA,SAAE,eAAe0B,YAAY,cAGzB/C,SAASiD,OAAQ,EAEZ,EAAA5B,QAAC3G,SAAC,qBAAqB4G,SACxBuB,SAASnB,OAAO,iGACW1B,SAASkD,SAAS,GAAGC,QAAU,WAC1D,EAAA9B,QAAAA,SAAE,eAAe+B,SAAS,aAK9B,IAAIC,EAAI,IAAIC,KAAoC,IAA/BtD,SAASuD,SAASzC,YAC/B0C,MAAQ,IAAMH,EAAEI,WAAa,GAC7BC,IAAM,GAAKL,EAAEM,UACbC,KAAOP,EAAEQ,cACT9E,KAAOiB,SAASuD,SAASO,QACzBC,KAAOhF,KAAKiF,UAAU,EAAG,GACzBC,OAASlF,KAAKiF,UAAUjF,KAAKmF,QAAQ,KAAO,EAAGnF,KAAKuC,SAExD,EAAAD,QAAAA,SAAE,sBAAsBgB,IAAIqB,MAC5B,EAAArC,QAAAA,SAAE,wBAAwBgB,IAAImB,QAC9B,EAAAnC,QAAAA,SAAE,uBAAuBgB,IAAIuB,OAC7B,EAAAvC,QAAAA,SAAE,uBAAuBgB,IAAI0B,OAC7B,EAAA1C,QAAAA,SAAE,yBAAyBgB,IAAI4B,SAC/B,EAAA5C,QAAC3G,SAAC,6BAA6B2H,IAAIrC,SAASuD,SAASY,cACrD,EAAA9C,QAAC3G,SAAC,kBAAkB2H,IAAIrC,SAASuD,SAASa,aAC1C,EAAA/C,QAAC3G,SAAC,eAAe2H,IAAIrC,SAASuD,SAASc,UACvC,EAAAhD,QAAC3G,SAAC,eAAe2H,IAAIrC,SAASuD,SAASe,UACvC,EAAAjD,QAAC3G,SAAC,eAAe2H,IAAIrC,SAASuD,SAASO,UACvC,EAAAzC,QAAC3G,SAAC,eAAe2H,IAAIrC,SAASuD,SAASgB,UACvC,EAAAlD,QAAC3G,SAAC,gBAAgB2H,IAAIrC,SAASuD,SAASiB,WACxC,EAAAnD,QAAC3G,SAAC,gBAAgB2H,IAAIrC,SAASuD,SAASkB,WACxC,EAAApD,QAAC3G,SAAC,mBAAmB2H,IAAIrC,SAASuD,SAASmB,cAC3C,EAAArD,QAAC3G,SAAC,kBAAkB2H,IAAIrC,SAASuD,SAASoB,aAC1C,EAAAtD,QAAC3G,SAAC,aAAa2H,IAAIrC,SAASuD,SAASqB,QACrC,EAAAvD,QAAC3G,SAAC,YAAY2H,IAAIrC,SAASuD,SAASsB,MACpCnI,KAAKiF,mBACLjF,KAAKgG,kBACT,MAEI,EAAArB,QAAAA,SAAE,eAAe+B,SAAS,eACrB,EAAA/B,QAAC3G,SAAC,sBAAsB4G,QAMzB,EAAAD,iBAAE,sBAAsByD,QALxBjC,SAASnB,OAAO,oGACe1B,SAASkD,SAAS,GAAGC,QAAU,WAC9D,EAAA9B,QAAAA,SAAE,eAAegB,IAAI,KACrB,EAAAhB,iBAAE,eAAe0D,SAKjBrI,KAAK4C,iBACL,EAAA+B,QAAAA,SAAE,eAAeG,SAASwD,MAAK,YAC3B,EAAA3D,QAAC3G,SAAC,kBAAkBuK,aAAY,EAAA5D,QAAAA,SAAE,eAAgB3E,KACtD,GAKX,EAAC4D,KAAK5D,OACN6D,QAAO,WAGJqC,iBAAiBQ,SAAS,UAC1BhJ,EAAE8K,iBACF9K,EAAE+K,iBAGL,IACAjF,KAAKtE,aAAauE,YAEhB,EAEf,CAWAuC,gBAAAA,CAAiB0C,OAEb,IAAIC,MAAO,EAAAhE,QAAAA,SAAEnF,UAAU4F,gBAAgBC,KAAK,qBACzB,IAARsD,OACPA,MAAO,EAAAhE,QAAC3G,SAAC,8BAA8B2H,OAE3C,IAAIlD,YAAa,EAAAkC,QAAC3G,SAAC,kCAAkC2H,MACjD+B,YAAa,EAAA/C,QAAC3G,SAAC,kBAAkB2H,MACjCiD,UAAW,EAAAjE,QAAC3G,SAAC,kCAAkC2H,MAC/CkD,IAAqD,QAA/C,EAAAlE,QAAAA,SAAE,oCAAoCgB,SACT,GAAxB3F,KAAKkC,kBAIJwG,SACM,YAAdjG,YAA2C,SAAdA,YAAqC,QAAZmG,WACtD,EAAAjE,QAAC3G,SAAC,gBAAgB2H,IAAY,QAARgD,KAAiBjB,WAAa,KACpD,EAAA/C,QAAC3G,SAAC,eAAe2H,IAAIkD,IAAMnB,WAAa,KACxC,EAAA/C,QAAC3G,SAAC,sBAAsB2H,IAAY,aAARgD,KAAsBjB,WAAa,KAC/D,EAAA/C,QAAC3G,SAAC,mBAAmB2H,IAAY,aAARgD,KAAsBjB,WAAa,KAC5D,EAAA/C,QAAC3G,SAAC,sBAAsB2H,IAAkB,SAAdlD,WAAwBiF,WAAa,KACjE,EAAA/C,QAAAA,SAAE,iBAAiBgB,IAAI,KACF,QAAdlD,aACP,EAAAkC,QAAC3G,SAAC,eAAe2H,IAAIkD,IAAMnB,WAAa,KACxC,EAAA/C,QAAAA,SAAE,gBAAgBgB,IAAI,KACtB,EAAAhB,QAAAA,SAAE,sBAAsBgB,IAAI,KAC5B,EAAAhB,QAAAA,SAAE,mBAAmBgB,IAAI,KACzB,EAAAhB,QAAAA,SAAE,iBAAiBgB,IAAI,KACF,SAAdlD,YAAqC,QAAZmG,YAChC,EAAAjE,QAAC3G,SAAC,eAAe2H,IAAIkD,IAAMnB,WAAa,KACxC,EAAA/C,QAAAA,SAAE,iBAAiBgB,IAAI+B,aACvB,EAAA/C,QAAAA,SAAE,sBAAsBgB,IAAI+B,aAC5B,EAAA/C,QAAC3G,SAAC,sBAAsB2H,IAAY,aAARgD,KAAsBjB,WAAa,KAC/D,EAAA/C,QAAAA,SAAE,gBAAgBgB,IAAI,KACtB,EAAAhB,QAAAA,SAAE,mBAAmBgB,IAAI,KAGrC,CAUAV,gBAAAA,GAEI,IAAI0D,MAAO,EAAAhE,QAAAA,SAAEnF,UAAU4F,gBAAgBC,KAAK,qBACzB,IAARsD,OACPA,MAAO,EAAAhE,QAAC3G,SAAC,8BAA8B2H,OAE3C,IAAIlD,YAAa,EAAAkC,QAAC3G,SAAC,kCAAkC2H,MACjDiD,UAAW,EAAAjE,QAAC3G,SAAC,kCAAkC2H,MAC/CmD,SAAmC,GAAxB9I,KAAKkC,gBAGhB6G,OAAS,SAASC,IAAKC,QAASb,KAAMc,OAAsB,IAAfR,MAAKS,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,IAAAA,UAAA,QAC/B,IAARH,UAA0C,IAAZC,WAElBjJ,KAAK6C,UAAU/B,KAAK,0BAA0BuI,KAAK,kBAClDX,SACZN,MACA,EAAAzD,QAAAA,SAAEqE,KAAKM,UAAU,SAEjB,EAAA3E,QAAAA,SAAEqE,KAAKO,QAAQ,cAKF,IAAVL,QACP,EAAAvE,QAAAA,SAAEsE,SAAStD,IAAIuD,OAG3B,EAAEtF,KAAK5D,MAGHwJ,SAAW,SAASP,QAASQ,aAAcC,UACvCZ,SACA7J,IAAI0K,WAAWF,aAAc,iBAAiBpG,MAAK,SAASuG,OAExD,OADA,EAAAjF,QAAAA,SAAEsE,SAASY,KAAKD,OACTA,KACV,IAAEpG,KAAKtE,aAAauE,WAErBxE,IAAI0K,WAAWD,SAAU,iBAAiBrG,MAAK,SAASuG,OAEpD,OADA,EAAAjF,QAAAA,SAAEsE,SAASY,KAAKD,OACTA,KACV,IAAEpG,KAAKtE,aAAauE,YAS7B,GAAkB,YAAdhB,YAA2C,SAAdA,YAAqC,QAAZmG,SAAqB,CAC3E,IAAIkB,QAGAA,QADc,YAAdrH,YAA4BqG,SACV,QAARH,KAAiB,SAAW,cAE5B,WAGda,SAAS,0BAA2B,QAAuB,YAAd/G,WAA2B,YAAc,iBACtF+G,SAAS,uBAAwBM,QAASA,SAG1Cf,OAAO,iBAAkB,YAAY,GACrCA,OAAO,uBAAwB,kBAAkB,GAAM,EAAApE,QAAAA,SAAE,kBAAkBgB,OAAO,GAClFoD,OAAO,qBAAsB,gBAAgB,GAG7CA,OAAO,2BAA4B,sBAAsB,GACzDA,OAAO,sBAAuB,iBAAiB,EAUnD,KAAyB,QAAdtG,YAEP+G,SAAS,0BAA2B,mBAAoB,oBACxDA,SAAS,uBAAwB,SAAU,UACtCV,WACD,EAAAnE,iBAAE,YAAYgB,KAAI,EAAAhB,QAAC3G,SAAC,YAAY2H,QAIpC,EAAAhB,QAAAA,SAAE,qBAAqBgB,IAAI,MAC3B,EAAAhB,QAAAA,SAAE,qBAAqBgB,IAAI,KAG3BoD,OAAO,iBAAkB,YAAY,GAAO,EAAApE,QAAAA,SAAE,YAAYgB,OAAO,GACjEoD,OAAO,uBAAwB,kBAAkB,EAAO,IAAI,GAC5DA,OAAO,qBAAsB,gBAAgB,GAC7CA,OAAO,2BAA4B,sBAAsB,GACzDA,OAAO,sBAAuB,iBAAiB,GAC/CA,OAAO,wBAAyB,kBAAkB,IAO7B,SAAdtG,YAAqC,QAAZmG,WAEhCY,SAAS,0BAA2B,QAAS,iBAC7CA,SAAS,uBAAwB,WAAY,YAG7CT,OAAO,iBAAkB,YAAY,GACrCA,OAAO,uBAAwB,kBAAkB,EAAO,IAAI,GAC5DA,OAAO,qBAAsB,gBAAgB,GAI7CA,OAAO,2BAA4B,sBAAsB,GACzDA,OAAO,sBAAuB,iBAAiB,GAEvD,CAQAgB,gBAAAA,GACI,OAAOpF,QAAC3G,QAACgM,KAAKhK,KAAKkD,qBAAsBlD,KAAK8D,oBAClD,CAaAsE,IAAAA,GACIpI,KAAK+J,mBACLpK,OAAK3B,QAACiM,UAAU7B,KAAKzJ,KAAKqB,KAC9B,CAWAkK,IAAAA,GACIvK,OAAK3B,QAACiM,UAAUC,KAAKvL,KAAKqB,MAC1BA,KAAKiC,cAAc,MACnBjC,KAAKoC,cAAc,MACnBpC,KAAKkB,aAAa,MAClBlB,KAAKqB,YAAY,MACjBrB,KAAKwB,cAAc,MACnBxB,KAAK2B,aAAa,KACtB,CAQAwI,WAAAA,GACI,OAAOnK,KAAK6C,UAAUuH,WAC1B,CAgBAC,IAAAA,GACI,IAAIC,QACApE,iBAAmBlG,KAAKY,WAAWE,KAAKrB,kCAW5C,GARmD,aAA7C,EAAAkF,QAAC3G,SAAC,kCAAkC2H,QACtC,EAAAhB,QAAAA,SAAE,kBAAkBgB,IAAI,WAI5B2E,QAAUtK,KAAK6C,UAAU/B,KAAK,0BAGlB8D,OAAZ,CAKAsB,iBAAiBG,YAAY,UAC7BrG,KAAK+C,iBAEL,IAAIgB,SAAW/D,KAAKmK,cAChBI,SAAW,aAAevK,KAAKC,UAAY,aAAeD,KAAKE,SAC7D,eAAiBF,KAAKM,WAAa,cAAgBN,KAAKO,UAAY,WAAaP,KAAKG,OAI5F,OAAOb,WAAWkL,+BAA+BD,SAAUxG,UACtDV,KAAK,SAASC,UACX,GAAIA,SAASmH,gBAITzK,KAAK8D,kBAAkBC,cAJ3B,CAWI,IAAI2G,WAAa1K,KAAKmC,gBAGtBnC,KAAKkK,OAGDQ,YACA,EAAA/F,iBAAE,QAAQgG,QAAQpL,cAAcqL,gBAAiB,CAACtH,SAASuD,YAE3D,EAAAlC,iBAAE,QAAQgG,QAAQpL,cAAcsL,gBAAiB,CAACvH,SAASuD,UAEnE,CAGH,EAACjD,KAAK5D,OACN6D,OAAO,WAGJqC,iBAAiBQ,SAAS,UAC1BxH,aAAa4L,qBACb9K,KAAKiD,eAGT,EAAEW,KAAK5D,OACNwD,KAAKtE,aAAauE,UAhDvB,CAFI6G,QAAQS,QAAQ1C,OAmDxB,CAOA2C,sBAAAA,GAEIrL,OAAK3B,QAACiM,UAAUe,uBAAuBrM,KAAKqB,MAK5CA,KAAKiL,WAAWrF,GAAGzG,aAAa+L,OAAOC,SAAU1L,sBAAuB,SAAS/B,EAAG2H,MAChFrF,KAAK6C,UAAUuI,SACf/F,KAAKgG,cAAc7C,iBACnB9K,EAAE+K,iBACN,EAAE7E,KAAK5D,OAIPA,KAAKiL,WAAWrF,GAAG,SAAU,SAASlI,GAClCsB,WAAWsM,gCAAgCtL,KAAK6C,UAAU,IAE1D7C,KAAKqK,OAIL3M,EAAE8K,iBACF9K,EAAE+K,iBACN,EAAE7E,KAAK5D,OAGPA,KAAKiL,WAAWrF,GAAG,QAAS,mBAAoB,WAC5C2F,WAAW,WACPvL,KAAKiF,kBACR,EAACrB,KAAK5D,MAAO,IAClB,EAAE4D,KAAK5D,MACX,EAGkC,OAFrCwL,SAAAxN,QAAA0B,kBAEDA,kBAAkB+L,oBAAoBD,SAAAxN,OAAA"}