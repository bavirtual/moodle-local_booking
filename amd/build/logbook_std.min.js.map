{"version":3,"file":"logbook_std.min.js","sources":["../src/logbook_std.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module is responsible for registering listeners\n * for logbook std view events.\n *\n * @module     local_booking/logbook_std\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2023\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n        'jquery',\n        'core/str',\n        'core/pending',\n        'core/modal_factory',\n        'core/notification',\n        'local_booking/booking_view_manager',\n        'local_booking/booking_actions',\n        'local_booking/events',\n        'local_booking/modal_logentry_form',\n        'local_booking/selectors'\n    ],\n    function(\n        $,\n        Str,\n        Pending,\n        ModalFactory,\n        Notification,\n        ViewManager,\n        BookingActions,\n        BookingEvents,\n        ModalLogentryEditForm,\n        Selectors\n    ) {\n\n    /**\n     * Register event listeners for session clicks.\n     *\n     * @param {object} root The root element.\n     */\n    const registerEventListeners = (root) => {\n\n        // Get promise for the logentry form for create and edit\n        const contextId = $(Selectors.logbookwrapper).data('contextid'),\n        courseId = $(Selectors.logbookwrapper).data('courseid'),\n        userId = $(Selectors.logbookwrapper).data('userid');\n\n        if (contextId) {\n            // Listen the click on the progression table of sessions for a logentry (new/view).\n            root.on('click', Selectors.actions.edit, function(e) {\n                // From lib get_logentry_view\n                const target = e.target;\n                let logegntry = target.closest(Selectors.containers.summaryForm),\n                    logentryId = logegntry.dataset.logentryId;\n\n                // A logentry needs to be created or edite, show the modal form.\n                e.preventDefault();\n                e.stopPropagation();\n                registerLogentryEditForm(root, e, contextId, courseId, userId, logentryId);\n                e.stopImmediatePropagation();\n            });\n        }\n    };\n\n    /**\n     * Register the form and listeners required for\n     * creating and editing logentries.\n     *\n     * @method registerLogentryEditForm\n     * @param  {object} root       The root element.\n     * @param  {object} e          The triggered event.\n     * @param  {Number} contextId  The course context id of the logentry.\n     * @param  {Number} courseId   The course id of the logentry.\n     * @param  {Number} userId     The user id the logentry belongs to.\n     * @param  {Number} logentryId The logentry id.\n     */\n    const registerLogentryEditForm = (root, e, contextId, courseId, userId, logentryId) => {\n        const LogentryFormPromise = ModalFactory.create({\n            type: ModalLogentryEditForm.TYPE,\n            large: true\n        });\n\n        const target = e.target;\n        const pendingPromise = new Pending('local_booking/registerLogentryEditForm');\n\n        ViewManager.renderLogentryModal(root, e, LogentryFormPromise, target, contextId, courseId, userId,\n            logentryId, false, 'local_booking/logbook_std')\n        .then(pendingPromise.resolve())\n        .catch();\n    };\n\n    return {\n        init: function(root) {\n            var root = $(root);\n            registerEventListeners(root);\n            ViewManager.stopLoading(root);\n        }\n    };\n});\n"],"names":["define","$","Str","Pending","ModalFactory","Notification","ViewManager","BookingActions","BookingEvents","ModalLogentryEditForm","Selectors","registerLogentryEditForm","root","e","contextId","courseId","userId","logentryId","LogentryFormPromise","create","type","TYPE","large","target","pendingPromise","renderLogentryModal","then","resolve","init","logbookwrapper","data","on","actions","edit","closest","containers","summaryForm","dataset","preventDefault","stopPropagation","stopImmediatePropagation","registerEventListeners","stopLoading"],"mappings":";;;;;;;;;AAyBAA,mCAAO,CACC,SACA,WACA,eACA,qBACA,oBACA,qCACA,gCACA,uBACA,oCACA,4BAEJ,SACIC,EACAC,IACAC,QACAC,aACAC,aACAC,YACAC,eACAC,cACAC,sBACAC,WAQJ,IAoCMC,yBAA2B,SAACC,KAAMC,EAAGC,UAAWC,SAAUC,OAAQC,YACpE,IAAMC,oBAAsBd,aAAae,OAAO,CAC5CC,KAAMX,sBAAsBY,KAC5BC,OAAO,IAGLC,OAASV,EAAEU,OACXC,eAAiB,IAAIrB,QAAQ,0CAEnCG,YAAYmB,oBAAoBb,KAAMC,EAAGK,oBAAqBK,OAAQT,UAAWC,SAAUC,OACvFC,YAAY,EAAO,6BACtBS,KAAKF,eAAeG,oBAIzB,MAAO,CACHC,KAAM,SAAShB,OApDY,SAACA,MAG5B,IAAME,UAAYb,EAAES,UAAUmB,gBAAgBC,KAAK,aACnDf,SAAWd,EAAES,UAAUmB,gBAAgBC,KAAK,YAC5Cd,OAASf,EAAES,UAAUmB,gBAAgBC,KAAK,UAEtChB,WAEAF,KAAKmB,GAAG,QAASrB,UAAUsB,QAAQC,MAAM,SAASpB,GAE9C,IAEII,WAFWJ,EAAEU,OACMW,QAAQxB,UAAUyB,WAAWC,aACzBC,QAAQpB,WAGnCJ,EAAEyB,iBACFzB,EAAE0B,kBACF5B,yBAAyBC,KAAMC,EAAGC,UAAWC,SAAUC,OAAQC,YAC/DJ,EAAE2B,0BACN,IAkCAC,CADI7B,KAAOX,EAAEW,OAEbN,YAAYoC,YAAY9B,KAC5B,EAER"}