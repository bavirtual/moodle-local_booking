{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle calendar ajax actions.\n *\n * @module     local_booking/repository\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\n\n/**\n * Get calendar data for the month view.\n *\n * @method getCalendarWeekData\n * @param {number} year Year\n * @param {number} week Week\n * @param {number} time Timestamp\n * @param {number} courseId The course id.\n * @param {number} categoryId The category id.\n * @param {string} action The action type.\n * @param {string} view The view type user/all.\n * @param {number} studentId The id of the associated user.\n * @param {number} exerciseId The exercise id for the booked session.\n * @return {promise} Resolved with the month view data.\n */\n export const getCalendarWeekData = (year, week, time, courseId, categoryId, action, view, studentId, exerciseId) => {\n    const request = {\n        methodname: 'local_booking_get_weekly_view',\n        args: {\n            year,\n            week,\n            time,\n            courseid: courseId,\n            categoryid: categoryId,\n            action: action,\n            view: view,\n            studentid: studentId,\n            exerciseid: exerciseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get sesison booking, my bookings, and my students data to view.\n *\n * @method getBookingsData\n * @param {number} courseId The course id.\n * @param {string} filter   The filter to show students, inactive (including graduates), suspended, and default to active.\n * @return {promise} Resolved with the month view data.\n */\n export const getBookingsData = (courseId, filter) => {\n    const request = {\n        methodname: 'local_booking_get_bookings_view',\n        args: {\n            courseid: courseId,\n            filter: filter,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get sesison booking, my bookings, and my students data to view.\n *\n * @method getExerciseName\n * @param {number} courseId   The course id.\n * @param {number} exerciseId The exercise id.\n * @return {promise} Resolved with the month view data.\n */\n export const getExerciseName = (courseId, exerciseId) => {\n    const request = {\n        methodname: 'local_booking_get_exercise_name',\n        args: {\n            courseid: courseId,\n            exerciseid: exerciseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send booked slots to the server for persistence\n *\n * @param {array} bookedslot    The array of booked slots\n * @param {int} courseId        The course id of the booking\n * @param {int} exerciseId      The exercise id of the associated course\n * @param {int} studentId       The id of the associated user\n * @return {promise}\n */\n export const saveBookedSlot = (bookedslot, courseId, exerciseId, studentId) => {\n    const request = {\n        methodname: 'local_booking_save_booking',\n        args: {\n            bookedslot: bookedslot,\n            courseid: courseId,\n            exerciseid: exerciseId,\n            studentid: studentId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Cancel a sepcific booking for a student.\n *\n * @param {int} bookingId   The booking id to cancel\n * @param {string} comment  The booking id to cancel\n * @param {bool} noshow     Whether the cancellation is a no-show or instructor initiated\n * @return {promise}\n */\n export const cancelBooking = (bookingId, comment, noshow) => {\n    const request = {\n        methodname: 'local_booking_cancel_booking',\n        args: {\n            bookingid: bookingId,\n            comment: comment,\n            noshow: noshow,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send marked availability posts (time slots)\n * to the server to be persisted\n *\n * @param {string} weekSlots The URL encoded values from the form\n * @param {int} course The id of the associated course\n * @param {int} year The id of the event to update\n * @param {int} week A timestamp for some time during the target day\n * @return {promise}\n */\n export const saveSlots = (weekSlots, course, year, week) => {\n    const request = {\n        methodname: 'local_booking_save_slots',\n        args: {\n            slots: weekSlots,\n            courseid: course,\n            year: year,\n            week: week\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Remove all saved slots for a specific week & year\n * for the current user (student)\n *\n * @param {int} course The id of the associated course\n * @param {int} year The id of the event to update\n * @param {int} week A timestamp for some time during the target day\n * @return {promise}\n */\n export const clearSlots = (course, year, week) => {\n    const request = {\n        methodname: 'local_booking_delete_slots',\n        args: {\n            courseid: course,\n            year: year,\n            week: week\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send the form data of the logbook entry form\n * to be persisted at the server.\n *\n * @method submitCreateUpdateLogentryForm\n * @param {string} formArgs An array of J URL encoded values from the form\n * @param {string} formData The URL encoded values from the form\n * @return {promise} Resolved with the new or edited logbook entry\n */\n export const submitCreateUpdateLogentryForm = (formArgs, formData) => {\n    const request = {\n        methodname: 'local_booking_submit_create_update_form',\n        args: {\n            formargs: formArgs,\n            formdata: formData\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get a graded session logbook entry by id.\n *\n * @method getLogentryById\n * @param {number} logentryId The logbook entry id.\n * @param {number} courseId The associated course id.\n * @param {number} userId The user id of entry.\n * @return {promise} Resolved with requested calendar event\n */\n export const getLogentryById = (logentryId, courseId, userId) => {\n\n    const request = {\n        methodname: 'local_booking_get_logentry_by_id',\n        args: {\n            logentryid: logentryId,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Delete a log book entry by id.\n *\n * @method deleteLogentry\n * @param {number} logentryId The logbook entry id to delete.\n * @param {number} userId The logbook entry course id.\n * @param {number} courseId The logbook entry user id.\n * @return {promise} Resolved with requested calendar event\n */\n export const deleteLogentry = (logentryId, userId, courseId) => {\n\n    const request = {\n        methodname: 'local_booking_delete_logentry',\n        args: {\n            logentryid: logentryId,\n            userid: userId,\n            courseid: courseId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send the form data of the logbook entry form\n * to be persisted at the server.\n *\n * @method findPirep\n * @param  {string} pirep The passed PIREP number\n * @param  {number} courseId The logbook entry user id.\n * @param  {number} userId The logbook entry course id.\n * @param  {number} exerciseId The logbook entry course id.\n * @return  {promise} Resolved with the pirep data\n */\n export const findPirep = (pirep, courseId, userId, exerciseId) => {\n    const request = {\n        methodname: 'local_booking_get_pirep',\n        args: {\n            pirep: pirep,\n            courseid: courseId,\n            userid: userId,\n            exerciseid: exerciseId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update Suspended status from the user profile.\n *\n * @method updateSuspended\n * @param  {bool}   status   Suspended true or false.\n * @param  {number} courseId The profile user id.\n * @param  {number} userId   The profile course id.\n * @return {promise}         Resolved with suspension true/false promise\n */\n export const updateSuspendedStatus = (status, courseId, userId) => {\n    const request = {\n        methodname: 'local_booking_update_suspended_status',\n        args: {\n            status: status,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update group membership status for Onhold and Keep Active groups for the user profile.\n *\n * @method updateGroup\n * @param  {string} group    Group name.\n * @param  {bool}   ismember Membership true or false.\n * @param  {number} courseId The profile user id.\n * @param  {number} userId   The profile course id.\n * @return {promise}         Resolved with group membership true/false promise\n */\n export const updateGroup = (group, ismember, courseId, userId) => {\n    const request = {\n        methodname: 'local_booking_update_group_status',\n        args: {\n            group: group,\n            ismember: ismember,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update user preferences for restrictions override or\n * endorsement status.\n *\n * @method updateUserPreferences\n * @param  {string} preference  Preference name.\n * @param  {string} value       User preference value.\n * @param  {number} courseId    The profile user id.\n * @param  {number} userId      The profile course id.\n * @return {promise}            Resolved with preference set promise\n */\n export const updateUserPreferences = (preference, value, courseId, userId) => {\n    const request = {\n        methodname: 'local_booking_update_user_preferences',\n        args: {\n            preference: preference,\n            value: value,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update user comment (description).\n *\n * @method updateProfileComment\n * @param  {number} courseId    The profile course id.\n * @param  {number} userId      The profile user id.\n * @param  {string} comment     Comment text.\n * @return {promise}            Resolved with preference set promise\n */\n export const updateProfileComment = (courseId, userId, comment) => {\n    const request = {\n        methodname: 'local_booking_update_profile_comment',\n        args: {\n            courseid: courseId,\n            userid: userId,\n            comment: comment\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n"],"names":["obj","_ajax","__esModule","default","_exports","getCalendarWeekData","year","week","time","courseId","categoryId","action","view","studentId","exerciseId","request","methodname","args","courseid","categoryid","studentid","exerciseid","Ajax","call","getBookingsData","filter","getExerciseName","saveBookedSlot","bookedslot","cancelBooking","bookingId","comment","noshow","bookingid","saveSlots","weekSlots","course","slots","clearSlots","submitCreateUpdateLogentryForm","formArgs","formData","formargs","formdata","getLogentryById","logentryId","userId","logentryid","userid","deleteLogentry","findPirep","pirep","updateSuspendedStatus","status","updateGroup","group","ismember","updateUserPreferences","preference","value","updateProfileComment"],"mappings":"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"}