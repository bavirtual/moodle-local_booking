{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle calendar ajax actions.\n *\n * @module     local_booking/repository\n * @author     Mustafa Hajjar (mustafa.hajjar)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\n\n/**\n * Get calendar data for the month view.\n *\n * @method getCalendarWeekData\n * @param {number} year Year\n * @param {number} week Week\n * @param {number} time Timestamp\n * @param {number} courseId The course id.\n * @param {string} action The action type.\n * @param {string} view The view type user/all.\n * @param {number} studentId The id of the associated user.\n * @param {number} exerciseId The exercise id for the booked session.\n * @return {promise} Resolved with the month view data.\n */\n export const getCalendarWeekData = (year, week, time, courseId, action, view, studentId, exerciseId) => {\n    const request = {\n        methodname: 'local_booking_get_weekly_view',\n        args: {\n            year,\n            week,\n            time,\n            courseid: courseId,\n            action: action,\n            view: view,\n            studentid: studentId,\n            exerciseid: exerciseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get student progression  section data.\n *\n * @method getBookingsData\n * @param {number} courseId     The course id.\n * @param {string} filter       The filter to show students, inactive (including graduates), suspended, and default to active.\n * @param   {number} userId The user id for single user booking view.\n * @return {promise} Resolved with the student progression data.\n */\n export const getBookingsData = (courseId, filter, userId) => {\n    const request = {\n        methodname: 'local_booking_get_bookings_view',\n        args: {\n            courseid: courseId,\n            userid: userId,\n            filter: filter,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get instructor my bookings section data.\n *\n * @method getInstructorBookingsData\n * @param {number} courseId     The course id.\n * @return {promise} Resolved with the instructor bookings data.\n */\n export const getInstructorBookingsData = (courseId) => {\n    const request = {\n        methodname: 'local_booking_get_instructor_bookings_view',\n        args: {\n            courseid: courseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get session booking, my bookings, and my students data to view.\n *\n * @method getExerciseName\n * @param {number} courseId   The course id.\n * @param {number} exerciseId The exercise id.\n * @return {promise} Resolved with the month view data.\n */\n export const getExerciseName = (courseId, exerciseId) => {\n    const request = {\n        methodname: 'local_booking_get_exercise_name',\n        args: {\n            courseid: courseId,\n            exerciseid: exerciseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send booked slots to the server for persistence\n *\n * @method saveBookedSlot\n * @param {array} bookedslot    The array of booked slots\n * @param {int} courseId        The course id of the booking\n * @param {int} exerciseId      The exercise id of the associated course\n * @param {int} studentId       The id of the associated user\n * @return {promise}\n */\n export const saveBookedSlot = (bookedslot, courseId, exerciseId, studentId) => {\n    const request = {\n        methodname: 'local_booking_save_booking',\n        args: {\n            bookedslot: bookedslot,\n            courseid: courseId,\n            exerciseid: exerciseId,\n            studentid: studentId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Cancel a specific booking for a student.\n *\n * @method cancelBooking\n * @param {int} bookingId   The booking id to cancel\n * @param {string} comment  The booking id to cancel\n * @param {bool} noshow     Whether the cancellation is a no-show or instructor initiated\n * @return {promise}\n */\n export const cancelBooking = (bookingId, comment, noshow) => {\n    const request = {\n        methodname: 'local_booking_cancel_booking',\n        args: {\n            bookingid: bookingId,\n            comment: comment,\n            noshow: noshow,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Checks if the booking conflicts with another booking.\n *\n * @method hasConflictingBooking\n * @param {int}   studentid    The student id the booking is for\n * @param {array} bookedslot   The array of booked slots\n * @return {promise}\n */\nexport const hasConflictingBooking = (studentid, bookedslot) => {\n    const request = {\n        methodname: 'local_booking_has_conflicting_booking',\n        args: {\n            studentid: studentid,\n            bookedslot: bookedslot,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send marked availability posts (time slots)\n * to the server to be persisted\n *\n * @method saveSlots\n * @param {string} weekSlots The URL encoded values from the form\n * @param {int} course The id of the associated course\n * @param {int} year The id of the event to update\n * @param {int} week A timestamp for some time during the target day\n * @return {promise}\n */\n export const saveSlots = (weekSlots, course, year, week) => {\n    const request = {\n        methodname: 'local_booking_save_slots',\n        args: {\n            slots: weekSlots,\n            courseid: course,\n            year: year,\n            week: week\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Remove all saved slots for a specific week & year\n * for the current user (student)\n *\n * @method clearSlots\n * @param {int} course The id of the associated course\n * @param {int} year The id of the event to update\n * @param {int} week A timestamp for some time during the target day\n * @return {promise}\n */\n export const clearSlots = (course, year, week) => {\n    const request = {\n        methodname: 'local_booking_delete_slots',\n        args: {\n            courseid: course,\n            year: year,\n            week: week\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send the form data of the logbook entry form\n * to be persisted at the server.\n *\n * @method submitCreateUpdateLogentryForm\n * @param {string} formArgs An array of J URL encoded values from the form\n * @param {string} formData The URL encoded values from the form\n * @return {promise} Resolved with the new or edited logbook entry\n */\n export const submitCreateUpdateLogentryForm = (formArgs, formData) => {\n    const request = {\n        methodname: 'local_booking_save_logentry',\n        args: {\n            formargs: formArgs,\n            formdata: formData\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get a graded session logbook entry by id.\n *\n * @method getLogentryById\n * @param {number} logentryId The logbook entry id.\n * @param {number} courseId The associated course id.\n * @param {number} userId The user id of entry.\n * @return {promise} Resolved with requested calendar event\n */\n export const getLogentryById = (logentryId, courseId, userId) => {\n\n    const request = {\n        methodname: 'local_booking_get_logentry',\n        args: {\n            logentryid: logentryId,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Delete a log book entry by id.\n *\n * @method deleteLogentry\n * @param {number} logentryId The logbook entry id to delete.\n * @param {number} userId The logbook entry course id.\n * @param {number} courseId The logbook entry user id.\n * @param {bool}   cascade Whether to cascade deletion of linked logbook entry.\n * @return {promise} Resolved with requested calendar event\n */\n export const deleteLogentry = (logentryId, userId, courseId, cascade) => {\n\n    const request = {\n        methodname: 'local_booking_delete_logentry',\n        args: {\n            logentryid: logentryId,\n            userid: userId,\n            courseid: courseId,\n            cascade: cascade\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send the form data of the logbook entry form\n * to be persisted at the server.\n *\n * @method findPirep\n * @param  {string} pirep The passed PIREP number\n * @param  {number} courseId The logbook entry user id.\n * @param  {number} userId The logbook entry course id.\n * @param  {number} exerciseId The logbook entry course id.\n * @return  {promise} Resolved with the pirep data\n */\n export const findPirep = (pirep, courseId, userId, exerciseId) => {\n    const request = {\n        methodname: 'local_booking_get_pirep',\n        args: {\n            pirep: pirep,\n            courseid: courseId,\n            userid: userId,\n            exerciseid: exerciseId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update Suspended status from the user profile.\n *\n * @method updateSuspendedStatus\n * @param  {bool}   status   Suspended true or false.\n * @param  {number} courseId The profile user id.\n * @param  {number} userId   The profile course id.\n * @return {promise}         Resolved with suspension true/false promise\n */\n export const updateSuspendedStatus = (status, courseId, userId) => {\n    const request = {\n        methodname: 'local_booking_set_suspended_status',\n        args: {\n            status: status,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get course groups to get the group needed\n *\n * @method getCourseGroups\n * @param  {number} courseId The profile user id.\n * @return {promise}         Resolved with group membership true/false promise\n */\n export const getCourseGroups = (courseId) => {\n    const request = {\n        methodname: 'core_group_get_course_groups',\n        args: {\n            courseid: courseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Adds or removes a student to a course's group.\n *\n * @method addToGroup\n * @param  {number} courseId  The course id to add to.\n * @param  {number} userId    The user to add.\n * @param  {string} groupName The name of the group.\n * @param  {bool}   add       Whether to add or remove from the course's group.\n * @return {promise}          Resolved with group membership true/false promise\n */\n export const groupAddRemove = (courseId, userId, groupName, add) => {\n    const request = {\n        methodname: 'local_booking_set_student_group',\n        args: {\n            courseid: courseId,\n            studentid: userId,\n            groupname: groupName,\n            add: add\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update user preferences for restrictions override or\n * endorsement status.\n *\n * @method setUserPreferences\n * @param  {string} preference The preference tag\n * @param  {mixed} value       The value of the preference\n * @param  {int} courseId      The course id\n * @param  {int} userId        The student's user id\n * @return {promise}  Resolved with preference set promise\n */\n export const setUserPreferences = (preference, value, courseId, userId) => {\n    const request = {\n        methodname: 'local_booking_set_user_preferences',\n        args: {\n            preference: preference,\n            value: value,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update student progress information.\n *\n * @method setProgressFlag\n * @param  {string} key    The progress flag\n * @param  {string} value  The value of the progress flag\n * @param  {int} courseId  The course id\n * @param  {int} studentId The student's user id\n * @return {promise}  Resolved with progress set promise\n */\n export const setProgressFlag = (key, value, courseId, studentId) => {\n    const request = {\n        methodname: 'local_booking_set_progress_flag',\n        args: {\n            key: key,\n            value: value,\n            courseid: courseId,\n            studentid: studentId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Update user comment (description).\n *\n * @method updateProfileComment\n * @param  {number} courseId    The profile course id.\n * @param  {number} userId      The profile user id.\n * @param  {string} comment     Comment text.\n * @return {promise}            Resolved with preference set promise\n */\n export const updateProfileComment = (courseId, userId, comment) => {\n    const request = {\n        methodname: 'local_booking_update_profile_comment',\n        args: {\n            courseid: courseId,\n            userid: userId,\n            comment: comment\n        }\n    };\n\n    return Ajax.call([request])[0];\n };\n\n/**\n * Get student names.\n *\n * @param {Number} courseId The course id\n * @return {Promise}\n */\nexport const userFetch = (courseId) => {\n    const request = {\n        methodname: 'local_booking_get_student_names',\n        args: {\n            courseid: courseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};"],"names":["year","week","time","courseId","action","view","studentId","exerciseId","request","methodname","args","courseid","studentid","exerciseid","Ajax","call","filter","userId","userid","bookedslot","bookingId","comment","noshow","bookingid","weekSlots","course","slots","formArgs","formData","formargs","formdata","logentryId","logentryid","cascade","pirep","status","groupName","add","groupname","preference","value","key"],"mappings":";;;;;;;;8pBAuCoC,CAACA,KAAMC,KAAMC,KAAMC,SAAUC,OAAQC,KAAMC,UAAWC,oBAChFC,QAAU,CACZC,WAAY,gCACZC,KAAM,CACFV,KAAAA,KACAC,KAAAA,KACAC,KAAAA,KACAS,SAAUR,SACVC,OAAQA,OACRC,KAAMA,KACNO,UAAWN,UACXO,WAAYN,oBAIbO,cAAKC,KAAK,CAACP,UAAU,6BAYA,CAACL,SAAUa,OAAQC,gBACzCT,QAAU,CACZC,WAAY,kCACZC,KAAM,CACFC,SAAUR,SACVe,OAAQD,OACRD,OAAQA,gBAITF,cAAKC,KAAK,CAACP,UAAU,uCAUWL,iBACjCK,QAAU,CACZC,WAAY,6CACZC,KAAM,CACFC,SAAUR,kBAIXW,cAAKC,KAAK,CAACP,UAAU,6BAWA,CAACL,SAAUI,oBACjCC,QAAU,CACZC,WAAY,kCACZC,KAAM,CACFC,SAAUR,SACVU,WAAYN,oBAIbO,cAAKC,KAAK,CAACP,UAAU,4BAaD,CAACW,WAAYhB,SAAUI,WAAYD,mBACxDE,QAAU,CACZC,WAAY,6BACZC,KAAM,CACFS,WAAYA,WACZR,SAAUR,SACVU,WAAYN,WACZK,UAAWN,mBAIZQ,cAAKC,KAAK,CAACP,UAAU,2BAYF,CAACY,UAAWC,QAASC,gBACzCd,QAAU,CACZC,WAAY,+BACZC,KAAM,CACFa,UAAWH,UACXC,QAASA,QACTC,OAAQA,gBAITR,cAAKC,KAAK,CAACP,UAAU,mCAWK,CAACI,UAAWO,oBACvCX,QAAU,CACZC,WAAY,wCACZC,KAAM,CACFE,UAAWA,UACXO,WAAYA,oBAIbL,cAAKC,KAAK,CAACP,UAAU,uBAcN,CAACgB,UAAWC,OAAQzB,KAAMC,cAC1CO,QAAU,CACZC,WAAY,2BACZC,KAAM,CACFgB,MAAOF,UACPb,SAAUc,OACVzB,KAAMA,KACNC,KAAMA,cAIPa,cAAKC,KAAK,CAACP,UAAU,wBAaL,CAACiB,OAAQzB,KAAMC,cAChCO,QAAU,CACZC,WAAY,6BACZC,KAAM,CACFC,SAAUc,OACVzB,KAAMA,KACNC,KAAMA,cAIPa,cAAKC,KAAK,CAACP,UAAU,4CAYe,CAACmB,SAAUC,kBAChDpB,QAAU,CACZC,WAAY,8BACZC,KAAM,CACFmB,SAAUF,SACVG,SAAUF,kBAIXd,cAAKC,KAAK,CAACP,UAAU,6BAYA,CAACuB,WAAY5B,SAAUc,gBAE7CT,QAAU,CACZC,WAAY,6BACZC,KAAM,CACFsB,WAAYD,WACZpB,SAAUR,SACVe,OAAQD,gBAITH,cAAKC,KAAK,CAACP,UAAU,4BAaD,CAACuB,WAAYd,OAAQd,SAAU8B,iBAEpDzB,QAAU,CACZC,WAAY,gCACZC,KAAM,CACFsB,WAAYD,WACZb,OAAQD,OACRN,SAAUR,SACV8B,QAASA,iBAIVnB,cAAKC,KAAK,CAACP,UAAU,uBAcN,CAAC0B,MAAO/B,SAAUc,OAAQV,oBAC1CC,QAAU,CACZC,WAAY,0BACZC,KAAM,CACFwB,MAAOA,MACPvB,SAAUR,SACVe,OAAQD,OACRJ,WAAYN,oBAIbO,cAAKC,KAAK,CAACP,UAAU,mCAYM,CAAC2B,OAAQhC,SAAUc,gBAC/CT,QAAU,CACZC,WAAY,qCACZC,KAAM,CACFyB,OAAQA,OACRxB,SAAUR,SACVe,OAAQD,gBAITH,cAAKC,KAAK,CAACP,UAAU,6BAUCL,iBACvBK,QAAU,CACZC,WAAY,+BACZC,KAAM,CACFC,SAAUR,kBAIXW,cAAKC,KAAK,CAACP,UAAU,4BAaD,CAACL,SAAUc,OAAQmB,UAAWC,aACnD7B,QAAU,CACZC,WAAY,kCACZC,KAAM,CACFC,SAAUR,SACVS,UAAWK,OACXqB,UAAWF,UACXC,IAAKA,aAINvB,cAAKC,KAAK,CAACP,UAAU,gCAcG,CAAC+B,WAAYC,MAAOrC,SAAUc,gBACvDT,QAAU,CACZC,WAAY,qCACZC,KAAM,CACF6B,WAAYA,WACZC,MAAOA,MACP7B,SAAUR,SACVe,OAAQD,gBAITH,cAAKC,KAAK,CAACP,UAAU,6BAaA,CAACiC,IAAKD,MAAOrC,SAAUG,mBAC7CE,QAAU,CACZC,WAAY,kCACZC,KAAM,CACF+B,IAAKA,IACLD,MAAOA,MACP7B,SAAUR,SACVS,UAAWN,mBAIZQ,cAAKC,KAAK,CAACP,UAAU,kCAYK,CAACL,SAAUc,OAAQI,iBAC9Cb,QAAU,CACZC,WAAY,uCACZC,KAAM,CACFC,SAAUR,SACVe,OAAQD,OACRI,QAASA,iBAIVP,cAAKC,KAAK,CAACP,UAAU,uBASNL,iBAChBK,QAAU,CACZC,WAAY,kCACZC,KAAM,CACFC,SAAUR,kBAIXW,cAAKC,KAAK,CAACP,UAAU"}