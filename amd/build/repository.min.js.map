{"version":3,"sources":["../src/repository.js"],"names":["getCalendarWeekData","year","week","time","courseId","categoryId","action","view","studentId","exerciseId","Ajax","call","methodname","args","courseid","categoryid","studentid","exerciseid","getBookingsData","saveBookedSlot","bookedslot","cancelBooking","bookingId","comment","bookingid","overrideWaitRestriction","saveSlots","weekSlots","course","slots","clearSlots","submitCreateUpdateLogentryForm","formArgs","formData","formargs","formdata","getLogentryById","logentryId","userId","logentryid","userid","deleteLogentry","verifyPirep"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle calendar ajax actions.\n *\n * @module     local_booking/repository\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\n\n/**\n * Get calendar data for the month view.\n *\n * @method getCalendarWeekData\n * @param {number} year Year\n * @param {number} week Week\n * @param {number} time Timestamp\n * @param {number} courseId The course id.\n * @param {number} categoryId The category id.\n * @param {string} action The action type.\n * @param {string} view The view type user/all.\n * @param {number} studentId The id of the associated user.\n * @param {number} exerciseId The exercise id for the booked session.\n * @return {promise} Resolved with the month view data.\n */\n export const getCalendarWeekData = (year, week, time, courseId, categoryId, action, view, studentId, exerciseId) => {\n    const request = {\n        methodname: 'local_booking_get_weekly_view',\n        args: {\n            year,\n            week,\n            time,\n            courseid: courseId,\n            categoryid: categoryId,\n            action: action,\n            view: view,\n            studentid: studentId,\n            exerciseid: exerciseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get sesison booking, my bookings, and my students data to view.\n *\n * @method getBookingsData\n * @param {number} courseId The course id.\n * @param {number} categoryId The category id.\n * @return {promise} Resolved with the month view data.\n */\n export const getBookingsData = (courseId) => {\n    const request = {\n        methodname: 'local_booking_get_bookings_view',\n        args: {\n            courseid: courseId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send booked slots to the server for persistence\n *\n * @param {array} bookedslot    The array of booked slots\n * @param {int} courseId        The course id of the booking\n * @param {int} exerciseId      The exercise id of the associated course\n * @param {int} studentId       The id of the associated user\n * @param {int} slotId          The id of the slot if exists != 0\n * @return {promise}\n */\n export const saveBookedSlot = (bookedslot, courseId, exerciseId, studentId) => {\n    const request = {\n        methodname: 'local_booking_save_booking',\n        args: {\n            bookedslot: bookedslot,\n            courseid: courseId,\n            exerciseid: exerciseId,\n            studentid: studentId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Cancel a sepcific booking for a student.\n *\n * @param {int} bookingId   The booking id to cancel\n * @param {string} comment  The booking id to cancel\n * @return {promise}\n */\n export const cancelBooking = (bookingId, comment) => {\n    const request = {\n        methodname: 'local_booking_cancel_booking',\n        args: {\n            bookingid: bookingId,\n            comment: comment,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Overrides wait time restriction for a student.\n *\n * @param {int} studentId   The student id to waive restiction for.\n * @return {promise}\n */\n export const overrideWaitRestriction = (studentId) => {\n    const request = {\n        methodname: 'local_booking_override_restriction',\n        args: {\n            studentid: studentId,\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send marked availability posts (time slots)\n * to the server to be persisted\n *\n * @param {string} weekSlots The URL encoded values from the form\n * @param {int} course The id of the associated course\n * @param {int} year The id of the event to update\n * @param {int} week A timestamp for some time during the target day\n * @return {promise}\n */\n export const saveSlots = (weekSlots, course, year, week) => {\n    const request = {\n        methodname: 'local_booking_save_slots',\n        args: {\n            slots: weekSlots,\n            courseid: course,\n            year: year,\n            week: week\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Remove all saved slots for a specific week & year\n * for the current user (student)\n *\n * @param {int} course The id of the associated course\n * @param {int} year The id of the event to update\n * @param {int} week A timestamp for some time during the target day\n * @return {promise}\n */\n export const clearSlots = (course, year, week) => {\n    const request = {\n        methodname: 'local_booking_delete_slots',\n        args: {\n            courseid: course,\n            year: year,\n            week: week\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send the form data of the logbook entry form\n * to be persisted at the server.\n *\n * @method submitCreateUpdateLogentryForm\n * @param {string} formArgs An array of J URL encoded values from the form\n * @param {string} formData The URL encoded values from the form\n * @return {promise} Resolved with the new or edited logbook entry\n */\n export const submitCreateUpdateLogentryForm = (formArgs, formData) => {\n    const request = {\n        methodname: 'local_booking_submit_create_update_form',\n        args: {\n            formargs: formArgs,\n            formdata: formData\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Get a graded session logbook entry by id.\n *\n * @method getLogentryById\n * @param {number} logentryId The logbook entry id.\n * @param {number} courseId The associated course id.\n * @param {number} userId The user id of entry.\n * @return {promise} Resolved with requested calendar event\n */\n export const getLogentryById = (logentryId, courseId, userId) => {\n\n    const request = {\n        methodname: 'local_booking_get_logentry_by_id',\n        args: {\n            logentryid: logentryId,\n            courseid: courseId,\n            userid: userId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Delete a log book entry by id.\n *\n * @method deleteLogentry\n * @param {number} logentryId The logbook entry id to delete.\n * @param {number} userId The logbook entry course id.\n * @param {number} courseId The logbook entry user id.\n * @return {promise} Resolved with requested calendar event\n */\n export const deleteLogentry = (logentryId, userId, courseId) => {\n\n    const request = {\n        methodname: 'local_booking_delete_logentry',\n        args: {\n            logentryid: logentryId,\n            userid: userId,\n            courseid: courseId\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Send the form data of the logbook entry form\n * to be persisted at the server.\n *\n * @method verifyPirep\n * @param {string} formArgs An array of J URL encoded values from the form\n * @param {string} formData The URL encoded values from the form\n * @return {promise} Resolved with the pirep data\n */\n export const verifyPirep = (formArgs, formData) => {\n    const request = {\n        methodname: 'local_booking_verify_pirep',\n        args: {\n            formargs: formArgs,\n            formdata: formData\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n"],"file":"repository.min.js"}