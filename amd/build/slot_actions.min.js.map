{"version":3,"sources":["../src/slot_actions.js"],"names":["define","$","Notification","Repository","CalendarViewManager","SELECTORS","CALENDAR_WRAPPER","SLOTS_TABLE","SLOT_DAY","SAVE_BUTTON","PASTE_BUTTON","BOOK_BUTTON","LOADING_ICON_CONTAINER","Slots","BookedSlot","SlotIndexes","saveBookedSlot","root","startLoading","course","find","data","exercise","studentid","getUISlots","then","response","validationerror","alert","location","href","M","cfg","wwwroot","bind","always","stopLoading","fail","exception","action","slottype","year","week","tableid","attr","head","colCount","document","getElementById","rows","cells","length","colOffset","each","index","i","dayHour","map","get","aSlot","forEach","hourSlot","isLastElement","Object","keys","constructor","starttime","endtime","addSlot","push","setPasteState","addClass","removeClass","setSaveButtonState","forceenable","disabled","SaveButton","state","prop","saveWeekSlots","serverCall","saveSlots","clearSlots","fetchNotifications","clearWeekSlots","filter","pasteSlots","table","idx","slot","copySlots","el","closest","rowIndex","cellIndex","setSlot","cell","slotaction","slotactionclass"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the quick add or update event modal.\n *\n * @module     local_booking/slot_actions\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery',\n    'core/notification',\n    'local_booking/repository',\n    'local_booking/calendar_view_manager',\n    ],\n    function(\n        $,\n        Notification,\n        Repository,\n        CalendarViewManager\n    ) {\n\n    var SELECTORS = {\n        CALENDAR_WRAPPER: '[class=calendarwrapper]',\n        SLOTS_TABLE: '[data-region=\"slots-week\"]',\n        SLOT_DAY: '[data-region=\"day\"]',\n        SAVE_BUTTON: '[data-region=\"save-button\"]',\n        PASTE_BUTTON: \"[data-region='paste-button']\",\n        BOOK_BUTTON: \"[data-region='book-button']\",\n        LOADING_ICON_CONTAINER: '[data-region=\"loading-icon-container\"]',\n    };\n\n    var Slots = [];\n    var BookedSlot;\n    var SlotIndexes = [];\n\n    /**\n     * Create the event form modal for creating new events and\n     * editing existing events.\n     *\n     * @method saveWeekSlots\n     * @param {object} root The calendar root element\n     * @return {object} The create modal promise\n     */\n     function saveWeekSlots(root) {\n\n        CalendarViewManager.startLoading(root);\n\n        // Get year and week\n        const course = root.find(SELECTORS.CALENDAR_WRAPPER).data('courseid');\n        const year = root.find(SELECTORS.CALENDAR_WRAPPER).data('year');\n        const week = root.find(SELECTORS.CALENDAR_WRAPPER).data('week');\n\n        getUISlots(root);\n\n        let serverCall = null;\n        if (Slots.length != 0) {\n            serverCall = Repository.saveSlots(Slots, course, year, week);\n        } else {\n            serverCall = Repository.clearSlots(course, year, week);\n        }\n\n        // Send a request to the server to clear slots.\n        return serverCall\n            .then(function(response) {\n                if (response.validationerror) {\n                    // eslint-disable-next-line no-alert\n                    alert('Errors encountered: Unable to process availability posting action!');\n                }\n                return;\n            }\n            .bind(this))\n            .always(function() {\n                Notification.fetchNotifications();\n                return CalendarViewManager.stopLoading(root);\n            }\n            .bind(this))\n            .fail(Notification.exception);\n    }\n\n    /**\n     * Create the event form modal for creating new events and\n     * editing existing events.\n     *\n     * @method saveBookedSlot\n     * @param {object} root The calendar root element\n     * @return {object} The create modal promise\n     */\n     function saveBookedSlot(root) {\n\n        CalendarViewManager.startLoading(root);\n\n        // Get exercise id and the user id from the URL\n        const course = root.find(SELECTORS.CALENDAR_WRAPPER).data('courseid');\n        const exercise = root.find(SELECTORS.CALENDAR_WRAPPER).data('exercise-id');\n        const studentid = root.find(SELECTORS.CALENDAR_WRAPPER).data('student-id');\n\n        getUISlots(root, 'book');\n\n        // Send the form data to the server for processing.\n        return Repository.saveBookedSlot(BookedSlot, course, exercise, studentid)\n            .then(function(response) {\n                if (response.validationerror) {\n                    // eslint-disable-next-line no-alert\n                    alert('Errors encountered: Unable to save slot!');\n                } else {\n                    // Redirect to bookings view\n                    location.href = M.cfg.wwwroot + '/local/booking/view.php?courseid=' + course;\n                }\n                return;\n            }\n            .bind(this))\n            .always(function() {\n                CalendarViewManager.stopLoading(root);\n                return;\n            }\n            .bind(this))\n            .fail(Notification.exception);\n    }\n\n     /**\n     * Create the event form modal for creating new events and\n     * editing existing events.\n     *\n     * @method getSlots\n     * @param {object} root     The calendar root element\n     * @param {String} action   The action for display view/book\n     */\n     function getUISlots(root, action) {\n\n        const slottype = action == 'book' ? 'slot-booked' : 'slot-marked';\n        const year = root.find(SELECTORS.CALENDAR_WRAPPER).data('year');\n        const week = root.find(SELECTORS.CALENDAR_WRAPPER).data('week');\n\n        const tableid = root.find(SELECTORS.SLOTS_TABLE).attr('id');\n        const head = $('#' + tableid + ' th');\n        const colCount = document.getElementById(tableid).rows[0].cells.length;\n        let colOffset;\n\n        Slots.length = 0;\n\n        // Get column index for the start of the week\n        head.each(function() {\n            if ($(this).data('region') == 'slot-week-day') {\n                colOffset = head.index(this) + 1;\n                return false;\n            }\n        });\n\n        // Get all slots for this week from the UI table\n        for (let i = colOffset; i <= colCount; i++) {\n            // Get slots for the current day\n            const dayHour = $('#' + tableid + ' td:nth-child(' + i + ')').map(function() {\n                return [[$(this).data(slottype), $(this).data('slot-timestamp')]];\n            }).get();\n\n            // Get each slot in the day (start and end times)\n            let aSlot = {};\n\n            // Check each day (column) and record marked slot start-end times\n            // eslint-disable-next-line no-loop-func\n            dayHour.forEach((hourSlot, index) => {\n                let isLastElement = index == dayHour.length - 1;\n                // Check if the slot is marked to record start or end time in marked sequence\n                if (hourSlot[0]) {\n                    if (Object.keys(aSlot).length === 0 && aSlot.constructor === Object) {\n                        aSlot.starttime = hourSlot[1];\n                    } else {\n                        aSlot.endtime = hourSlot[1];\n                    }\n                // Add the slot if it has start and end, and this slot is empty => slot sequence ended\n                } else if (!(Object.keys(aSlot).length === 0 && aSlot.constructor === Object)) {\n                    aSlot = addSlot(aSlot, slottype, week, year);\n                }\n                // Add slot if it ends at the end of the day\n                if (isLastElement && !(Object.keys(aSlot).length === 0 && aSlot.constructor === Object)) {\n                    aSlot = addSlot(aSlot, slottype, week, year);\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds a slot to local object array.\n     *\n     * @method addSlot\n     * @param {object} aSlot The slot to be add to the local object array\n     * @param {string} slottype The slot type availability post vs booked\n     * @param {int} week The week of the year\n     * @param {int} year The year\n     * @return {object} empty object\n     */\n     function addSlot(aSlot, slottype, week = 0, year = 0) {\n        if (slottype == 'slot-marked') {\n            Slots.push(aSlot);\n        } else if (slottype == 'slot-booked') {\n            aSlot.week = week;\n            aSlot.year = year;\n            BookedSlot = aSlot;\n        }\n        return {};\n    }\n\n    /**\n     * Update the indexes array tracking copied table indexes\n     * editing existing events.\n     *\n     * @param {object} root The calendar root element\n     * @method copySlots\n     */\n    function copySlots(root) {\n        SlotIndexes.length = 0;\n\n        $(SELECTORS.SLOT_DAY).each((idx, el) => {\n            if ($(el).data('slot-marked')) {\n                SlotIndexes.push([el.closest('tr').rowIndex, el.cellIndex]);\n            }\n        });\n\n        setPasteState(root);\n\n        return;\n    }\n\n     /**\n     * Set the cells from the CopiedSlotsIndexes to the current table\n     *\n     * @method pasteSlots\n     * @param {object} root The calendar root element\n     */\n      function pasteSlots(root) {\n        const table = document.getElementById(root.find(SELECTORS.SLOTS_TABLE).attr('id'));\n        SlotIndexes.forEach((idx) => {\n            let slot = table.rows[idx[0]].cells[idx[1]];\n            $(slot).data('slot-marked', 1);\n            $(slot).addClass('slot-selected', 1);\n        });\n        setSaveButtonState(root, 'post');\n\n        return;\n     }\n\n    /**\n     * Clear slots for a user per course in week and year\n     * given they are not otherwsie booked\n     *\n     * @method clearWeekSlots\n     * @param {object} root The calendar root element\n     */\n     function clearWeekSlots(root) {\n        $('td').filter(function() {\n            if ($(this).data('slot-booked') == 0) {\n                $(this).data('slot-marked', 0);\n                $(this).removeClass('slot-selected');\n            }\n        });\n        setSaveButtonState(root, 'post', true);\n\n        return;\n    }\n\n     /**\n     * Set the cells from the CopiedSlotsIndexes to the current table\n     *\n     * @method pasteSlots\n     * @param {object} root The calendar root element\n     */\n      function setPasteState(root) {\n        if (SlotIndexes.length > 0) {\n            root.find(SELECTORS.PASTE_BUTTON).addClass('slot-button-blue').removeClass('slot-button-gray');\n        } else {\n            root.find(SELECTORS.PASTE_BUTTON).addClass('slot-button-gray').removeClass('slot-button-blue');\n        }\n\n        return;\n     }\n\n     /**\n     * Set the cells from the CopiedSlotsIndexes to the current table\n     *\n     * @method setSaveButtonState\n     * @param {object} root      The calendar root element\n     * @param {string} action    The action behind the view\n     * @param {bool} forceenable Enable save button\n     */\n      function setSaveButtonState(root, action, forceenable) {\n        getUISlots(root, action);\n\n        const enabled = 'slot-button-blue';\n        const disabled = 'slot-button-gray';\n        const SaveButton = root.find(action == 'book' ? SELECTORS.BOOK_BUTTON : SELECTORS.SAVE_BUTTON);\n\n        let state = forceenable ||\n                (action == 'book' && BookedSlot !== undefined && BookedSlot.length !== 0) ||\n                (action == 'post' && Slots !== undefined && Slots.length !== 0);\n\n        SaveButton.addClass(state ? enabled : disabled).removeClass(!state ? enabled : disabled);\n        SaveButton.prop('disabled', !state);\n\n        return;\n     }\n\n     /**\n     * Set the cells from the CopiedSlotsIndexes to the current table\n     *\n     * @method setSlot\n     * @param {object} cell     The target event to the clicked slot element\n     * @param {object} root     The calendar root element\n     * @param {String} action   The target event to the clicked slot element\n     */\n      function setSlot(cell, root, action) {\n        const slotaction = action == 'book' ? 'slot-booked' : 'slot-marked';\n        const slotactionclass = action == 'book' ? 'slot-booked' : 'slot-selected';\n\n        if (!$(cell).data(slotaction)) {\n            $(cell).addClass(slotactionclass);\n        } else {\n            $(cell).removeClass(slotactionclass);\n        }\n        $(cell).data(slotaction, !$(cell).data(slotaction));\n\n        return;\n    }\n\n    return {\n        saveWeekSlots: saveWeekSlots,\n        saveBookedSlot: saveBookedSlot,\n        clearWeekSlots: clearWeekSlots,\n        pasteSlots: pasteSlots,\n        setPasteState: setPasteState,\n        setSaveButtonState: setSaveButtonState,\n        copySlots: copySlots,\n        setSlot: setSlot,\n        Slots: Slots,\n        SlotIndexes: SlotIndexes\n    };\n});"],"file":"slot_actions.min.js"}