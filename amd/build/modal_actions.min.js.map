{"version":3,"file":"modal_actions.min.js","sources":["../src/modal_actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles additional logentry modal form action.\n *\n * @module     local_booking/modal_actions\n * @author     Mustafa Hajjar (mustafa.hajjar)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as Str from 'core/str';\nimport Notification from 'core/notification';\nimport ModalEvents from 'core/modal_events';\nimport Pending from 'core/pending';\nimport Repository from 'local_booking/repository';\nimport ModalDelete from 'local_booking/modal_delete';\nimport ModalWarning from 'local_booking/modal_warning';\nimport BookingSessions from 'local_booking/events';\nimport BookingActions from 'local_booking/booking_actions';\nimport Selectors from 'local_booking/selectors';\n\n/**\n * Prepares the action for the summary modal's delete action.\n *\n * @method  confirmDeletion\n * @param   {Number} logentryId The ID of the logentry.\n * @param   {Number} userId   The user of the logentry.\n * @param   {Number} courseId The course of the logentry.\n * @param   {bool}   cascade  Whether to cascade delete linked logentries.\n * @return  {Promise}\n */\nexport const confirmDeletion = (logentryId, userId, courseId, cascade) => {\n\n    let pendingPromise = new Pending('local_booking/booking_actions:confirmDeletion');\n    let deleteStrings = [\n        {\n            key: 'deletelogentry',\n            component: 'local_booking'\n        },\n    ];\n\n    let deletePromise;\n    deleteStrings.push({\n        key: 'confirmlogentrydelete',\n        component: 'local_booking'\n    });\n\n\n    deletePromise = ModalDelete.create();\n\n    let stringsPromise = Str.get_strings(deleteStrings);\n\n    // Setup modal delete prompt form\n    let finalPromise = $.when(stringsPromise, deletePromise)\n        .then(function(strings, deleteModal) {\n            deleteModal.setRemoveOnClose(true);\n            deleteModal.setTitle(strings[0]);\n            deleteModal.setBody(strings[1]);\n\n            deleteModal.show();\n\n            deleteModal.getRoot().on(ModalEvents.save, function () {\n                let pendingPromise = new Pending('local_booking/booking_actions:initModal:deletedlogentry');\n                // eslint-disable-next-line promise/no-nesting\n                Repository.deleteLogentry(logentryId, userId, courseId, cascade)\n                    .then(function() {\n                        $('body').trigger(BookingSessions.logentryDeleted, [logentryId, false]);\n                        return;\n                    })\n                    .then(pendingPromise.resolve)\n                    .always(function() {\n                        Notification.fetchNotifications();\n                    })\n                    .catch(Notification.exception);\n            });\n\n            return deleteModal;\n        })\n        .then(function(modal) {\n            pendingPromise.resolve();\n\n            return modal;\n        })\n        .catch(Notification.exception);\n\n    return finalPromise;\n};\n\n/**\n * Displays a warning message.\n *\n * @method  showWarning\n * @param   {array}  message       The warning message to display.\n * @param   {array}  title         The modal title string.\n * @param   {array}  data          Any additional message parameters.\n * @param   {array}  options       Options array for the popup.\n * @return  {Promise}\n */\nexport const showWarning = (message, title, data = {}, options = null) => {\n\n    title ??= 'wanringtitle';\n    options ??= {};\n    options.buttonType ??= 'ok';\n    options.buttonDefault ??= 'ok';\n    options.stopExecution ??= true;\n    options.customEvent ??= null;\n\n    // Setup modal footer\n    let footer = '<button type=\"button\" class=\"btn btn-primary\" data-action=\"ok\">Ok</button>';\n    if (options.buttonType == 'yesno') {\n        footer = '<button type=\"button\" class=\"btn ' + (options.buttonDefault == 'no' ?\n            'btn-primary' : 'btn-secondary') + '\" data-action=\"no\">No</button>';\n        footer += '<button type=\"button\" class=\"btn ' + (options.buttonDefault != 'no' ?\n            'btn-primary' : 'btn-secondary') + '\" data-action=\"yes\">Yes</button>';\n    }\n\n    let pendingPromise = new Pending('local_booking/booking_actions:showWarning');\n    let warningPromise = ModalWarning.create();\n    let finalPromise;\n\n    if (options.fromComponent) {\n        let warningStrings = [\n            {\n                key: title,\n                component: 'local_booking'\n            }];\n\n        if (message) {\n            warningStrings.push({\n                key: message,\n                component: 'local_booking',\n                param: data\n            });\n        }\n\n        let stringsPromise = Str.get_strings(warningStrings).fail(Notification.exception);\n        // Setup modal warning prompt form\n        finalPromise = $.when(stringsPromise, warningPromise)\n            .then(function(strings, warningModal) {\n                warningModal.setRemoveOnClose(true);\n                warningModal.setTitle(strings[0]);\n                warningModal.setBody(strings[1]);\n                warningModal.setData(data);\n                warningModal.setCustomEvent(options.customEvent);\n                warningModal.setFooter(footer);\n                warningModal.show();\n\n                return warningModal;\n            })\n            .then(function(modal) {\n                pendingPromise.resolve();\n                return modal;\n            })\n            .catch(Notification.exception);\n    } else {\n        // Setup modal warning prompt form\n        finalPromise = $.when(warningPromise)\n            .then(function(warningModal) {\n                warningModal.setRemoveOnClose(true);\n                warningModal.setTitle(title);\n                warningModal.setBody(message);\n                warningModal.setData(data);\n                warningModal.setCustomEvent(options.customEvent);\n                warningModal.setFooter(footer);\n                warningModal.show();\n\n                return warningModal;\n            })\n            .then(function(modal) {\n                pendingPromise.resolve();\n                return modal;\n            })\n            .catch(Notification.exception);\n    }\n\n    return finalPromise;\n};\n\n/**\n * Register the listeners required to delete the logentry.\n *\n * @method  registerDelete\n * @param   {jQuery} root\n */\nexport const registerDelete = (root) => {\n\n    root.on('click', Selectors.actions.deleteLogentry, function(e) {\n        // Fetch the logentry title, and pass them into the new dialogue.\n        const target = e.target;\n        let logentrySource = root.find(Selectors.logentryitem),\n            logentryId = logentrySource.data('logentryId') ||\n                target.closest(Selectors.containers.summaryForm).dataset.logentryId,\n            userId = logentrySource.data('userId') || target.closest(Selectors.containers.summaryForm).dataset.userId,\n            courseId = logentrySource.data('courseId') || $(Selectors.wrappers.logbookwrapper).data('courseid'),\n            cascade = logentrySource.data('cascade') || target.closest(Selectors.containers.summaryForm).dataset.cascade;\n\n        confirmDeletion(logentryId, userId, courseId, cascade);\n\n        e.preventDefault();\n    });\n};\n\n/**\n * Register the listeners required to redirect to\n * exercise (assignment) grading page.\n *\n * @method  registerRedirect\n * @param   {jQuery} root\n */\nexport const registerRedirect = function(root) {\n    root.on('click', Selectors.actions.gotoFeedback, function(e) {\n        // Call redirect to assignment feedback page\n        BookingActions.gotoFeedback(root, e);\n\n        e.preventDefault();\n    });\n};\n"],"names":["confirmDeletion","logentryId","userId","courseId","cascade","deletePromise","pendingPromise","Pending","deleteStrings","key","component","push","ModalDelete","create","stringsPromise","Str","get_strings","$","when","then","strings","deleteModal","setRemoveOnClose","setTitle","setBody","show","getRoot","on","ModalEvents","save","deleteLogentry","trigger","BookingSessions","logentryDeleted","resolve","always","fetchNotifications","catch","Notification","exception","modal","message","title","data","options","buttonType","buttonDefault","stopExecution","customEvent","footer","finalPromise","warningPromise","ModalWarning","fromComponent","warningStrings","param","fail","warningModal","setData","setCustomEvent","setFooter","root","Selectors","actions","e","target","logentrySource","find","logentryitem","closest","containers","summaryForm","dataset","wrappers","logbookwrapper","preventDefault","gotoFeedback"],"mappings":"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"}