{"version":3,"file":"booking_cancel_modal.min.js","sources":["../src/booking_cancel_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the cancel a booking modal.\n *\n * @module     local_booking/booking_cancel_modal\n * @author     Mustafa Hajjar (mustafa.hajjar)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as CustomEvents from 'core/custom_interaction_events';\nimport Modal from 'core/modal';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport * as Repository from 'local_booking/repository';\nimport * as BookingEvents from 'local_booking/events';\n\nconst SELECTORS = {\n    SAVE_BUTTON: '[data-action=\"save\"]',\n    CANCEL_BUTTON: '[data-action=\"cancel\"]',\n    LOADING_ICON_CONTAINER: '[data-region=\"loading-icon-container\"]',\n};\n\n/**\n * Constructor for the Modal.\n *\n * @class\n * @param {object} root The root jQuery element for the modal\n */\nexport default class ModalCancel extends Modal {\n    static TYPE = 'local_booking-booking_cancel_modal';\n    static TEMPLATE = 'local_booking/dashboard_mybookings_cancel_modal';\n\n    constructor(root) {\n        super(root);\n        this.bookingId = 0;\n        this.saveButton = this.getFooter().find(SELECTORS.SAVE_BUTTON);\n        this.setRemoveOnClose(true);\n    }\n\n    /**\n     * Set the booking id.\n     *\n     * @method setBookingId\n     * @param {int} id The booking id\n     */\n    setBookingId(id) {\n        this.bookingId = id;\n    }\n\n    /**\n     * Save the comments and no-show information if exists\n     *\n     * @method save\n     * @return {object} A promise\n     */\n    save() {\n        let loadingContainer = this.saveButton.find(SELECTORS.LOADING_ICON_CONTAINER);\n        loadingContainer.removeClass('hidden');\n        this.disableButtons();\n\n        let comment = $(\"#comment\").val();\n\n        // Send the request data to the server for processing.\n        return Repository.cancelBooking(this.bookingId, comment, false)\n            .then(function(response) {\n                if (response.result) {\n                    $('body').trigger(BookingEvents.bookingCanceled);\n                }\n                return;\n            })\n            .always(function() {\n                loadingContainer.addClass('hidden');\n                Notification.fetchNotifications();\n                return;\n            })\n            .fail(Notification.exception);\n    }\n\n    /**\n     * Disable the buttons in the footer.\n     *\n     * @method disableButtons\n     */\n    disableButtons() {\n        this.saveButton.prop('disabled', true);\n    }\n\n    /**\n     * Set up all of the event handling for the modal.\n     *\n     * @method registerEventListeners\n     */\n    registerEventListeners() {\n        // Apply parent event listeners.\n        super.registerEventListeners(this);\n\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.SAVE_BUTTON, function(e, data) {\n            const saveEvent = $.Event(ModalEvents.save);\n            this.getRoot().trigger(saveEvent, this);\n\n            if (!saveEvent.isDefaultPrevented()) {\n                this.save();\n                this.hide();\n                data.originalEvent.preventDefault();\n            }\n        }.bind(this));\n\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.CANCEL_BUTTON, function(e, data) {\n            const cancelEvent = $.Event(ModalEvents.cancel);\n            this.getRoot().trigger(cancelEvent, this);\n\n            if (!cancelEvent.isDefaultPrevented()) {\n                this.hide();\n                data.originalEvent.preventDefault();\n            }\n        }.bind(this));\n    }\n}\n\nModalCancel.registerModalType();"],"names":["SELECTORS","ModalCancel","Modal","constructor","root","bookingId","saveButton","this","getFooter","find","setRemoveOnClose","setBookingId","id","save","loadingContainer","removeClass","disableButtons","comment","val","Repository","cancelBooking","then","response","result","trigger","BookingEvents","bookingCanceled","always","addClass","fetchNotifications","fail","Notification","exception","prop","registerEventListeners","getModal","on","CustomEvents","events","activate","e","data","saveEvent","$","Event","ModalEvents","getRoot","isDefaultPrevented","hide","originalEvent","preventDefault","bind","cancelEvent","cancel","registerModalType"],"mappings":"83DAgCMA,sBACW,uBADXA,wBAEa,yBAFbA,iCAGsB,+CASPC,oBAAoBC,eAIrCC,YAAYC,YACFA,WACDC,UAAY,OACZC,WAAaC,KAAKC,YAAYC,KAAKT,4BACnCU,kBAAiB,GAS1BC,aAAaC,SACJP,UAAYO,GASrBC,WACQC,iBAAmBP,KAAKD,WAAWG,KAAKT,kCAC5Cc,iBAAiBC,YAAY,eACxBC,qBAEDC,SAAU,mBAAE,YAAYC,aAGrBC,WAAWC,cAAcb,KAAKF,UAAWY,SAAS,GACpDI,MAAK,SAASC,UACPA,SAASC,4BACP,QAAQC,QAAQC,cAAcC,oBAIvCC,QAAO,WACJb,iBAAiBc,SAAS,gCACbC,wBAGhBC,KAAKC,sBAAaC,WAQ3BhB,sBACSV,WAAW2B,KAAK,YAAY,GAQrCC,+BAEUA,uBAAuB3B,WAExB4B,WAAWC,GAAGC,aAAaC,OAAOC,SAAUvC,sBAAuB,SAASwC,EAAGC,YAC1EC,UAAYC,gBAAEC,MAAMC,sBAAYhC,WACjCiC,UAAUtB,QAAQkB,UAAWnC,MAE7BmC,UAAUK,4BACNlC,YACAmC,OACLP,KAAKQ,cAAcC,mBAEzBC,KAAK5C,YAEF4B,WAAWC,GAAGC,aAAaC,OAAOC,SAAUvC,wBAAyB,SAASwC,EAAGC,YAC5EW,YAAcT,gBAAEC,MAAMC,sBAAYQ,aACnCP,UAAUtB,QAAQ4B,YAAa7C,MAE/B6C,YAAYL,4BACRC,OACLP,KAAKQ,cAAcC,mBAEzBC,KAAK5C,4DAvFMN,mBACH,sDADGA,uBAEC,mDAyFtBA,YAAYqD"}