{"version":3,"file":"calendar_view_manager.min.js","sources":["../src/calendar_view_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handler booking view changes.\n * Improvised from core_calendar.\n *\n * @module     local_booking/calendar_view_manager\n * @author     Mustafa Hajjar (mustafa.hajjar)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport SlotActions from 'local_booking/slot_actions';\nimport ModalActions from 'local_booking/modal_actions';\nimport * as Repository from 'local_booking/repository';\nimport * as Selectors from 'local_booking/selectors';\n\n/**\n * Handle changes to the current calendar view.\n *\n * @method  changeWeek\n * @param   {object} root The container element\n * @param   {string} url  The calendar url to be shown\n * @param   {number} year Year\n * @param   {number} week week\n * @param   {number} time The timestamp of the beginning current week\n * @param   {number} courseId The id of the course associated with the calendar shown\n * @return  {promise}\n */\nexport async function changeWeek(root, url, year, week, time, courseId) {\n\n    // Check if the calendar is dirty and suggest saving\n    if (SlotActions.isDirty()) {\n        ModalActions.showWarning(\n            'slotsnotsaved',\n            'slotsnotsavedtitle',\n            { url, year, week, time, courseId },\n            {fromComponent: true, buttonType: 'yesno'});\n        SlotActions.clean();\n    } else {\n        // Go to the requested week\n        return renderCalendar(root, year, week, time, courseId)\n            .then((...args) => {\n                if (url.length && url !== '#') {\n                    window.history.pushState({}, '', url);\n                }\n                return args;\n            });\n    }\n    return true;\n}\n\n/**\n * Renders the action bar\n *\n * @param {object} root The root element.\n * @param   {number} year Year\n * @param   {number} week week\n * @param   {number} time The timestamp of the beginning current week\n * @param   {number} courseId The id of the course associated with the calendar shown\n * @method  renderActionbar\n */\nasync function renderCalendar(root, year, week, time, courseId) {\n    const weekviewTarget = root.find(Selectors.wrappers.weekwrapper);\n    const weekviewTemplate = weekviewTarget.attr('data-template');\n    const actionbarTarget = root.find(Selectors.wrappers.actionbarwrapper);\n    const actionbarTemplate = actionbarTarget.attr('data-template');\n\n    let exportContext = await refreshWeekContent(root, year, week, time, courseId);\n\n    // Render action bar\n    Templates.render(actionbarTemplate, exportContext)\n        .then((html, js) => {\n            return Templates.replaceNode(actionbarTarget, html, js);\n        })\n        .fail(Notification.exception);\n\n    // Render week's calendar\n    Templates.render(weekviewTemplate, exportContext)\n        .then((html, js) => {\n            return Templates.replaceNode(weekviewTarget, html, js);\n        }).always(() => {\n            SlotActions.setPasteState(root);\n            stopLoading(root);\n        })\n        .fail(Notification.exception);\n\n    return;\n}\n\n/**\n * Refresh the week content.\n *\n * @method  refreshWeekContent\n * @param   {object} root The root element.\n * @param   {number} year Year\n * @param   {number} week week\n * @param   {number} time The timestamp of the beginning current week\n * @param   {number} courseId The id of the course associated with the calendar shown\n * @return  {promise}\n */\nconst refreshWeekContent = (root, year, week, time, courseId) => {\n    startLoading(root);\n\n    const target = $(Selectors.wrappers.calendarwrapper),\n          action = target.data('action'),\n          view = target.data('viewall') ? 'all' : 'user',\n          studentId = target.data('student-id'),\n          exerciseId = target.data('exercise-id');\n    time = time == 0 ? Date.now() / 1000 : time;\n    M.util.js_pending([root.get('id'), year, week, courseId].join('-'));\n\n    let actionbarContext = Repository.getCalendarWeekData(year, week, time, courseId, action, view, studentId, exerciseId)\n        .then(context => {\n            return context;\n        })\n        .always(() => {\n            M.util.js_complete([root.get('id'), year, week, courseId].join('-'));\n        })\n        .fail(Notification.exception);\n\n     return actionbarContext;\n};\n\n/**\n * Set the element state to loading.\n *\n * @method  startLoading\n * @param   {object} root The container element\n */\n export const startLoading = (root) => {\n    const loadingIconContainer = root.find(Selectors.containers.loadingIcon);\n    loadingIconContainer.removeClass('hidden');\n};\n\n/**\n * Remove the loading state from the element.\n *\n * @method  stopLoading\n * @param   {object} root The container element\n */\nexport const stopLoading = (root) => {\n    const loadingIconContainer = root.find(Selectors.containers.loadingIcon);\n    loadingIconContainer.addClass('hidden');\n};\n"],"names":["root","url","year","week","time","courseId","SlotActions","isDirty","weekviewTarget","find","Selectors","wrappers","weekwrapper","weekviewTemplate","attr","actionbarTarget","actionbarwrapper","actionbarTemplate","exportContext","refreshWeekContent","render","then","html","js","Templates","replaceNode","fail","Notification","exception","always","setPasteState","stopLoading","renderCalendar","length","window","history","pushState","args","showWarning","fromComponent","buttonType","clean","startLoading","target","calendarwrapper","action","data","view","studentId","exerciseId","Date","now","M","util","js_pending","get","join","Repository","getCalendarWeekData","context","js_complete","containers","loadingIcon","removeClass","addClass"],"mappings":";;;;;;;;;gGA6CiCA,KAAMC,IAAKC,KAAMC,KAAMC,KAAMC,cAGtDC,sBAAYC,gCA8BUP,KAAME,KAAMC,KAAMC,KAAMC,gBAC5CG,eAAiBR,KAAKS,KAAKC,UAAUC,SAASC,aAC9CC,iBAAmBL,eAAeM,KAAK,iBACvCC,gBAAkBf,KAAKS,KAAKC,UAAUC,SAASK,kBAC/CC,kBAAoBF,gBAAgBD,KAAK,qBAE3CI,oBAAsBC,mBAAmBnB,KAAME,KAAMC,KAAMC,KAAMC,oCAG3De,OAAOH,kBAAmBC,eAC/BG,MAAK,CAACC,KAAMC,KACFC,mBAAUC,YAAYV,gBAAiBO,KAAMC,MAEvDG,KAAKC,sBAAaC,mCAGbR,OAAOP,iBAAkBK,eAC9BG,MAAK,CAACC,KAAMC,KACFC,mBAAUC,YAAYjB,eAAgBc,KAAMC,MACpDM,QAAO,2BACMC,cAAc9B,MAC1B+B,YAAY/B,SAEf0B,KAAKC,sBAAaC,WA5CZI,CAAehC,KAAME,KAAMC,KAAMC,KAAMC,UACzCgB,MAAK,WACEpB,IAAIgC,QAAkB,MAARhC,KACdiC,OAAOC,QAAQC,UAAU,GAAI,GAAInC,mCAF/BoC,6CAAAA,kCAICA,+BAbFC,YACT,gBACA,qBACA,CAAErC,IAAAA,IAAKC,KAAAA,KAAMC,KAAAA,KAAMC,KAAAA,KAAMC,SAAAA,UACzB,CAACkC,eAAe,EAAMC,WAAY,gCAC1BC,eAWT,2YAoDLtB,mBAAqB,CAACnB,KAAME,KAAMC,KAAMC,KAAMC,YAChDqC,aAAa1C,YAEP2C,QAAS,mBAAEjC,UAAUC,SAASiC,iBAC9BC,OAASF,OAAOG,KAAK,UACrBC,KAAOJ,OAAOG,KAAK,WAAa,MAAQ,OACxCE,UAAYL,OAAOG,KAAK,cACxBG,WAAaN,OAAOG,KAAK,sBAC/B1C,KAAe,GAARA,KAAY8C,KAAKC,MAAQ,IAAO/C,KACvCgD,EAAEC,KAAKC,WAAW,CAACtD,KAAKuD,IAAI,MAAOrD,KAAMC,KAAME,UAAUmD,KAAK,MAEvCC,WAAWC,oBAAoBxD,KAAMC,KAAMC,KAAMC,SAAUwC,OAAQE,KAAMC,UAAWC,YACtG5B,MAAKsC,SACKA,UAEV9B,QAAO,KACJuB,EAAEC,KAAKO,YAAY,CAAC5D,KAAKuD,IAAI,MAAOrD,KAAMC,KAAME,UAAUmD,KAAK,SAElE9B,KAAKC,sBAAaC,YAWbc,aAAgB1C,OACGA,KAAKS,KAAKC,UAAUmD,WAAWC,aACvCC,YAAY,oDASxBhC,YAAe/B,OACKA,KAAKS,KAAKC,UAAUmD,WAAWC,aACvCE,SAAS"}