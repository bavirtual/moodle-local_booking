{"version":3,"file":"booking_actions.min.js","sources":["../src/booking_actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles session booking and logentry operations\n * including CRUD and UI events.\n *\n * @module     local_booking/booking_actions\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/str',\n    'core/notification',\n    'core/custom_interaction_events',\n    'core/modal',\n    'core/modal_registry',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/pending',\n    'local_booking/modal_logentry_form',\n    'local_booking/repository',\n    'local_booking/events',\n    'local_booking/modal_delete',\n    'local_booking/selectors',\n    'local_booking/booking_view_manager',\n],\nfunction(\n    $,\n    Str,\n    Notification,\n    CustomEvents,\n    Modal,\n    ModalRegistry,\n    ModalFactory,\n    ModalEvents,\n    Pending,\n    ModalLogentryForm,\n    Repository,\n    BookingSessions,\n    ModalDelete,\n    BookingSelectors,\n    ViewManager,\n) {\n\n    /**\n     * Cancel a specific booking and trigger update UI event.\n     *\n     * @method  cancelBooking\n     * @param   {object} root     The My Bookings root element\n     * @param   {object} e        The click event on the Cancel button\n     * @param   {string} comment  The click event on the Cancel button\n     * @param   {string} noshow   Whether the cancellation is a no-show or instructor initiated\n     * @return  {object} The create modal promise\n     */\n    var cancelBooking = (root, e, comment, noshow) => {\n        ViewManager.startLoading(root);\n\n        var target = e.target;\n        const bookingId = target.dataset.bookingid;\n\n        // Send the request data to the server for processing.\n        return Repository.cancelBooking(bookingId, comment, noshow)\n            .then(function(response) {\n                if (response.validationerror) {\n                    // eslint-disable-next-line no-alert\n                    alert(Str.get_string('errorlogentrycancel', 'local_booking'));\n                }\n                return;\n            })\n            .always(function() {\n                $('body').trigger(BookingSessions.canceled, [root, false]);\n                Notification.fetchNotifications();\n                ViewManager.stopLoading(root);\n            })\n            .fail(Notification.exception);\n    };\n\n    /**\n     * Redirect to exercise (assignment) grading page.\n     *\n     * @method  gotoFeedback\n     * @param   {jQuery} root\n     */\n     var gotoFeedback = (root) => {\n        // Fetch the exercise and user id and redirect to assignment submission & grading\n        let LogentrySource = root.find(BookingSelectors.logentryitem),\n            courseId, exerciseId, sessionPassed, userId;\n\n        courseId = LogentrySource.data('courseId');\n        exerciseId = LogentrySource.data('exerciseId');\n        sessionPassed = 1;\n        userId = LogentrySource.data('userId');\n\n        // Trigger redirect to feedback\n        $('body').trigger(BookingSessions.gotoFeedback, [exerciseId]);\n\n        // Redirect to the grading and feedback page\n        location.href = M.cfg.wwwroot + '/local/booking/assign.php?courseid=' + courseId +\n                '&exeid=' + exerciseId + '&rownum=0&userid=' + userId + '&passed=' + sessionPassed;\n    };\n\n    return {\n        gotoFeedback: gotoFeedback,\n        cancelBooking: cancelBooking\n    };\n});\n"],"names":["define","$","Str","Notification","CustomEvents","Modal","ModalRegistry","ModalFactory","ModalEvents","Pending","ModalLogentryForm","Repository","BookingSessions","ModalDelete","BookingSelectors","ViewManager","gotoFeedback","root","courseId","exerciseId","sessionPassed","userId","LogentrySource","find","logentryitem","data","trigger","location","href","M","cfg","wwwroot","cancelBooking","e","comment","noshow","startLoading","bookingId","target","dataset","bookingid","then","response","validationerror","alert","get_string","always","canceled","fetchNotifications","stopLoading","fail","exception"],"mappings":";;;;;;;;;AAwBAA,OAAO,gCAAA,CACH,SACA,WACA,oBACA,iCACA,aACA,sBACA,qBACA,oBACA,eACA,oCACA,2BACA,uBACA,6BACA,0BACA,uCAEJ,SACIC,EACAC,IACAC,aACAC,aACAC,MACAC,cACAC,aACAC,YACAC,QACAC,kBACAC,WACAC,gBACAC,YACAC,iBACAC,aA4DA,MAAO,CACHC,aAnBiBC,OAEjB,IACIC,SAAUC,WAAYC,cAAeC,OADrCC,eAAiBL,KAAKM,KAAKT,iBAAiBU,cAGhDN,SAAWI,eAAeG,KAAK,YAC/BN,WAAaG,eAAeG,KAAK,cACjCL,cAAgB,EAChBC,OAASC,eAAeG,KAAK,UAG7BxB,EAAE,QAAQyB,QAAQd,gBAAgBI,aAAc,CAACG,aAGjDQ,SAASC,KAAOC,EAAEC,IAAIC,QAAU,sCAAwCb,SAChE,UAAYC,WAAa,oBAAsBE,OADvCQ,WAC0E,EAK1FG,cAjDgBA,CAACf,KAAMgB,EAAGC,QAASC,UACnCpB,YAAYqB,aAAanB,MAGzB,MAAMoB,UADOJ,EAAEK,OACUC,QAAQC,UAGjC,OAAO7B,WAAWqB,cAAcK,UAAWH,QAASC,QAC/CM,MAAK,SAASC,UACPA,SAASC,iBAETC,MAAM1C,IAAI2C,WAAW,sBAAuB,iBAGpD,IACCC,QAAO,WACJ7C,EAAE,QAAQyB,QAAQd,gBAAgBmC,SAAU,CAAC9B,MAAM,IACnDd,aAAa6C,qBACbjC,YAAYkC,YAAYhC,KAC3B,IACAiC,KAAK/C,aAAagD,UAAU,EA+BzC"}