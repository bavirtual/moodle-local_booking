{"version":3,"file":"user_profile.min.js","sources":["../src/user_profile.js"],"sourcesContent":["/* eslint-disable no-bitwise */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the message preference page.\n *\n * @module     local_booking/administration\n * @author     Mustafa Hajjar (mustafa.hajjar)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/str',\n    'core/notification',\n    'local_booking/repository',\n    'local_booking/selectors'\n],\nfunction(\n    $,\n    Str,\n    Notification,\n    Repository,\n    Selectors\n) {\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @method registerEventListeners\n     * @param  {object} root    The root element.\n     */\n    const registerEventListeners = function(root) {\n\n        var userProfile = root.find(Selectors.wrappers.userprofilewrapper),\n        courseId = userProfile.data('courseid'),\n        userId = userProfile.data('userid');\n\n        // Handle endorsement toggle clicks\n        $('#endorsed').click(function() {\n            processSetting(courseId, userId, 'endorsed', this.checked, root);\n        });\n\n        // Handle suspension toggle clicks\n        $('#suspended').click(function() {\n            processSetting(courseId, userId, 'suspend', this.checked);\n        });\n\n        // Handle on-hold toggle clicks\n        $('#onhold').click(function() {\n            // Add to OnHold group then trigger Keep Active if successful\n            processSetting(courseId, userId, 'onhold', this.checked, root)\n                .then((response) => {\n                    if (0 !== response) {\n                        // Toggle 'Keep Alive' so the student is not automatically placed on-hold again\n                        $('#keepactive').prop(\"checked\", !this.checked);\n                        return processSetting(courseId, userId, 'keepactive', !this.checked, root);\n                    }\n                    return true;\n                })\n                .fail(Notification.exception);\n        });\n\n        // Handle keep active toggle clicks\n        $('#keepactive').click(function() {\n            processSetting(courseId, userId, 'keepactive', this.checked, root);\n        });\n\n        // Handle restriction override toggle clicks\n        $('#overrideminslotperiod').click(function() {\n            processSetting(courseId, userId, 'overrideminslotperiod', this.checked, root);\n        });\n\n        // Handle show cross-course bookings toggle clicks\n        $('#xcoursebookings').click(function() {\n            processSetting(courseId, userId, 'xcoursebookings', this.checked, root);\n        });\n\n        // Handle save comment click\n        $('#save_comment_button').click(function() {\n            updateComment(courseId, userId, root);\n        });\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @method processSetting\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} key         The key of the setting.\n     * @param  {string} value       Setting value.\n     * @param  {object} root        The root element.\n     */\n    const processSetting = function(courseId, userId, key, value, root) {\n\n        // Show progressing icon\n        startLoading($('#' + key + '-region'));\n\n        let response;\n        // Process the different toggle actions\n        switch (key) {\n            case 'endorsed':\n                // Process student endorsement and handle UI\n                response = setEndorsement(courseId, userId, value, root);\n                break;\n            case 'xcoursebookings':\n                // Process availability override in user preferences and handle UI, site level courseid=1\n                response = processUserPreference(key, value, 1, userId, key);\n                break;\n            case 'overrideminslotperiod':\n                // Process availability override in user preferences and handle UI\n                response = processProgressFlag(key, value, courseId, userId, key);\n                break;\n            case 'suspend':\n                // Toggle enrolment status suspension on/off and handle UI\n                response = processSuspendedStatus(value, courseId, userId);\n                break;\n            case 'onhold':\n            case 'keepactive':\n                // Process keep active in user preferences and handle UI\n                response = processGroup(key, value, courseId, userId, root);\n                break;\n        }\n\n        // Stop showing progressing icon\n        stopLoading($('#' + key + '-region'));\n\n        return response;\n    };\n\n    /**\n     * Set the endorsed message.\n     *\n     * @method setEndorsement\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} endorse     Endorse true/false.\n     * @param  {object} root        The root element.\n     */\n     const setEndorsement = function(courseId, userId, endorse, root) {\n        // Get endorsement information (endorser, date, and message) from template\n        let userProfile = root.find(Selectors.wrappers.userprofilewrapper),\n        endorserName = userProfile.data('endorsername'),\n        endorserId = userProfile.data('endorserid'),\n        endorseDate = new Date(),\n        endorsedOn = endorseDate.toDateString(),\n        endorseDateTS = Math.round(endorseDate.getTime() / 1000),\n        endorsestr = endorse ? 'endorsementmsg' : 'skilltestendorsed';\n\n        // Process endorsement message\n        let endorseMsgPromise = Str.get_string(endorsestr, 'local_booking', {endorsername: endorserName, endorsedate: endorsedOn});\n        endorseMsgPromise.then(function(message) {\n            // Set endorsement message\n            $('#endorsement-label').html(message);\n            // Show/hide recommendation letter link\n            if (endorse) {\n                $('#endorsement-letter').removeClass('hidden');\n            } else {\n                $('#endorsement-letter').addClass('hidden');\n            }\n            return message;\n        })\n        .fail(Notification.exception);\n\n        // Set endorsement object\n        const endorsement = {endorsed: endorse, endorserid: endorserId, endorsedate: endorseDateTS};\n\n        // Process endorsement and notification to be setEndorsement\n        let result = processProgressFlag('endorsement', JSON.stringify(endorsement), courseId, userId, 'endorsed');\n        result &= processProgressFlag('notifications.endorsement', endorse, courseId, userId);\n\n        return result;\n    };\n\n    /**\n     * Process student progress update.\n     *\n     * @method processProgressFlag\n     * @param  {string} progressKey The progress key.\n     * @param  {string} value       The value data.\n     * @param  {string} courseId    The associated course id.\n     * @param  {string} studentId   The student.\n     * @param  {string} element     The element to handle GUI.\n     * @return {bool}\n     */\n     const processProgressFlag = function(progressKey, value, courseId, studentId, element = null) {\n\n        return Repository.setProgressFlag(progressKey, value, courseId, studentId)\n        .then(function(result) {\n            return result.saved;\n        })\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            if (element !== null) {\n                $('#' + element).prop('checked', !$('#' + element).prop('checked'));\n            }\n\n            return true;\n        });\n    };\n\n    /**\n     * Process the user setting preference depending on the passed\n     * preference and value pairs.\n     *\n     * @method processUserPreference\n     * @param  {string} preference  The preference key of the setting.\n     * @param  {string} value       The value data.\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} element     The element to handle GUI.\n     * @return {bool}\n     */\n     const processUserPreference = function(preference, value, courseId, userId, element) {\n\n        return Repository.setUserPreferences(preference, value, courseId, userId)\n        .then(function(result) {\n            return result.saved;\n        })\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            $('#' + element).prop('checked', !$('#' + element).prop('checked'));\n            return true;\n        });\n    };\n\n    /**\n     * Process the user suspension status.\n     *\n     * @method processSuspendedStatus\n     * @param  {bool}   suspend     Suspend true/false.\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @return {bool}\n     */\n     const processSuspendedStatus = function(suspend, courseId, userId) {\n        // eslint-disable-next-line promise/valid-params\n        return Repository.updateSuspendedStatus(suspend, courseId, userId)\n        .then()\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            $('#suspended').prop('checked', !$('#suspended').prop('checked'));\n            return true;\n        });\n    };\n\n    /**\n     * Process the user group membership status on-hold and keep active.\n     *\n     * @method processGroup\n     * @param  {string} key      The key of the setting.\n     * @param  {bool}   add      Join or leave true/false.\n     * @param  {string} courseId The course id for suspension.\n     * @param  {string} userId   The user id to be suspended.\n     * @param  {object} root     The root element.\n     * @return {bool}\n     */\n    const processGroup = function(key, add, courseId, userId, root) {\n\n        // Get the group name from the template\n        const userProfile = root.find(Selectors.wrappers.userprofilewrapper),\n        groupName = userProfile.data(key + 'group');\n\n        // Add or remove the user from the group\n        return Repository.groupAddRemove(courseId, userId, groupName, add)\n            .then(function(response) {\n                return response.result;\n            })\n            .always(function() {\n                Notification.fetchNotifications();\n            })\n            .fail(function(ex) {\n                Notification.exception(ex);\n                // Handle toggle failure\n                $('#' + key).prop('checked', !$('#' + key).prop('checked'));\n                return false;\n            });\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {object} root        The root element.\n     * @method processSetting\n     * @return {bool}\n     */\n     const updateComment = function(courseId, userId, root) {\n\n        // Show progressing icon\n        startLoading(root);\n        const comment = $('#comment').val();\n\n        // Save the comment\n        return Repository.updateProfileComment(courseId, userId, comment)\n        .then(function(response) {\n            // Add success status element if necessary\n            let result = response.result;\n            // eslint-disable-next-line promise/no-nesting\n            Str.get_string((result ? 'commentsaved' : 'commentnotsaved'), 'local_booking').then(function(string) {\n                // Show the status for a little bit\n                $('#status').addClass('comment-status-' + (result ? 'success' : 'error'));\n                $('#status').removeClass('comment-status-' + (!result ? 'success' : 'error'));\n                $('#status').text(string).slideDown(1000).delay(2000).slideUp(1000);\n                return true;\n            })\n            .fail(Notification.exception);\n            return false;\n        })\n        .always(function() {\n            Notification.fetchNotifications();\n            // Stop showing progressing icon\n            stopLoading(root);\n        })\n        .fail(Notification.exception);\n    };\n\n    /**\n     * Set the element state to loading.\n     *\n     * @method  startLoading\n     * @param   {object} root The container element\n     */\n    const startLoading = (root) => {\n        const loadingIconContainer = root.find(Selectors.containers.loadingIcon);\n        loadingIconContainer.removeClass('hidden');\n    };\n\n    /**\n     * Unset the element state of loading.\n     *\n     * @method  stopLoading\n     * @param   {object} root The container element\n     */\n    const stopLoading = (root) => {\n        const loadingIconContainer = root.find(Selectors.containers.loadingIcon);\n        loadingIconContainer.addClass('hidden');\n    };\n\n    return {\n        init: function(root) {\n            root = $(root);\n            registerEventListeners(root);\n        }\n    };\n});\n"],"names":["define","$","Str","Notification","Repository","Selectors","processSetting","courseId","userId","key","value","root","response","startLoading","setEndorsement","processUserPreference","processProgressFlag","processSuspendedStatus","processGroup","stopLoading","endorse","userProfile","find","wrappers","userprofilewrapper","endorserName","data","endorserId","endorseDate","Date","endorsedOn","toDateString","endorseDateTS","Math","round","getTime","endorsestr","get_string","endorsername","endorsedate","then","message","html","removeClass","addClass","fail","exception","endorsement","endorsed","endorserid","result","JSON","stringify","progressKey","studentId","element","setProgressFlag","saved","always","fetchNotifications","ex","prop","preference","setUserPreferences","suspend","updateSuspendedStatus","add","groupName","groupAddRemove","updateComment","comment","val","updateProfileComment","string","text","slideDown","delay","slideUp","containers","loadingIcon","init","click","this","checked","registerEventListeners"],"mappings":"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"}