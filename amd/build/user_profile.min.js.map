{"version":3,"file":"user_profile.min.js","sources":["../src/user_profile.js"],"sourcesContent":["/* eslint-disable no-bitwise */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the message preference page.\n *\n * @module     local_booking/administration\n * @author     Mustafa Hajjar (mustafa.hajjar)\n * @copyright  BAVirtual.co.uk Â© 2023\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/str',\n    'core/notification',\n    'local_booking/repository',\n    'local_booking/selectors'\n],\nfunction(\n    $,\n    Str,\n    Notification,\n    Repository,\n    Selectors\n) {\n\n    /**\n     * Set the endorsed message.\n     *\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} endorse     Endorse true/false.\n     * @param  {object} root        The root element.\n     * @method setEndorsement\n     */\n     const setEndorsement = function(courseId, userId, endorse, root) {\n        // Get endorsement information (endorser, date, and message) from template\n        let userProfile = root.find(Selectors.wrappers.userprofilewrapper),\n        endorsername = userProfile.data('endorsername'),\n        endorser = userProfile.data('endorser'),\n        endorsedate = new Date(),\n        endorsedon = endorsedate.toDateString(),\n        endorsedatets = Math.round(endorsedate.getTime() / 1000),\n        endorsestr = endorse ? 'endorsementmgs' : 'skilltestendorse';\n\n        // Process endorsement message\n        let endorsemsgPromise = Str.get_string(endorsestr, 'local_booking', {endorser: endorsername, endorsedate: endorsedon});\n        endorsemsgPromise.then(function(message) {\n            // Set endorsement message\n            $('#endorsement-label').html(message);\n            // Show/hide recommendation letter link\n            if (endorse) {\n                $('#endorsement-letter').removeClass('hidden');\n            } else {\n                $('#endorsement-letter').addClass('hidden');\n            }\n            return message;\n        })\n        .fail(Notification.exception);\n\n         let result = endorsemsgPromise.trim().length !== 0;\n\n        // Persist endorsement in user preferences\n        result &= processUserPreference('endorse', endorse, courseId, userId, 'endorse');\n        result &= processUserPreference('endorser', endorse ? endorser : '', courseId, userId, 'endorse');\n        result &= processUserPreference('endorsedate', endorse ? endorsedatets : '', courseId, userId, 'endorse');\n        result &= processUserPreference('endorsenotify', endorse, courseId, userId, 'endorse');\n\n         return result;\n    };\n\n    /**\n     * Process the user setting preference depending on the passed\n     * preference and value pairs.\n     *\n     * @param  {string} preference  The preference key of the setting.\n     * @param  {string} value       The value data.\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} element     The element to handle GUI.\n     * @method processUserPreference\n     * @return {bool}\n     */\n     const processUserPreference = function(preference, value, courseId, userId, element) {\n\n        return Repository.setUserPreferences(preference, value, courseId, userId)\n        .then(function(result) {\n            return result.saved;\n        })\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            $('#' + element).prop('checked', !$('#' + element).prop('checked'));\n            return true;\n        });\n    };\n\n    /**\n     * Process the user suspension status.\n     *\n     * @param  {bool}   suspend     Suspend true/false.\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @method processSuspendedStatus\n     * @return {bool}\n     */\n     const processSuspendedStatus = function(suspend, courseId, userId) {\n        // eslint-disable-next-line promise/valid-params\n        return Repository.updateSuspendedStatus(suspend, courseId, userId)\n        .then()\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            $('#suspended').prop('checked', !$('#suspended').prop('checked'));\n            return true;\n        });\n    };\n\n    /**\n     * Process the user group membership status on-hold and keep active.\n     *\n     * @param  {string} key      The key of the setting.\n     * @param  {bool}   add      Join or leave true/false.\n     * @param  {string} courseId The course id for suspension.\n     * @param  {string} userId   The user id to be suspended.\n     * @param  {object} root     The root element.\n     * @method processGroup\n     * @return {bool}\n     */\n    const processGroup = function(key, add, courseId, userId, root) {\n\n        // Get the group name from the template\n        const userProfile = root.find(Selectors.wrappers.userprofilewrapper),\n        groupName = userProfile.data(key + 'group');\n\n        // Add or remove the user from the group\n        return Repository.groupAddRemove(courseId, userId, groupName, add)\n            .then(function(response) {\n                return response.result;\n            })\n            .always(function() {\n                Notification.fetchNotifications();\n            })\n            .fail(function(ex) {\n                Notification.exception(ex);\n                // Handle toggle failure\n                $('#' + key).prop('checked', !$('#' + key).prop('checked'));\n                return false;\n            });\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} key         The key of the setting.\n     * @param  {string} value       Setting value.\n     * @param  {object} root        The root element.\n     * @method processSetting\n     */\n     const processSetting = function(courseId, userId, key, value, root) {\n\n        // Show progressing icon\n        startLoading($('#' + key + '-region'));\n\n        let response;\n        // Process the different toggle actions\n        switch (key) {\n            case 'endorse':\n                // Process student endorsement and handle UI\n                response = setEndorsement(courseId, userId, value, root);\n                break;\n            case 'xcoursebookings':\n                // Process availability override in user preferences and handle UI, site level courseid=1\n                response = processUserPreference(key, value, 1, userId, key);\n                break;\n            case 'availabilityoverride':\n                // Process availability override in user preferences and handle UI\n                response = processUserPreference(key, value, courseId, userId, key);\n                break;\n            case 'suspend':\n                // Toggle enrolment status suspension on/off and handle UI\n                response = processSuspendedStatus(value, courseId, userId);\n                break;\n            case 'onhold':\n            case 'keepactive':\n                // Process keep active in user preferences and handle UI\n                response = processGroup(key, value, courseId, userId, root);\n                break;\n        }\n\n        // Stop showing progressing icon\n        stopLoading($('#' + key + '-region'));\n\n        return response;\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {object} root        The root element.\n     * @method processSetting\n     * @return {bool}\n     */\n     const updateComment = function(courseId, userId, root) {\n\n        // Show progressing icon\n        startLoading(root);\n        const comment = $('#comment').val();\n\n        // Save the comment\n        return Repository.updateProfileComment(courseId, userId, comment)\n        .then(function(response) {\n            // Add success status element if necessary\n            let result = response.result;\n            // eslint-disable-next-line promise/no-nesting\n            Str.get_string((result ? 'commentsaved' : 'commentnotsaved'), 'local_booking').then(function(string) {\n                // Show the status for a little bit\n                $('#status').addClass('comment-status-' + (result ? 'success' : 'error'));\n                $('#status').removeClass('comment-status-' + (!result ? 'success' : 'error'));\n                $('#status').text(string).slideDown(1000).delay(2000).slideUp(1000);\n                return true;\n            })\n            .fail(Notification.exception);\n            return false;\n        })\n        .always(function() {\n            Notification.fetchNotifications();\n            // Stop showing progressing icon\n            stopLoading(root);\n        })\n        .fail(Notification.exception);\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @param  {object} root    The root element.\n     * @method registerEventListeners\n     */\n    const registerEventListeners = function(root) {\n\n        var userProfile = root.find(Selectors.wrappers.userprofilewrapper),\n        courseId = userProfile.data('courseid'),\n        userId = userProfile.data('userid');\n\n        // Handle endorsement toggle clicks\n        $('#endorse').click(function() {\n            processSetting(courseId, userId, 'endorse', this.checked, root);\n        });\n\n        // Handle suspension toggle clicks\n        $('#suspended').click(function() {\n            processSetting(courseId, userId, 'suspend', this.checked);\n        });\n\n        // Handle on-hold toggle clicks\n        $('#onhold').click(function() {\n            // Add to OnHold group then trigger Keep Active if successful\n            processSetting(courseId, userId, 'onhold', this.checked, root)\n                .then((response) => {\n                    if (0 !== response) {\n                        // Toggle 'Keep Alive' so the student is not automatically placed on-hold again\n                        $('#keepactive').prop(\"checked\", !this.checked);\n                        return processSetting(courseId, userId, 'keepactive', !this.checked, root);\n                    }\n                    return true;\n                })\n                .fail(Notification.exception);\n        });\n\n        // Handle keep active toggle clicks\n        $('#keepactive').click(function() {\n            processSetting(courseId, userId, 'keepactive', this.checked, root);\n        });\n\n        // Handle restriction override toggle clicks\n        $('#availabilityoverride').click(function() {\n            processSetting(courseId, userId, 'availabilityoverride', this.checked, root);\n        });\n\n        // Handle show cross-course bookings toggle clicks\n        $('#xcoursebookings').click(function() {\n            processSetting(courseId, userId, 'xcoursebookings', this.checked, root);\n        });\n\n        // Handle save comment click\n        $('#save_comment_button').click(function() {\n            updateComment(courseId, userId, root);\n        });\n    };\n\n    /**\n     * Set the element state to loading.\n     *\n     * @method  startLoading\n     * @param   {object} root The container element\n     */\n    const startLoading = (root) => {\n        const loadingIconContainer = root.find(Selectors.containers.loadingIcon);\n        loadingIconContainer.removeClass('hidden');\n    };\n\n    /**\n     * Unset the element state of loading.\n     *\n     * @method  stopLoading\n     * @param   {object} root The container element\n     */\n    const stopLoading = (root) => {\n        const loadingIconContainer = root.find(Selectors.containers.loadingIcon);\n        loadingIconContainer.addClass('hidden');\n    };\n\n    return {\n        init: function(root) {\n            root = $(root);\n            registerEventListeners(root);\n        }\n    };\n});\n"],"names":["define","$","Str","Notification","Repository","Selectors","processUserPreference","preference","value","courseId","userId","element","setUserPreferences","then","result","saved","always","fetchNotifications","fail","ex","exception","prop","processSetting","key","root","response","startLoading","endorse","userProfile","find","wrappers","userprofilewrapper","endorsername","data","endorser","endorsedate","Date","endorsedon","toDateString","endorsedatets","Math","round","getTime","endorsestr","endorsemsgPromise","get_string","message","html","removeClass","addClass","trim","length","setEndorsement","suspend","updateSuspendedStatus","processSuspendedStatus","add","groupName","groupAddRemove","processGroup","stopLoading","registerEventListeners","click","this","checked","comment","val","updateProfileComment","string","text","slideDown","delay","slideUp","updateComment","containers","loadingIcon","init"],"mappings":"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"}