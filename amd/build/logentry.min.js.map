{"version":3,"sources":["../src/logentry.js"],"names":["ViewManager","require","registerEventListeners","root","contextId","Selectors","bookingwrapper","data","courseId","on","actions","viewLogEntry","e","logentryId","attr","userId","preventDefault","stopPropagation","registerLogentryEditForm","registerLogentrySummaryForm","stopImmediatePropagation","editMode","LogentryFormPromise","ModalFactory","create","type","ModalLogentryEditForm","TYPE","large","target","pendingPromise","Pending","renderLogentryModal","then","resolve","catch","renderLogentrySummaryModal","modal","LogentryEvents","editLogentry","init"],"mappings":"sjBAwBA,OACA,OACA,OACA,OACA,OACA,O,4lBAEMA,CAAAA,CAAW,CAAGC,OAAO,CAAC,oCAAD,C,CAOpBC,CAAsB,CAAG,SAACC,CAAD,CAAU,CAGtC,GAAMC,CAAAA,CAAS,CAAG,cAAEC,CAAS,CAACC,cAAZ,EAA4BC,IAA5B,CAAiC,WAAjC,CAAlB,CACAC,CAAQ,CAAG,cAAEH,CAAS,CAACC,cAAZ,EAA4BC,IAA5B,CAAiC,UAAjC,CADX,CAGA,GAAIH,CAAJ,CAAe,CAEXD,CAAI,CAACM,EAAL,CAAQ,OAAR,CAAiBJ,CAAS,CAACK,OAAV,CAAkBC,YAAnC,CAAiD,SAASC,CAAT,CAAY,CACzD,GAAIC,CAAAA,CAAU,CAAG,cAAE,IAAF,EAAQC,IAAR,CAAa,kBAAb,CAAjB,CACAC,CAAM,CAAG,cAAE,IAAF,EAAQD,IAAR,CAAa,iBAAb,CADT,CAIAF,CAAC,CAACI,cAAF,GAGAJ,CAAC,CAACK,eAAF,GAEA,GAAkB,CAAd,EAAAJ,CAAJ,CAAqB,CACjBK,CAAwB,CAACN,CAAD,CAAIR,CAAJ,CAAeI,CAAf,CAAyBO,CAAzB,CAAiCF,CAAjC,IAC3B,CAFD,IAEO,CACHM,CAA2B,CAACf,CAAD,CAAYI,CAAZ,CAAsBO,CAAtB,CAA8BF,CAA9B,CAC9B,CACDD,CAAC,CAACQ,wBAAF,EACH,CAhBD,CAiBH,CACJ,C,CAcMF,CAAwB,CAAG,SAACN,CAAD,CAAIR,CAAJ,CAAeI,CAAf,CAAyBO,CAAzB,CAAiCF,CAAjC,CAA6CQ,CAA7C,CAA0D,IAClFC,CAAAA,CAAmB,CAAGC,UAAaC,MAAb,CAAoB,CAC5CC,IAAI,CAAEC,UAAsBC,IADgB,CAE5CC,KAAK,GAFuC,CAApB,CAD4D,CAMlFC,CAAM,CAAGjB,CAAC,CAACiB,MANuE,CAOlFC,CAAc,CAAG,GAAIC,UAAJ,CAAY,wCAAZ,CAPiE,CASxF/B,CAAW,CAACgC,mBAAZ,CAAgCpB,CAAhC,CAAmCU,CAAnC,CAAwDO,CAAxD,CAAgEzB,CAAhE,CAA2EI,CAA3E,CAAqFO,CAArF,CAA6FF,CAA7F,CAAyGQ,CAAzG,EACCY,IADD,CACMH,CAAc,CAACI,OAAf,EADN,EAECC,KAFD,EAGF,C,CAYIhB,CAA2B,CAAG,SAACf,CAAD,CAAYI,CAAZ,CAAsBO,CAAtB,CAA8BF,CAA9B,CAA6C,CAC7E,GAAMiB,CAAAA,CAAc,CAAG,GAAIC,UAAJ,CAAY,2CAAZ,CAAvB,CAEA,GAAIlB,CAAJ,CAAgB,CACZb,CAAW,CAACoC,0BAAZ,CAAuC5B,CAAvC,CAAiDO,CAAjD,CAAyDF,CAAzD,EACCoB,IADD,CACM,SAASI,CAAT,CAAgB,CAClB,cAAE,MAAF,EAAU5B,EAAV,CAAa6B,UAAeC,YAA5B,CAA0C,SAAS3B,CAAT,CAAYG,CAAZ,CAAoBF,CAApB,CAAgC,CACtEK,CAAwB,CAACN,CAAD,CAAIR,CAAJ,CAAeI,CAAf,CAAyBO,CAAzB,CAAiCF,CAAjC,IAAxB,CACAD,CAAC,CAACQ,wBAAF,EACH,CAHD,EAIA,MAAOiB,CAAAA,CACV,CAPD,EAQCJ,IARD,CAQMH,CAAc,CAACI,OAAf,EARN,EASCC,KATD,EAUH,CAXD,IAWO,CACHL,CAAc,CAACI,OAAf,EACH,CACJ,C,QAEmB,QAAPM,CAAAA,IAAO,CAACrC,CAAD,CAAU,CAC1BD,CAAsB,CAACC,CAAD,CACzB,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles Logentry form registration and promises.\n *\n * @module     local_booking/logentry\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Pending from 'core/pending';\nimport ModalFactory from 'core/modal_factory';\nimport LogentryEvents from 'local_booking/events';\nimport ModalLogentryEditForm from 'local_booking/modal_logentry_form';\nimport * as Selectors from 'local_booking/selectors';\n\nconst ViewManager = require('local_booking/booking_view_manager');\n\n/**\n * Register event listeners for the logentries.\n *\n * @param {object} root The root element.\n */\n const registerEventListeners = (root) => {\n\n    // Get promise for the logentry form for create and edit\n    const contextId = $(Selectors.bookingwrapper).data('contextid'),\n    courseId = $(Selectors.bookingwrapper).data('courseid');\n\n    if (contextId) {\n        // Listen the click on the progression table of sessions.\n        root.on('click', Selectors.actions.viewLogEntry, function(e) {\n            let logentryId = $(this).attr('data-logentry-id'),\n            userId = $(this).attr('data-student-id');\n\n            // A logentry needs to be created or edite, show the modal form.\n            e.preventDefault();\n            // We've handled the event so stop it from bubbling\n            // and causing the day click handler to fire.\n            e.stopPropagation();\n\n            if (logentryId == 0) {\n                registerLogentryEditForm(e, contextId, courseId, userId, logentryId, false);\n            } else {\n                registerLogentrySummaryForm(contextId, courseId, userId, logentryId);\n            }\n            e.stopImmediatePropagation();\n        });\n    }\n};\n\n/**\n * Register the form and listeners required for\n * creating and editing logentries.\n *\n * @method registerLogentryEditForm\n * @param  {object} e          The triggered event.\n * @param  {Number} contextId  The course context id of the logentry.\n * @param  {Number} courseId   The course id of the logentry.\n * @param  {Number} userId     The user id the logentry belongs to.\n * @param  {Number} logentryId The logentry id.\n * @param  {bool}   editMode   Whether to register for edit mode.\n */\n const registerLogentryEditForm = (e, contextId, courseId, userId, logentryId, editMode) => {\n    const LogentryFormPromise = ModalFactory.create({\n        type: ModalLogentryEditForm.TYPE,\n        large: true\n    });\n\n    const target = e.target;\n    const pendingPromise = new Pending('local_booking/registerLogentryEditForm');\n\n    ViewManager.renderLogentryModal(e, LogentryFormPromise, target, contextId, courseId, userId, logentryId, editMode)\n    .then(pendingPromise.resolve())\n    .catch();\n };\n\n/**\n * Register the form and listeners required for\n * viewing the logentry summary form.\n *\n * @method registerLogentrySummaryForm\n * @param  {Number} contextId  The course context id of the logentry.\n * @param  {Number} courseId   The course id of the logentry.\n * @param  {Number} userId     The user id the logentry belongs to.\n * @param  {Number} logentryId The logentry id.\n */\nconst registerLogentrySummaryForm = (contextId, courseId, userId, logentryId) => {\n    const pendingPromise = new Pending('local_booking/registerLogentrySummaryForm');\n\n    if (logentryId) {\n        ViewManager.renderLogentrySummaryModal(courseId, userId, logentryId)\n        .then(function(modal) {\n            $('body').on(LogentryEvents.editLogentry, function(e, userId, logentryId) {\n                registerLogentryEditForm(e, contextId, courseId, userId, logentryId, true);\n                e.stopImmediatePropagation();\n            });\n            return modal;\n        })\n        .then(pendingPromise.resolve())\n        .catch();\n    } else {\n        pendingPromise.resolve();\n    }\n};\n\nexport const init = (root) => {\n    registerEventListeners(root);\n};\n\n"],"file":"logentry.min.js"}