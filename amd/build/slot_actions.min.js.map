{"version":3,"file":"slot_actions.min.js","sources":["../src/slot_actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the quick add or update event modal.\n *\n * @module     local_booking/slot_actions\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery',\n    'core/notification',\n    'local_booking/repository',\n    'local_booking/calendar_view_manager',\n    ],\n    function(\n        $,\n        Notification,\n        Repository,\n        CalendarViewManager\n    ) {\n\n    var SELECTORS = {\n        CALENDAR_WRAPPER: '[class=calendarwrapper]',\n        SLOTS_TABLE: '[data-region=\"slots-week\"]',\n        SLOT_DAY: '[data-region=\"day\"]',\n        SAVE_BUTTON: '[data-region=\"save-button\"]',\n        PASTE_BUTTON: \"[data-region='paste-button']\",\n        BOOK_BUTTON: \"[data-region='book-button']\",\n        DAY_TIME_SLOT: \"[data-action='day-time-slot']\",\n        LOADING_ICON_CONTAINER: '[data-region=\"loading-icon-container\"]',\n    };\n\n    var Slots = [];\n    var BookedSlot;\n    var SlotIndexes = [];\n    var postActive = false;\n\n    /**\n     * Save marked availability posts.\n     *\n     * @method saveWeekSlots\n     * @param {object} root The calendar root element\n     * @return {object} The create modal promise\n     */\n    function saveWeekSlots(root) {\n\n        CalendarViewManager.startLoading(root);\n\n        // Get year and week\n        const course = root.find(SELECTORS.CALENDAR_WRAPPER).data('courseid');\n        const year = root.find(SELECTORS.CALENDAR_WRAPPER).data('year');\n        const week = root.find(SELECTORS.CALENDAR_WRAPPER).data('week');\n\n        // Get marked availability slots\n        getUISlots(root);\n\n        let serverCall = null;\n        if (Slots.length != 0) {\n            serverCall = Repository.saveSlots(Slots, course, year, week);\n        } else {\n            serverCall = Repository.clearSlots(course, year, week);\n        }\n\n        // Send a request to the server to clear slots.\n        return serverCall\n            .then(function(response) {\n                if (response.validationerror) {\n                    // eslint-disable-next-line no-alert\n                    alert('Errors encountered: Unable to process availability posting action!');\n                }\n                return;\n            }\n            )\n            .always(function() {\n                Notification.fetchNotifications();\n                return CalendarViewManager.stopLoading(root);\n            }\n            )\n            .fail(Notification.exception);\n    }\n\n    /**\n     * Save marked booking posts.\n     *\n     * @method saveBookedSlot\n     * @param {object} root The calendar root element\n     * @return {object} The create modal promise\n     */\n    function saveBookedSlot(root) {\n\n        CalendarViewManager.startLoading(root);\n\n        // Get exercise id and the user id from the URL\n        const course = root.find(SELECTORS.CALENDAR_WRAPPER).data('courseid');\n        const exercise = root.find(SELECTORS.CALENDAR_WRAPPER).data('exercise-id');\n        const studentid = root.find(SELECTORS.CALENDAR_WRAPPER).data('student-id');\n\n        // Get marked availability slots\n        getUISlots(root, 'book');\n\n        // Check if the instructor has conflicting bookings\n        return Repository.isConflictingBookings(studentid, BookedSlot)\n            .then(function(response) {\n                if (response.validationerror) {\n                    // eslint-disable-next-line no-alert\n                    alert('Errors encountered: Unable to check conflicting bookings!');\n                } else {\n                    // Check if there are no conflicting messages\n                    if (response.result) {\n                        // eslint-disable-next-line no-alert\n                        alert(response.warnings[0].message);\n                    } else {\n                        // No conflicting bookings, save the booking.\n                        // eslint-disable-next-line promise/no-nesting\n                        return Repository.saveBookedSlot(BookedSlot, course, exercise, studentid)\n                            .then(function(response) {\n                                if (response.validationerror) {\n                                    // eslint-disable-next-line no-alert\n                                    alert('Errors encountered: Unable to save slot!');\n                                } else {\n                                    // Redirect to bookings view\n                                    location.href = M.cfg.wwwroot + '/local/booking/view.php?courseid=' + course;\n                                }\n                                return;\n                            }\n                            )\n                            .always(function() {\n                                CalendarViewManager.stopLoading(root);\n                                return;\n                            }\n                            )\n                            .fail(Notification.exception);\n                    }\n                    return !response.result;\n                }\n                return false;\n            }\n            )\n            .always(function() {\n                CalendarViewManager.stopLoading(root);\n            })\n            .fail(Notification.exception);\n        }\n\n    /**\n     * Update Slots & BookedSlots with marked availability\n     * posts in the calendar view.\n     *\n     * @method getSlots\n     * @param {object} root     The calendar root element\n     * @param {String} action   The action for display view/book\n     */\n    function getUISlots(root, action) {\n\n        const slottype = action == 'book' ? 'slot-booked' : 'slot-marked';\n        const year = root.find(SELECTORS.CALENDAR_WRAPPER).data('year');\n        const week = root.find(SELECTORS.CALENDAR_WRAPPER).data('week');\n\n        const tableid = root.find(SELECTORS.SLOTS_TABLE).attr('id');\n        const head = $('#' + tableid + ' th');\n        const colCount = document.getElementById(tableid).rows[0].cells.length;\n        let colOffset;\n\n        Slots.length = 0;\n        // Get column index for the start of the week\n        head.each(function() {\n            if ($(this).data('region') == 'slot-week-day') {\n                colOffset = head.index(this) + 1;\n                return false;\n            }\n        });\n\n        // Get all slots for this week from the UI table\n        for (let i = colOffset; i <= colCount; i++) {\n            // Get slots for the current day\n            const dayHour = $('#' + tableid + ' td:nth-child(' + i + ')').map(function() {\n                return [[$(this).data(slottype), $(this).data('slot-timestamp')]];\n            }).get();\n\n            // Get each slot in the day (start and end times)\n            let aSlot = {};\n\n            // Check each day (column) and record marked slot start-end times\n            dayHour.forEach((hourSlot, index) => {\n                let isLastElement = index == dayHour.length - 1;\n\n                // Check if the slot is marked to record start or end time in marked sequence\n                if (hourSlot[0]) {\n                    if (Object.keys(aSlot).length === 0 && aSlot.constructor === Object) {\n                        aSlot.starttime = hourSlot[1];\n                    } else {\n                        aSlot.endtime = hourSlot[1];\n                    }\n                // Add the slot if it has start and end, and this slot is empty => slot sequence ended\n                } else if (!(Object.keys(aSlot).length === 0 && aSlot.constructor === Object)) {\n                    aSlot = addSlot(aSlot, slottype, week, year);\n                }\n                // Add slot if it ends at the end of the day\n                if (isLastElement && !(Object.keys(aSlot).length === 0 && aSlot.constructor === Object)) {\n                    aSlot = addSlot(aSlot, slottype, week, year);\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds a slot to local object array (Slots).\n     *\n     * @method addSlot\n     * @param {object} aSlot The slot to be add to the local object array\n     * @param {string} slottype The slot type availability post vs booked\n     * @param {int} week The week of the year\n     * @param {int} year The year\n     * @return {object} empty object\n     */\n     function addSlot(aSlot, slottype, week = 0, year = 0) {\n        if (slottype == 'slot-marked') {\n            Slots.push(aSlot);\n        } else if (slottype == 'slot-booked') {\n            aSlot.week = week;\n            aSlot.year = year;\n            BookedSlot = aSlot;\n        }\n        return {};\n    }\n\n    /**\n     * Update the indexes array tracking copied table indexes\n     * editing existing events.\n     *\n     * @param {object} root The calendar root element\n     * @method copySlots\n     */\n    function copySlots(root) {\n        SlotIndexes.length = 0;\n\n        $(SELECTORS.SLOT_DAY).each((idx, el) => {\n            if ($(el).data('slot-marked')) {\n                SlotIndexes.push([el.closest('tr').rowIndex, el.cellIndex]);\n            }\n        });\n\n        setPasteState(root);\n\n        return;\n    }\n\n    /**\n     * Paste slots by seting the cells from\n     * SlotIndexes (copied cells) to the calendar\n     *\n     * @method pasteSlots\n     * @param {object} root The calendar root element\n     */\n    function pasteSlots(root) {\n        const table = document.getElementById(root.find(SELECTORS.SLOTS_TABLE).attr('id'));\n        SlotIndexes.forEach((idx) => {\n            let slot = table.rows[idx[0]].cells[idx[1]];\n            $(slot).data('slot-marked', 1);\n            $(slot).addClass('slot-selected', 1);\n        });\n        setSaveButtonState(root, 'post');\n\n        return;\n     }\n\n    /**\n     * Clear slots for a user per course in week and year\n     * given they are not otherwsie booked\n     *\n     * @method clearWeekSlots\n     * @param {object} root The week calendar root element\n     */\n    function clearWeekSlots(root) {\n        $('td').filter(function() {\n            if ($(this).data('slot-booked') == 0) {\n                $(this).data('slot-marked', 0);\n                $(this).removeClass('slot-selected');\n            }\n            return true;\n        });\n        setSaveButtonState(root, 'post', true);\n        return;\n    }\n\n    /**\n     * Set the cells from the copied SlotIndexes to the current table\n     *\n     * @method setPasteState\n     * @param {object} root The week calendar root element\n     */\n    function setPasteState(root) {\n        if (SlotIndexes.length > 0) {\n            root.find(SELECTORS.PASTE_BUTTON).addClass('slot-button-blue').removeClass('slot-button-gray');\n        } else {\n            root.find(SELECTORS.PASTE_BUTTON).addClass('slot-button-gray').removeClass('slot-button-blue');\n        }\n\n        return;\n     }\n\n    /**\n     * Set the save buttons state to enabled/disabled based\n     * on user calendar time slot selection (cells) in\n     * the week calendar\n     *\n     * @method setSaveButtonState\n     * @param {object} root      The calendar root element\n     * @param {string} action    The action behind the view\n     * @param {bool} forceenable Enable save button\n     */\n    function setSaveButtonState(root, action, forceenable) {\n        // Get marked availability slots\n        getUISlots(root, action);\n\n        const enabled = 'slot-button-blue';\n        const disabled = 'slot-button-gray';\n        const SaveButton = root.find(action == 'book' ? SELECTORS.BOOK_BUTTON : SELECTORS.SAVE_BUTTON);\n\n        let state = forceenable ||\n                (action == 'book' && BookedSlot !== undefined && BookedSlot.length !== 0) ||\n                (action == 'post' && Slots !== undefined && Slots.length !== 0);\n\n        SaveButton.addClass(state ? enabled : disabled).removeClass(!state ? enabled : disabled);\n        SaveButton.prop('disabled', !state);\n\n        return;\n     }\n\n    /**\n     * Set the cells from the CopiedSlotsIndexes to the current table\n     *\n     * @method setSlot\n     * @param {object} cell     The copied cell\n     * @param {String} action   The action mode: book|post\n     */\n    function setSlot(cell, action) {\n        const slotaction = action == 'book' ? 'slot-booked' : 'slot-marked';\n        const slotactionclass = action == 'book' ? 'slot-booked' : 'slot-selected';\n\n        if (!$(cell).data(slotaction)) {\n            $(cell).addClass(slotactionclass);\n        } else {\n            $(cell).removeClass(slotactionclass);\n        }\n        $(cell).data(slotaction, !$(cell).data(slotaction));\n\n        return;\n    }\n\n    /**\n     * Set cells selected and save buttons state\n     *\n     * @method setPosting\n     * @param {bool} state  The posting state\n     */\n    function setPosting(state) {\n        postActive = state;\n    }\n\n    /**\n     * Set cells selected and save buttons state\n     *\n     * @method postSlots\n     * @param {object} root     The calendar root element\n     * @param {String} action   The action behind the active view\n     * @param {object} target   The target event object (cell)\n     * @param {String} overridePost The override flag for posting state\n     */\n    function postSlots(root, action, target, overridePost = false) {\n        // Change marked state\n        if (typeof target !== 'undefined' && (postActive || overridePost)) {\n            if (!target.is(SELECTORS.DAY_TIME_SLOT) && action !== 'all' && action !== '') {\n                setSlot(target, action);\n                setSaveButtonState(root, action);\n            }\n        }\n\n        return;\n    }\n\n    return {\n        saveWeekSlots: saveWeekSlots,\n        saveBookedSlot: saveBookedSlot,\n        clearWeekSlots: clearWeekSlots,\n        pasteSlots: pasteSlots,\n        setPasteState: setPasteState,\n        setSaveButtonState: setSaveButtonState,\n        copySlots: copySlots,\n        postSlots: postSlots,\n        setPosting: setPosting,\n        Slots: Slots,\n        SlotIndexes: SlotIndexes\n    };\n});"],"names":["define","$","Notification","Repository","CalendarViewManager","BookedSlot","SELECTORS","CALENDAR_WRAPPER","SLOTS_TABLE","SLOT_DAY","SAVE_BUTTON","PASTE_BUTTON","BOOK_BUTTON","DAY_TIME_SLOT","LOADING_ICON_CONTAINER","Slots","SlotIndexes","postActive","getUISlots","root","action","slottype","year","find","data","week","tableid","attr","head","colCount","document","getElementById","rows","cells","length","colOffset","each","this","index","i","dayHour","map","get","aSlot","forEach","hourSlot","isLastElement","Object","keys","constructor","starttime","endtime","addSlot","arguments","undefined","push","setPasteState","addClass","removeClass","setSaveButtonState","forceenable","SaveButton","state","prop","saveWeekSlots","startLoading","course","serverCall","saveSlots","clearSlots","then","response","validationerror","alert","always","fetchNotifications","stopLoading","fail","exception","saveBookedSlot","exercise","studentid","isConflictingBookings","result","warnings","message","location","href","M","cfg","wwwroot","clearWeekSlots","filter","pasteSlots","table","idx","slot","copySlots","el","closest","rowIndex","cellIndex","postSlots","target","is","cell","slotaction","slotactionclass","setSlot","setPosting"],"mappings":"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"}