/**
 * This module is responsible for registering listeners
 * for the instructor's 'My bookings' events.
 *
 * @module     local_booking/mybookings
 * @author     Mustafa Hajjar (mustafahajjar@gmail.com)
 * @copyright  BAVirtual.co.uk Â© 2024
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("local_booking/mybookings",["jquery","core/str","core/notification","local_booking/booking_view_manager","local_booking/booking_actions","local_booking/events","local_booking/selectors"],(function($,Str,Notification,ViewManager,BookingActions,BookingEvents,Selectors){const registerEventListeners=function(root){!function(root){$("body").on(BookingEvents.sessioncanceled,(function(){ViewManager.refreshInstructorBookingsContent(root)})),root.on("click",Selectors.cancelbutton,(function(e){Str.get_string("commentcancel","local_booking").then((function(promptMsg){const comment=window.prompt(promptMsg);null!==comment&&BookingActions.cancelBooking(root,e,comment,!1)})).catch(Notification.exception)})),root.on("click",Selectors.noshowbutton,(function(e){const noshows=$(e.target).closest(Selectors.noshowbutton).data("noshows"),noShowComment=Str.get_string("commentnoshow"+noshows,"local_booking").then((function(noshowMsg){return noshowMsg})).catch(Notification.exception);$.when(Str.get_string("commentnoshow","local_booking"),noShowComment).then((function(promptMsg,noshowMsg){window.confirm(promptMsg+"\n\n"+noshowMsg)&&BookingActions.cancelBooking(root,e,null,!0)})).catch(Notification.exception)}))}(root)};return{init:function(rt){var root=$(rt);registerEventListeners(root)}}}));

//# sourceMappingURL=mybookings.min.js.map