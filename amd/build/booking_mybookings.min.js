/**
 * This module is responsible for registering listeners
 * for the instructor's 'My bookings' events.
 *
 * @module     local_booking/booking_mybookings
 * @author     Mustafa Hajjar (mustafa.hajjar)
 * @copyright  BAVirtual.co.uk Â© 2024
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("local_booking/booking_mybookings",["jquery","core/str","core/notification","core/pending","local_booking/booking_view_manager","local_booking/booking_actions","local_booking/events","local_booking/selectors"],(function($,Str,Notification,Pending,ViewManager,BookingActions,BookingEvents,Selectors){return{init:function(rt){!function(root){$("body").on(BookingEvents.bookingcanceled,(function(){ViewManager.refreshInstructorBookingsContent(root)})),root.on("click",Selectors.regions.cancelbutton,(function(e){const pendingPromise=new Pending("local_booking/registerCancelBookingForm");ViewManager.renderCancelBookingConfirmation(e).then(pendingPromise.resolve()).catch(e)})),root.on("click",Selectors.regions.noshowbutton,(function(e){const noshows=$(e.target).closest(Selectors.regions.noshowbutton).data("noshows"),noShowComment=Str.get_string("commentnoshow"+noshows,"local_booking").then((function(noshowMsg){return noshowMsg})).catch(Notification.exception);$.when(Str.get_string("commentnoshow","local_booking"),noShowComment).then((function(promptMsg,noshowMsg){window.confirm(promptMsg+"\n\n"+noshowMsg)&&BookingActions.cancelBooking(root,e)})).catch(Notification.exception)}))}($(rt))}}}));

//# sourceMappingURL=booking_mybookings.min.js.map