{"version":3,"file":"modal_logentry_form.min.js","sources":["../src/modal_logentry_form.js"],"sourcesContent":["/* eslint-disable no-nested-ternary */\n/* eslint-disable complexity */\n/* eslint-disable babel/new-cap */\n/* eslint-disable no-undef */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles logbook entry form.\n *\n * @module     local_booking/modal_logentry_form\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery',\n    'core_form/events',\n    'core/str',\n    'core/notification',\n    'core/custom_interaction_events',\n    'core/modal',\n    'core/modal_registry',\n    'core/fragment',\n    'local_booking/events',\n    'local_booking/repository',\n    'local_booking/selectors',\n],\nfunction(\n    $,\n    FormEvents,\n    Str,\n    Notification,\n    CustomEvents,\n    Modal,\n    ModalRegistry,\n    Fragment,\n    LogbookEvents,\n    Repository,\n    Selectors,\n) {\n\nvar registered = false;\nvar SELECTORS = {\n    ADVANCED_FORM: '[data-form-type=\"other\"]',\n    SAVE_BUTTON: '[data-action=\"save\"]',\n    LOADING_ICON_CONTAINER: '[data-region=\"loading-icon-container\"]',\n};\n\n/**\n * Constructor for the Modal.\n *\n * @param {object} root The root jQuery element for the modal\n */\nvar ModalLogEntryForm = function(root) {\n    Modal.call(this, root);\n    this.contextId = null;\n    this.courseId = null;\n    this.userId = null;\n    this.logentryId = null;\n    this.flightDate = null;\n    this.exerciseId = null;\n    this.sessionId = null;\n    this.pirepLookupId = null;\n    this.hasfindpirep = false;\n    this.reloadingBody = false;\n    this.reloadingTitle = false;\n    this.saveButton = this.getFooter().find(SELECTORS.SAVE_BUTTON);\n};\n\nModalLogEntryForm.TYPE = 'local_booking-modal_logentry_form';\nModalLogEntryForm.prototype = Object.create(Modal.prototype);\nModalLogEntryForm.prototype.constructor = ModalLogEntryForm;\n\n/**\n * Set the context id to the given value.\n *\n * @method setContextId\n * @param {Number} id The context id\n */\nModalLogEntryForm.prototype.setContextId = function(id) {\n    this.contextId = id;\n};\n\n/**\n * Get the current context id, if any.\n *\n * @method getContextId\n * @return {Number|null} The context id\n */\nModalLogEntryForm.prototype.getContextId = function() {\n    return this.contextId;\n};\n\n/**\n * Set the course id to the given value.\n *\n * @method setCourseId\n * @param {int} id The course id\n */\nModalLogEntryForm.prototype.setCourseId = function(id) {\n    this.courseId = id;\n};\n\n/**\n * Get the current course id, if any.\n *\n * @method getCourseId\n * @return {int|null} The course id\n */\nModalLogEntryForm.prototype.getCourseId = function() {\n    return this.courseId;\n};\n\n/**\n * Check if the modal has an course id.\n *\n * @method hasCourseId\n * @return {bool}\n */\nModalLogEntryForm.prototype.hasCourseId = function() {\n    return this.courseId !== null;\n};\n\n/**\n * Set the exercise id to the given value.\n *\n * @method setExerciseId\n * @param {int} id The exercise id\n */\n    ModalLogEntryForm.prototype.setExerciseId = function(id) {\n    this.exerciseId = id;\n};\n\n/**\n * Get the current exercise id, if any.\n *\n * @method getExerciseId\n * @return {int|null} The exercise id\n */\nModalLogEntryForm.prototype.getExerciseId = function() {\n    return this.exerciseId;\n};\n\n/**\n * Check if the modal has an exercise id.\n *\n * @method hasExerciseId\n * @return {bool}\n */\n    ModalLogEntryForm.prototype.hasExerciseId = function() {\n    return this.exerciseId !== null;\n};\n\n/**\n * Set the session id to the given value.\n *\n * @method setSessionId\n * @param {int} id The session id\n */\n    ModalLogEntryForm.prototype.setSessionId = function(id) {\n    this.sessionId = id;\n};\n\n/**\n * Get the current session id, if any.\n *\n * @method getSessionId\n * @return {int|null} The session id\n */\nModalLogEntryForm.prototype.getSessionId = function() {\n    return this.sessionId;\n};\n\n/**\n * Check if the modal has an session id.\n *\n * @method hasSessionId\n * @return {bool}\n */\n    ModalLogEntryForm.prototype.hasSessionId = function() {\n    return this.sessionId !== null;\n};\n\n/**\n * Set the user id to the given value.\n *\n * @method setUserId\n * @param {int} id The user id\n */\n    ModalLogEntryForm.prototype.setUserId = function(id) {\n    this.userId = id;\n};\n\n/**\n * Get the current user id, if any.\n *\n * @method getUserId\n * @return {int|null} The user id\n */\nModalLogEntryForm.prototype.getUserId = function() {\n    return this.userId;\n};\n\n/**\n * Check if the modal has an user id.\n *\n * @method hasUserId\n * @return {bool}\n */\n    ModalLogEntryForm.prototype.hasUserId = function() {\n    return this.userId !== null;\n};\n\n/**\n * Set the logentry id to the given value.\n *\n * @method setLogentryId\n * @param {int} id The logentry id\n */\nModalLogEntryForm.prototype.setLogentryId = function(id) {\n    this.logentryId = id;\n};\n\n/**\n * Get the current logentry id, if any.\n *\n * @method getLogentryId\n * @return {int|null} The logentry id\n */\nModalLogEntryForm.prototype.getLogentryId = function() {\n    return this.logentryId;\n};\n\n/**\n * Check if the modal has an logentry id.\n *\n * @method hasLogentryId\n * @return {bool}\n */\nModalLogEntryForm.prototype.hasLogentryId = function() {\n    return this.logentryId !== null && this.logentryId != 0;\n};\n\n/**\n * Set the start time to the given value.\n *\n * @method setFlightDate\n * @param {int} time The session date time\n */\nModalLogEntryForm.prototype.setFlightDate = function(time) {\n    this.flightDate = time;\n};\n\n/**\n * Get the current start time, if any.\n *\n * @method getFlightDate\n * @return {int|null} The start time\n */\nModalLogEntryForm.prototype.getFlightDate = function() {\n    return this.flightDate;\n};\n\n/**\n * Check if the modal has session date time.\n *\n * @method hasFlightDate\n * @return {bool}\n */\nModalLogEntryForm.prototype.hasFlightDate = function() {\n    return this.flightDate !== null;\n};\n\n/**\n * Set the flight type of the logentry to the given value.\n *\n * @method setFlightType\n * @param {string} flighttype The flight type (training/solo/check)\n */\n ModalLogEntryForm.prototype.setFlightType = function(flighttype) {\n    this.flightType = flighttype;\n};\n\n/**\n * Get flight type of the logentry.\n *\n * @method getFlightType\n * @return {string} The flight type (training/solo/check)\n */\nModalLogEntryForm.prototype.getFlightType = function() {\n    return this.flightType;\n};\n\n/**\n * Check if the modal has an logentry id.\n *\n * @param  {bool} hasfindpirep  Whether find PIREP is enabled\n * @method hasFindPIREP\n * @return {bool}\n */\n ModalLogEntryForm.prototype.hasFindPIREP = function(hasfindpirep) {\n    if (typeof hasfindpirep !== 'undefined') {\n        this.hasfindpirep = hasfindpirep;\n    }\n    return this.hasfindpirep;\n};\n\n/**\n * Get the form element from the modal.\n *\n * @method getForm\n * @return {object}\n */\nModalLogEntryForm.prototype.getForm = function() {\n    return this.getBody().find('form');\n};\n\n/**\n * Disable the buttons in the footer.\n *\n * @method disableButtons\n */\nModalLogEntryForm.prototype.disableButtons = function() {\n    this.saveButton.prop('disabled', true);\n};\n\n/**\n * Enable the buttons in the footer.\n *\n * @method enableButtons\n */\nModalLogEntryForm.prototype.enableButtons = function() {\n    this.saveButton.prop('disabled', false);\n};\n\n/**\n * Reload the title for the modal to the appropriate value\n * depending on whether we are creating a new log book entry\n * or editing an existing one.\n *\n * @method reloadTitleContent\n * @return {object} A promise resolved with the new title text\n */\nModalLogEntryForm.prototype.reloadTitleContent = function() {\n    if (this.reloadingTitle) {\n        return this.titlePromise;\n    }\n\n    this.reloadingTitle = true;\n\n    // Get exercise name\n    this.titlePromise = Repository.getExerciseName(this.courseId, this.exerciseId)\n        .then(function(response) {\n            // Handle the response\n            return response.exercisename;\n        })\n    .fail(Notification.exception);\n\n    this.titlePromise.then(function(string) {\n        this.setTitle(string);\n        return string;\n    }.bind(this))\n    .always(function() {\n        this.reloadingTitle = false;\n        return;\n    }.bind(this))\n    .fail(Notification.exception);\n\n    return this.titlePromise;\n};\n\n/**\n * Send a request to the server to get the logentry_form in a fragment\n * and render the result in the body of the modal.\n *\n * If serialised form data is provided then it will be sent in the\n * request to the server to have the form rendered with the data. This\n * is used when the form had a server side error and we need the server\n * to re-render it for us to display the error to the user.\n *\n * @method reloadBodyContent\n * @param {string} formData The serialised form data\n * @return {object} A promise resolved with the fragment html and js from\n */\nModalLogEntryForm.prototype.reloadBodyContent = function(formData) {\n    if (this.reloadingBody) {\n        return this.bodyPromise;\n    }\n\n    this.reloadingBody = true;\n    this.disableButtons();\n\n    var args = {};\n\n    if (this.hasUserId()) {\n        args.userid = this.getUserId();\n    }\n\n    if (this.hasLogentryId()) {\n        args.logentryid = this.getLogentryId();\n    }\n\n    if (this.hasFlightDate()) {\n        args.flightdate = this.getFlightDate();\n    }\n\n    if (this.hasCourseId()) {\n        args.courseid = this.getCourseId();\n    }\n\n    if (this.hasExerciseId()) {\n        args.exerciseid = this.getExerciseId();\n    }\n\n    if (this.hasSessionId()) {\n        args.sessionid = this.getSessionId();\n    }\n\n    if (typeof formData !== 'undefined') {\n        args.formdata = formData;\n    }\n\n    // Get the content of the modal\n    this.bodyPromise = Fragment.loadFragment('local_booking', 'logentry_form', this.getContextId(), args);\n\n    // Set the body data using the promise\n    this.setBody(this.bodyPromise);\n\n    this.bodyPromise.then(function() {\n        // Add Find PIREP button\n        if (this.hasFindPIREP()) {\n            if (!$('#id_error2_p1pirep').length) {\n                let p1pirep = $('#id_p1pirep');\n                let pirepdiv = p1pirep.parent();\n\n                // Append PIREP search group\n                pirepdiv.prepend('<div class=\"input-group\" id=\"id_pirepgroup\">');\n                $('#id_pirepgroup').append(p1pirep);\n                $('#id_pirepgroup').append('<div class=\"input-group-append\" id=\"id_find_pirep\">');\n                $('#id_find_pirep').append('<button type=\"button\" class=\"btn btn-primary search-icon\"><i class=\"icon ' +\n                    'fa fa-search fa-fw \" aria-hidden=\"true\"></i></button>');\n            }\n        }\n\n        // Hide/show elements set training type\n        this.doDynamicDisplay();\n        this.enableButtons();\n        this.setInputMask();\n        this.registerChangeListeners();\n\n        return;\n    }.bind(this))\n    .fail(Notification.exception)\n    .always(function() {\n        this.reloadingBody = false;\n        return;\n    }.bind(this))\n    .fail(Notification.exception);\n\n    return this.bodyPromise;\n};\n\n/**\n * Sets the input mask for all masked elements.\n *\n * @method setInputMask\n */\nModalLogEntryForm.prototype.setInputMask = function() {\n    // Mask flight times < 5hrs and departure/arrival times to 24hr format\n    // Mask flight time elements based on training type\n    if ($(Selectors.bookingwrapper).data('trainingtype') == \"Dual\") {\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_dualtime\"));\n    } else if ($(Selectors.bookingwrapper).data('trainingtype') == \"Multicrew\") {\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_multipilottime\"));\n\n        // TODO: Instructor logentry edit:\n        // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_copilottime\"));\n    }\n    // Check for the flight type before masking related elements\n    if ($(\"input[name='flighttypehidden']\").val() == 'check') {\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_picustime\"));\n\n        // TODO: Instructor logentry edit:\n        // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_checkpilottime\"));\n    } else if ($(\"input[name='flighttypehidden']\").val() == 'solo') {\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_flighttime\"));\n    } else {\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_groundtime\"));\n    }\n\n    // TODO: Instructor logentry edit:\n    // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_pictime\"));\n    // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_instructortime\"));\n\n    // Mask remaining elements\n    Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_flighttime\"));\n    Inputmask({\"regex\": \"^([01]?[0-9]|2[0-3]):[0-5][0-9]\"}).mask(document.getElementById(\"id_deptime\"));\n    Inputmask({\"regex\": \"^([01]?[0-9]|2[0-3]):[0-5][0-9]\"}).mask(document.getElementById(\"id_arrtime\"));\n    Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_nighttime\"));\n    Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_ifrtime\"));\n    Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp1day\"));\n    Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp1night\"));\n\n    // Check for new logentries noting landings of both instructor and student\n    if (this.getLogentryId() == 0) {\n        Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp2day\"));\n        Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp2night\"));\n    }\n};\n\n/**\n * Sets the input mask for all masked elements.\n *\n * @method registerChangeListeners\n */\nModalLogEntryForm.prototype.registerChangeListeners = function() {\n\n    // PIREP search trigger\n    if (this.hasFindPIREP()) {\n        var pirepbutton = $('#id_find_pirep');\n        pirepbutton.on('click', function(e) {\n            if (!isNaN($('#id_p1pirep').val())) {\n                return this.getPIREPData(e);\n            }\n        }.bind(this));\n    }\n\n    // Update elements based on selected flighttype (Training/Solo)\n    var flighttype = $('input[name=\"flighttype\"]');\n    flighttype.on('change', function() {\n        // Assign the value selected in the radio buttons to the hidden flight type element\n        $(\"input[name='flighttypehidden']\").val($(\"input[name='flighttype']:checked\").val());\n        this.doDynamicDisplay();\n        this.applyFlightTimes();\n    }.bind(this));\n\n    // Update flight times when the test result status is changed\n    var passfail = $('input[name=\"passfail\"]');\n    passfail.on('change', function() {\n        this.doDynamicDisplay();\n        this.applyFlightTimes();\n    }.bind(this));\n\n    // Update flight times when the test result status is changed\n    var flightrule = $('input[name=\"flightrule\"]');\n    flightrule.on('change', function() {\n        this.doDynamicDisplay();\n        this.applyFlightTimes();\n    }.bind(this));\n\n    // The onchange property has to be set due to the flighttime element being masked\n    flighttime = document.getElementById(\"id_flighttime\");\n    flighttime.onchange = function() {\n        return this.applyFlightTimes(true);\n    }.bind(this);\n};\n\n/**\n * Get and populate log entry data from\n * the server's PIREP lookup service.\n *\n * @method getPIREPData\n * @param  {object} e The triggered event\n * @return {object} pirep of the logentry\n */\n ModalLogEntryForm.prototype.getPIREPData = function(e) {\n    var loadingContainer = this.getFooter().find(SELECTORS.LOADING_ICON_CONTAINER);\n    rule = $(Selectors.bookingwrapper).data('trainingtype');\n    pirepdiv = $('#id_p1pirep').parent();\n    pirep = $('#id_p1pirep').val();\n    courseid = this.getCourseId();\n    exerciseid = this.getExerciseId();\n    sessionid = this.getSessionId();\n\n    if (pirep != '') {\n        loadingContainer.removeClass('hidden');\n        return Repository.findPirep(pirep, courseid, $('#id_p1id').val(), exerciseid)\n            .then(function(response) {\n                // Clean up any past client side errors\n                $('#id_p1pirep').removeClass('is-invalid');\n\n                // Handle the response\n                if (response.result) {\n                    // Get found message\n                    if (!$('#id_valid_p1pirep').length) {\n                        Str.get_string('pirepfound', 'local_booking').then(function(string) {\n                            pirepdiv.append('<div class=\"form-control-feedback valid-feedback\" id=\"id_valid_p1pirep\" ' +\n                            'tabindex=\"0\" style=\"\">' + string + '</div>');\n                            $('#id_p1pirep').addClass('is-valid');\n                            return string;\n                        })\n                        .fail(Notification.exception);\n                    }\n\n                    // Update elements with PIREP returned data depending on\n                    // solo flight status and flight rule (Dual/Multicrew)\n                    var d = new Date(response.logentry.flightdate * 1000),\n                        month = '' + (d.getMonth() + 1),\n                        day = '' + d.getDate(),\n                        year = d.getFullYear(),\n                        time = response.logentry.deptime,\n                        hour = time.substring(0, 2),\n                        minute = time.substring(time.indexOf(':') + 1, time.length);\n                    // Fill remaining data\n                    $('#id_flightdate_day').val(day);\n                    $('#id_flightdate_month').val(month);\n                    $('#id_flightdate_year').val(year);\n                    $('#id_flightdate_hour').val(hour);\n                    $('#id_flightdate_minute').val(minute);\n                    $('input[name=\"linkedpirep\"]').val(response.logentry.linkedpirep);\n                    $('#id_flighttime').val(response.logentry.flighttime);\n                    $('#id_depicao').val(response.logentry.depicao);\n                    $('#id_arricao').val(response.logentry.arricao);\n                    $('#id_deptime').val(response.logentry.deptime);\n                    $('#id_arrtime').val(response.logentry.arrtime);\n                    $('#id_callsign').val(response.logentry.callsign);\n                    $('#id_aircraft').val(response.logentry.aircraft);\n                    $('#id_aircraftreg').val(response.logentry.aircraftreg);\n                    $('#id_enginetype').val(response.logentry.enginetype);\n                    $('#id_route').val(response.logentry.route);\n                    $('#id_fstd').val(response.logentry.fstd);\n                    this.doDynamicDisplay();\n                    this.applyFlightTimes();\n                } else {\n                    // Display inline error for the PIREP then clear it and give it focus\n                    $('#id_p1pirep').addClass('is-invalid');\n                    if (!$('#id_error2_p1pirep').length) {\n                        pirepdiv.append('<div class=\"form-control-feedback invalid-feedback\" id=\"id_error2_p1pirep\" ' +\n                            'tabindex=\"0\" style=\"\">' + response.warnings[0].message + '</div>');\n                        $('#id_p1pirep').val('');\n                        $('#id_p1pirep').focus();\n                    } else {\n                        $('#id_error2_p1pirep').show();\n                    }\n                    // Make sure the find button is always after the P1 PIREP element\n                    if (this.hasFindPIREP()) {\n                        $('#id_p1pirep').parent().each(function() {\n                            $('#id_find_pirep').insertAfter($('#id_p1pirep'), this);\n                        });\n                    }\n                }\n\n                return;\n            }.bind(this))\n            .always(function() {\n                // Regardless of success or error we should always stop\n                // the loading icon and re-enable the buttons.\n                loadingContainer.addClass('hidden');\n                e.preventDefault();\n                e.stopPropagation();\n\n                return;\n            })\n            .fail(Notification.exception);\n    } else {\n        return '';\n    }\n};\n\n/**\n * Apply default values set flight operation\n * Dual vs Multicrew taking solo flights in conisderation\n *\n * Populates a log book entry with a modal form data.\n *\n * @param {bool} force Force applying flight times\n * @method applyFlightTimes\n */\n ModalLogEntryForm.prototype.applyFlightTimes = function(force) {\n\n    const rule = $(Selectors.bookingwrapper).data('trainingtype');\n    var flighttype = $(\"input[name='flighttypehidden']\").val(),\n        flighttime = $('#id_flighttime').val(),\n        passfail = $(\"input[name='passfail']:checked\").val(),\n        ifr = $(\"input[name='flightrule']:checked\").val() == 'ifr',\n        editmode = this.getLogentryId() != 0,\n        newentry = !editmode;\n\n    // Check the training rule type\n    if (newentry || force) {\n        if (flighttype == 'training' || (flighttype == 'check' && passfail == 'fail')) {\n            $('#id_dualtime').val(rule == 'Dual' ? flighttime : '');\n            $('#id_ifrtime').val(ifr ? flighttime : '');\n            $('#id_multipilottime').val(rule == 'Multicrew' ? flighttime : '');\n            $('#id_copilottime').val(rule == 'Multicrew' ? flighttime : '');\n            $('#id_checkpilottime').val(flighttype == 'check' ? flighttime : '');\n            $('#id_picustime').val('');\n        } else if (flighttype == 'solo') {\n            $('#id_ifrtime').val(ifr ? flighttime : '');\n            $('#id_dualtime').val('');\n            $('#id_multipilottime').val('');\n            $('#id_copilottime').val('');\n            $('#id_picustime').val('');\n        } else if (flighttype == 'check' || passfail == 'pass') {\n            $('#id_ifrtime').val(ifr ? flighttime : '');\n            $('#id_picustime').val(flighttime);\n            $('#id_checkpilottime').val(flighttime);\n            $('#id_multipilottime').val(rule == 'Multicrew' ? flighttime : '');\n            $('#id_dualtime').val('');\n            $('#id_copilottime').val('');\n        }\n    }\n };\n\n/**\n * Apply default values set flight operation\n * Dual vs Multicrew taking solo flights in conisderation\n *\n * Populates a log book entry with a modal form data.\n *\n * @method doDynamicDisplay\n */\n ModalLogEntryForm.prototype.doDynamicDisplay = function() {\n\n    const rule = $(Selectors.bookingwrapper).data('trainingtype');\n    var flighttype = $(\"input[name='flighttypehidden']\").val(),\n        passfail = $(\"input[name='passfail']:checked\").val(),\n        ifr = $(\"input[name='flightrule']:checked\").val() == 'ifr',\n        editmode = this.getLogentryId() != 0;\n\n    // Toggle the display of elements depending on flight type\n    var toggle = function(div, element, show, value, force = false) {\n        if (typeof div !== 'undefined' && typeof element !== 'undefined') {\n            // Check expanded status of Advanced elements\n            var ariaexpanded = this.getForm().find('[aria-expanded=\"true\"]').attr('aria-expanded');\n            if (ariaexpanded || force) {\n                if (show) {\n                    $(div).slideDown('fast');\n                } else {\n                    $(div).slideUp('fast');\n                }\n            }\n\n            // Process the passed value\n            if (typeof value !== 'undefined') {\n                $(element).val(value);\n            }\n        }\n    }.bind(this);\n\n    // Set dynamic element labels\n    var setLabel = function(element, editlabelkey, labelkey) {\n        if (editmode) {\n            Str.get_string(editlabelkey, 'local_booking').then(function(label) {\n                $(element).text(label);\n                return label;\n            }).fail(Notification.exception);\n        } else {\n            Str.get_string(labelkey, 'local_booking').then(function(label) {\n                $(element).text(label);\n                return label;\n            }).fail(Notification.exception);\n        }\n    };\n\n    // TODO: Instructor logentry edit:\n    // // Toggle PIC time in new and edit\n    // toggle('#fitem_id_pictime', '#id_pictime', $('#id_pictime').val());\n\n    // Check the training rule type\n    if (flighttype == 'training' || (flighttype == 'check' && passfail == 'fail')) {\n\n        // Set P1 id and label, and handle edit mode\n        if (flighttype == 'training' || editmode) {\n            p1label = rule == 'Dual' ? 'p1dual' : 'p1multicrew';\n        } else {\n            p1label = 'examiner';\n        }\n\n        setLabel(\"label[for='id_p1pirep']\", 'pirep', flighttype == 'training' ? 'instpirep' : 'examinerpirep');\n        setLabel(\"label[for='id_p1id']\", p1label, p1label);\n\n        // Toggle showing elements conditionally for training flight and failed check flights\n        toggle('#fitem_id_p2id', '#id_p2id', true);\n        toggle('#fitem_id_dualtime', '#id_dualtime', rule == 'Dual');\n        toggle('#fitem_id_groundtime', '#id_groundtime', true, $('#id_groundtime').val(), true);\n        toggle('#fitem_id_ifrtime', '#id_ifrtime', ifr);\n        toggle('#fitem_id_nighttime', '#id_nighttime', ifr);\n        toggle('#fitem_id_multipilottime', '#id_multipilottime', rule == 'Multicrew');\n        toggle('#fitem_id_copilottime', '#id_copilottime', rule == 'Multicrew');\n\n        // Toggle hiding elements\n        toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false);\n        toggle('#fitem_id_picustime', '#id_picustime', false);\n\n        // TODO: Instructor logentry edit:\n        // // Toggle instructor time in new and edit\n        // toggle('#fitem_id_instructortime', '#id_instructortime', ((newentry && flighttype != 'check') || (editmode &&\n        //     $('#id_instructortime').val() != '')), editmode || flighttype == 'check' ?\n        //     $('#id_instructortime').val() ? $('#id_instructortime').val() : '' : flighttime);\n        // TODO: Instructor logentry edit:\n        // toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false, '');\n\n    } else if (flighttype == 'solo') {\n        // Set P1 PIREP label for student solo flights, and handle edit mode\n        setLabel(\"label[for='id_p1pirep']\", 'logbooksolopirep', 'logbooksolopirep');\n        setLabel(\"label[for='id_p1id']\", 'p2dual', 'p2dual');\n        if (!editmode) {\n            $('#id_p1id').val($('#id_p2id').val());\n        }\n\n        // Toggle showing elements for solo flight\n        toggle('#fitem_id_ifrtime', '#id_ifrtime', ifr);\n        $('#id_landingsp1day').val('1');\n        $('#id_landingsp2day').val('0');\n\n        // Toggle hiding elements for solo flights\n        toggle('#fitem_id_p2id', '#id_p2id', false, $('#id_p2id').val(), true);\n        toggle('#fitem_id_groundtime', '#id_groundtime', false, '', true);\n        toggle('#fitem_id_dualtime', '#id_dualtime', false);\n        toggle('#fitem_id_multipilottime', '#id_multipilottime', false);\n        toggle('#fitem_id_copilottime', '#id_copilottime', false);\n        toggle('#fitem_id_picustime', '#id_picustime', false);\n        toggle('#fgroup_id_landingsp2', '#id_landingsp2', false);\n\n        // TODO: Instructor logentry edit:\n        // toggle('#fitem_id_instructortime', '#id_instructortime', false);\n        // TODO: Instructor logentry edit:\n        // toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false);\n\n    } else if (flighttype == 'check' || passfail == 'pass') {\n        // Get id and label for P1 and PIREP\n        setLabel(\"label[for='id_p1pirep']\", 'pirep', 'examinerpirep');\n        setLabel(\"label[for='id_p1id']\", 'examiner', 'examiner');\n\n        // Toggle showing elements for passsed check flight\n        toggle('#fitem_id_p2id', '#id_p2id', true);\n        toggle('#fitem_id_ifrtime', '#id_ifrtime', ifr);\n        toggle('#fitem_id_multipilottime', '#id_multipilottime', rule == 'Multicrew');\n        toggle('#fitem_id_picustime', '#id_picustime', true);\n\n        // Toggle hiding elements for passed check flight\n        toggle('#fitem_id_dualtime', '#id_dualtime', false);\n        toggle('#fitem_id_copilottime', '#id_copilottime', false);\n\n        // TODO: Instructor logentry edit:\n        // toggle('#fitem_id_instructortime', '#id_instructortime', false);\n        toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false);\n    }\n};\n\n/**\n * Reload both the title and body content.\n *\n * @method reloadAllContent\n * @return {object} promise\n */\nModalLogEntryForm.prototype.reloadAllContent = function() {\n    return $.when(this.reloadTitleContent(), this.reloadBodyContent());\n};\n\n/**\n * Kick off a reload the modal content before showing it. This\n * is to allow us to re-use the same modal for creating and\n * editing different log book entries within the booking view page.\n *\n * We do the reload when showing the modal rather than hiding it\n * to save a request to the server if the user closes the modal\n * and never re-opens it.\n *\n * @method show\n */\nModalLogEntryForm.prototype.show = function() {\n    this.reloadAllContent();\n    Modal.prototype.show.call(this);\n};\n\n/**\n * Clear the logentry id from the modal when it's closed so\n * that it is loaded fresh next time it's displayed.\n *\n * The logentry id will be set by the calling code if it wants\n * to edit a specific log entry.\n *\n * @method hide\n */\nModalLogEntryForm.prototype.hide = function() {\n    Modal.prototype.hide.call(this);\n    this.setLogentryId(null);\n    this.setFlightDate(null);\n    this.setContextId(null);\n    this.setCourseId(null);\n    this.setExerciseId(null);\n    this.setSessionId(null);\n};\n\n/**\n * Get the serialised form data.\n *\n * @method getFormData\n * @return {string} serialised form data\n */\nModalLogEntryForm.prototype.getFormData = function() {\n    return this.getForm().serialize();\n};\n\n/**\n * Send the form data to the server to create or update\n * a log book entry.\n *\n * If there is a server side validation error then we re-request the\n * rendered form (with the data) from the server in order to get the\n * server side errors to display.\n *\n * On success the modal is hidden and the page is reloaded so that the\n * new log book entry will display in the booking view user tooltip.\n *\n * @method save\n * @return {object} A promise\n */\nModalLogEntryForm.prototype.save = function() {\n    var invalid,\n        loadingContainer = this.saveButton.find(SELECTORS.LOADING_ICON_CONTAINER);\n\n    // Set ground time to 0 for none training flights as it is a required a value\n    if (!($(\"input[name='flighttypehidden']\").val() == 'training')) {\n        $('#id_groundtime').val(\"00:00\");\n    }\n\n    // Now the change events have run, see if there are any \"invalid\" form fields.\n    invalid = this.getForm().find('[aria-invalid=\"true\"]');\n\n    // If we found invalid fields, focus on the first one and do not submit via ajax.\n    if (invalid.length) {\n        invalid.first().focus();\n        return;\n    }\n\n    loadingContainer.removeClass('hidden');\n    this.disableButtons();\n\n    var formData = this.getFormData();\n    var formArgs = 'contextid=' + this.contextId + '&courseid=' + this.courseId\n        + '&exerciseid=' + this.exerciseId + '&sessionid=' + this.sessionId + '&userid=' + this.userId;\n\n    // Send the form data to the server for processing.\n    // eslint-disable-next-line consistent-return\n    return Repository.submitCreateUpdateLogentryForm(formArgs, formData)\n        .then(function(response) {\n            if (response.validationerror) {\n                // If there was a server side validation error then\n                // we need to re-request the rendered form from the server\n                // in order to display the error for the user.\n                this.reloadBodyContent(formData);\n                return;\n            } else {\n                // Check whether this was a new logbook entry or not.\n                // check if the logentry is from the prgression view\n                // logentry from the confirmation view\n                // The hide function unsets the form data so grab this before the hide.\n                var isExisting = this.hasLogentryId();\n\n                // No problemo! Our work here is done.\n                this.hide();\n\n                // Trigger the appropriate logbook event so that the view can be updated.\n                if (isExisting) {\n                    $('body').trigger(LogbookEvents.logentryupdated, [response.logentry]);\n                } else {\n                    $('body').trigger(LogbookEvents.logentrycreated, [response.logentry]);\n                }\n            }\n\n            return;\n        }.bind(this))\n        .always(function() {\n            // Regardless of success or error we should always stop\n            // the loading icon and re-enable the buttons.\n            loadingContainer.addClass('hidden');\n            Notification.fetchNotifications();\n            this.enableButtons();\n\n            return;\n        }.bind(this))\n        .fail(Notification.exception);\n};\n\n/**\n * Set up all of the event handling for the modal.\n *\n * @method registerEventListeners\n */\nModalLogEntryForm.prototype.registerEventListeners = function() {\n    // Apply parent event listeners.\n    Modal.prototype.registerEventListeners.call(this);\n\n    // When the user clicks the save button we trigger the form submission. We need to\n    // trigger an actual submission because there is some JS code in the form that is\n    // listening for this event and doing some stuff (e.g. saving draft areas etc).\n    this.getModal().on(CustomEvents.events.activate, SELECTORS.SAVE_BUTTON, function(e, data) {\n        this.getForm().submit();\n        data.originalEvent.preventDefault();\n        e.stopPropagation();\n    }.bind(this));\n\n    // Catch the submit event before it is actually processed by the browser and\n    // prevent the submission. We'll take it from here.\n    this.getModal().on('submit', function(e) {\n        FormEvents.notifyFormSubmittedByJavascript(this.getForm()[0]);\n\n        this.save();\n\n        // Stop the form from actually submitting and prevent it's\n        // propagation because we have already handled the event.\n        e.preventDefault();\n        e.stopPropagation();\n    }.bind(this));\n\n    // Register a lister to Update elements for Advanced section when expanded, after its loaded\n    this.getModal().on('click', 'a[aria-expanded]', function() {\n        setTimeout(function() {\n            this.doDynamicDisplay();\n         }.bind(this), 100);\n    }.bind(this));\n};\n\n// Automatically register with the modal registry the first time this module is imported so that you can create modals\n// of this type using the modal factory.\nif (!registered) {\n    ModalRegistry.register(ModalLogEntryForm.TYPE, ModalLogEntryForm, 'local_booking/modal_logentry_form');\n    registered = true;\n}\n\nreturn ModalLogEntryForm;\n});\n"],"names":["define","$","FormEvents","Str","Notification","CustomEvents","Modal","ModalRegistry","Fragment","LogbookEvents","Repository","Selectors","registered","SELECTORS","ModalLogEntryForm","root","call","this","contextId","courseId","userId","logentryId","flightDate","exerciseId","sessionId","pirepLookupId","hasfindpirep","reloadingBody","reloadingTitle","saveButton","getFooter","find","TYPE","prototype","Object","create","constructor","setContextId","id","getContextId","setCourseId","getCourseId","hasCourseId","setExerciseId","getExerciseId","hasExerciseId","setSessionId","getSessionId","hasSessionId","setUserId","getUserId","hasUserId","setLogentryId","getLogentryId","hasLogentryId","setFlightDate","time","getFlightDate","hasFlightDate","setFlightType","flighttype","flightType","getFlightType","hasFindPIREP","getForm","getBody","disableButtons","prop","enableButtons","reloadTitleContent","titlePromise","getExerciseName","then","response","exercisename","fail","exception","string","setTitle","bind","always","reloadBodyContent","formData","bodyPromise","args","userid","logentryid","flightdate","courseid","exerciseid","sessionid","formdata","loadFragment","setBody","length","p1pirep","parent","prepend","append","doDynamicDisplay","setInputMask","registerChangeListeners","bookingwrapper","data","Inputmask","mask","document","getElementById","val","on","e","isNaN","getPIREPData","applyFlightTimes","flighttime","onchange","loadingContainer","rule","pirepdiv","pirep","removeClass","findPirep","result","get_string","addClass","d","Date","logentry","month","getMonth","day","getDate","year","getFullYear","deptime","hour","substring","minute","indexOf","linkedpirep","depicao","arricao","arrtime","callsign","aircraft","aircraftreg","enginetype","route","fstd","show","warnings","message","focus","each","insertAfter","preventDefault","stopPropagation","force","passfail","ifr","editmode","toggle","div","element","value","ariaexpanded","attr","slideDown","slideUp","setLabel","editlabelkey","labelkey","label","text","p1label","reloadAllContent","when","hide","getFormData","serialize","save","invalid","formArgs","submitCreateUpdateLogentryForm","validationerror","isExisting","trigger","logentryupdated","logentrycreated","fetchNotifications","first","registerEventListeners","getModal","events","activate","submit","originalEvent","notifyFormSubmittedByJavascript","setTimeout","register"],"mappings":"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"}