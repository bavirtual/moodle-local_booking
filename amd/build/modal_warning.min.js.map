{"version":3,"file":"modal_warning.min.js","sources":["../src/modal_warning.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Generic warning modal.\n *\n * @module     local_booking/modal_warning\n * @author     Mustafa Hajjar (mustafa.hajjar)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as CustomEvents from 'core/custom_interaction_events';\nimport Modal from 'core/modal';\nimport ModalEvents from 'core/modal_events';\n\nconst SELECTORS = {\n    OK_BUTTON: '[data-action=\"ok\"]',\n};\n\n\n/**\n * Constructor for the Modal.\n *\n * @class\n * @param {object} root The root jQuery element for the modal\n */\nexport default class ModalWarning extends Modal {\n    static TYPE = 'local_booking-modal_warning';\n    static TEMPLATE = 'local_booking/availability_warning_modal';\n\n    constructor(root) {\n        super(root);\n        this.setRemoveOnClose(true);\n    }\n\n    /**\n     * Set up all of the event handling for the modal.\n     *\n     * @method registerEventListeners\n     */\n    registerEventListeners() {\n        // Apply parent event listeners.\n        super.registerEventListeners(this);\n\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.OK_BUTTON, function(e, data) {\n            const cancelEvent = $.Event(ModalEvents.cancel);\n            this.getRoot().trigger(cancelEvent, this);\n\n            if (!cancelEvent.isDefaultPrevented()) {\n                this.hide();\n                data.originalEvent.preventDefault();\n            }\n        }.bind(this));\n    }\n\n}\n\nModalWarning.registerModalType();"],"names":["SELECTORS","ModalWarning","Modal","constructor","root","setRemoveOnClose","registerEventListeners","this","getModal","on","CustomEvents","events","activate","e","data","cancelEvent","$","Event","ModalEvents","cancel","getRoot","trigger","isDefaultPrevented","hide","originalEvent","preventDefault","bind","registerModalType"],"mappings":"mkDA6BMA,oBACS,2BAUMC,qBAAqBC,eAItCC,YAAYC,YACFA,WACDC,kBAAiB,GAQ1BC,+BAEUA,uBAAuBC,WAExBC,WAAWC,GAAGC,aAAaC,OAAOC,SAAUZ,oBAAqB,SAASa,EAAGC,YACxEC,YAAcC,gBAAEC,MAAMC,sBAAYC,aACnCC,UAAUC,QAAQN,YAAaR,MAE/BQ,YAAYO,4BACRC,OACLT,KAAKU,cAAcC,mBAEzBC,KAAKnB,6DA1BMN,oBACH,+CADGA,wBAEC,4CA6BtBA,aAAa0B"}