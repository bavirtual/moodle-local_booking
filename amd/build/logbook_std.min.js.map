{"version":3,"file":"logbook_std.min.js","sources":["../src/logbook_std.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module is responsible for registering listeners\n * for logbook std view events.\n *\n * @module     local_booking/logbook_std\n * @author     Mustafa Hajjar (mustafa.hajjar)\n * @copyright  BAVirtual.co.uk Â© 2023\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n        'jquery',\n        'core/pending',\n        'core/templates',\n        'core/notification',\n        'local_booking/booking_view_manager',\n        'local_booking/modal_actions',\n        'local_booking/events',\n        'local_booking/logentry_edit_modal',\n        'local_booking/repository',\n        'local_booking/selectors'\n    ],\n    function(\n        $,\n        Pending,\n        Templates,\n        Notification,\n        ViewManager,\n        ModalActions,\n        BookingEvents,\n        ModalLogentryEditForm,\n        Repository,\n        Selectors\n    ) {\n\n    /**\n     * Register event listeners for session clicks.\n     *\n     * @param {object} root The root element.\n     */\n    const registerEventListeners = (root) => {\n\n        // Listen to logentry created events\n        $('body').on(BookingEvents.logentrycreated, function(e, logentry) {\n            // Refresh logbook\n            refreshNewLogentryContent(root, logentry);\n        });\n\n        // Listen to logentry updated events\n        $('body').on(BookingEvents.logentryupdated, function(e, logentry) {\n            // Refresh logbook\n            refreshLogentryContent(root, logentry);\n        });\n\n        // Listen to logentry deleted event\n        $('body').on(BookingEvents.logentrydeleted, function(e, logentryid) {\n            // Remove logentry from the logbook\n            $('#logentry_' + logentryid).slideUp(300);\n            e.stopImmediatePropagation();\n        });\n\n        // Get promise for the logentry form for create and edit\n        const contextId = $(Selectors.wrappers.logbookwrapper).data('contextid'),\n        courseId = $(Selectors.wrappers.logbookwrapper).data('courseid'),\n        userId = $(Selectors.wrappers.logbookwrapper).data('userid');\n\n        if (contextId) {\n            // Listen the edit click of a logbook entry.\n            root.on('click', Selectors.actions.edit, function(e) {\n                // From logbook\n                const target = e.target;\n                let logegntry = target.closest(Selectors.containers.summaryForm),\n                    logentryId = logegntry.dataset.logentryId;\n\n                // A logentry needs to be edited, show the modal form.\n                e.preventDefault();\n                e.stopPropagation();\n                registerLogentryEditForm(root, e, contextId, courseId, userId, logentryId);\n                e.stopImmediatePropagation();\n            });\n\n            // Listen the edit click of a logbook entry.\n            root.on('click', Selectors.actions.add, function(e) {\n                // A logentry needs to be created, show the modal form.\n                e.preventDefault();\n                e.stopPropagation();\n                registerLogentryAddForm(root, e, contextId, courseId, userId);\n                e.stopImmediatePropagation();\n            });\n        }\n    };\n\n    /**\n     * Refresh the logbook entry edited.\n     *\n     * @method  refreshNewLogentryContent\n     * @param   {object} root     The root element.\n     * @param   {object} logentry The updated logentry.\n     * @return  {promise}\n     */\n    const refreshNewLogentryContent = (root, logentry) => {\n\n        const courseId = $(Selectors.wrappers.logbookwrapper).data('courseid'),\n        userId = $(Selectors.wrappers.logbookwrapper).data('userid');\n\n        M.util.js_pending(root.get('id') + '-' + courseId);\n        return Repository.getLogentryById(logentry.id, courseId, userId)\n            .then((response) => {\n                return Templates.render('local_booking/logbook_std_logentry', response.logentry);\n            })\n            .then((html) => {\n                $('#logbook-summary').after(html);\n                root.find('.logbook-shadow1:first').hide().slideDown(300);\n                return;\n            })\n            .always(() => {\n                M.util.js_complete(root.get('id') + '-' + courseId);\n                return;\n            })\n            .fail(Notification.exception);\n    };\n\n    /**\n     * Refresh the logbook entry edited.\n     *\n     * @method  refreshLogentryContent\n     * @param   {object} root     The root element.\n     * @param   {object} logentry The updated logentry.\n     * @return  {promise}\n     */\n    const refreshLogentryContent = (root, logentry) => {\n        let card = $('#cardid_' + logentry.id);\n\n        showPlaceholder(card);\n\n        const courseId = $(Selectors.wrappers.logbookwrapper).data('courseid'),\n        userId = $(Selectors.wrappers.logbookwrapper).data('userid');\n\n        M.util.js_pending(root.get('id') + '-' + courseId);\n        return Repository.getLogentryById(logentry.id, courseId, userId)\n            .then((response) => {\n                return Templates.render('local_booking/logbook_std_detail', response.logentry);\n            })\n            .then((html, js) => {\n                return Templates.replaceNode(card, html, js);\n            })\n            .always(() => {\n                M.util.js_complete(root.get('id') + '-' + courseId);\n                return showContent(card);\n            })\n            .fail(Notification.exception);\n    };\n\n    /**\n     * Register the form and listeners required for\n     * creating logentries.\n     *\n     * @method registerLogentryAddForm\n     * @param  {object} root       The root element.\n     * @param  {object} e          The triggered event.\n     * @param  {Number} contextId  The course context id of the logentry.\n     * @param  {Number} courseId   The course id of the logentry.\n     * @param  {Number} userId     The user id the logentry belongs to.\n     */\n    const registerLogentryAddForm = (root, e, contextId, courseId, userId) => {\n        const LogentryFormPromise = ModalLogentryEditForm.create();\n        const target = e.target;\n        const pendingPromise = new Pending('local_booking/registerLogentryEditForm');\n\n        ViewManager.renderLogentryEditForm(root, e, LogentryFormPromise, target, contextId, courseId, userId,\n            0, true, 'local_booking/logbook_std')\n        .then(pendingPromise.resolve())\n        .catch(window.console.error);\n    };\n\n    /**\n     * Register the form and listeners required for\n     * creating and editing logentries.\n     *\n     * @method registerLogentryEditForm\n     * @param  {object} root       The root element.\n     * @param  {object} e          The triggered event.\n     * @param  {Number} contextId  The course context id of the logentry.\n     * @param  {Number} courseId   The course id of the logentry.\n     * @param  {Number} userId     The user id the logentry belongs to.\n     * @param  {Number} logentryId The logentry id.\n     */\n    const registerLogentryEditForm = (root, e, contextId, courseId, userId, logentryId) => {\n        const LogentryFormPromise = ModalLogentryEditForm.create();\n        const target = e.target;\n        const pendingPromise = new Pending('local_booking/registerLogentryEditForm');\n\n        ViewManager.renderLogentryEditForm(root, e, LogentryFormPromise, target, contextId, courseId, userId,\n            logentryId, false, 'local_booking/logbook_std')\n        .then(pendingPromise.resolve())\n        .catch(window.console.error);\n    };\n\n    /**\n     * Show the empty message when no logentries are found.\n     *\n     * @param {object} card The card element for the logentry view.\n     */\n    const showPlaceholder = function(card) {\n        card.find(Selectors.containers.loadingPlaceholder).removeClass('hidden');\n        card.find(Selectors.containers.content).addClass('hidden');\n    };\n\n    /**\n     * Show the empty message when no logentries are found.\n     *\n     * @param {object} card The card element for the logentry view.\n     */\n    const showContent = function(card) {\n        card.find(Selectors.containers.content).removeClass('hidden');\n        card.find(Selectors.containers.loadingPlaceholder).addClass('hidden');\n    };\n\n    return {\n        init: function(rt) {\n            var root = $(rt);\n            registerEventListeners(root);\n            ModalActions.registerDelete(root);\n            ViewManager.stopLoading(root);\n        }\n    };\n});\n"],"names":["define","$","Pending","Templates","Notification","ViewManager","ModalActions","BookingEvents","ModalLogentryEditForm","Repository","Selectors","refreshNewLogentryContent","root","logentry","courseId","wrappers","logbookwrapper","data","userId","M","util","js_pending","get","getLogentryById","id","then","response","render","html","after","find","hide","slideDown","always","js_complete","fail","exception","refreshLogentryContent","card","showPlaceholder","js","replaceNode","showContent","registerLogentryAddForm","e","contextId","LogentryFormPromise","create","target","pendingPromise","renderLogentryEditForm","resolve","catch","window","console","error","registerLogentryEditForm","logentryId","containers","loadingPlaceholder","removeClass","content","addClass","init","rt","on","logentrycreated","logentryupdated","logentrydeleted","logentryid","slideUp","stopImmediatePropagation","actions","edit","closest","summaryForm","dataset","preventDefault","stopPropagation","add","registerEventListeners","registerDelete","stopLoading"],"mappings":"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"}