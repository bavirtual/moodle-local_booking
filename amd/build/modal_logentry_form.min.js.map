{"version":3,"sources":["../src/modal_logentry_form.js"],"names":["define","$","Event","Str","Notification","CustomEvents","Modal","ModalRegistry","Fragment","LogbookEvents","Repository","registered","SELECTORS","SAVE_BUTTON","LOADING_ICON_CONTAINER","ModalLogEntryForm","root","call","logentryId","sessionDate","exerciseId","courseId","contextId","userId","isAdditional","reloadingBody","reloadingTitle","saveButton","getFooter","find","TYPE","prototype","Object","create","constructor","setContextId","id","getContextId","setCourseId","getCourseId","hasCourseId","setExerciseId","getExerciseId","hasExerciseId","setUserId","getUserId","hasUserId","setLogentryId","getLogentryId","hasLogentryId","setSessionDate","time","getSessionDate","hasSessionDate","setAdditionalEntry","additionalEntry","isAdditionalEntry","getForm","getBody","disableButtons","prop","enableButtons","reloadTitleContent","titlePromise","get_string","then","string","setTitle","bind","always","fail","exception","reloadBodyContent","formData","bodyPromise","args","userid","logentryid","sessiondate","courseid","exerciseid","formdata","loadFragment","setBody","document","ready","flighttimemins","getElementById","soloflighttimemins","sessiontimemins","Inputmask","mask","reloadAllContent","when","show","hide","getFormData","serialize","save","invalid","loadingContainer","length","first","focus","removeClass","formArgs","submitCreateUpdateLogentryForm","response","validationerror","isExisting","isAddedEntry","trigger","updated","logentry","created","addClass","fetchNotifications","registerEventListeners","getModal","on","events","activate","e","data","submit","originalEvent","preventDefault","stopPropagation","notifyFormSubmitAjax","register"],"mappings":"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","sourcesContent":["/* eslint-disable babel/new-cap */\n/* eslint-disable no-undef */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles logbook entry form\n * Improvised from core_calendar.\n *\n * @module     local_booking/modal_logentry_form\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk © 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n            'jquery',\n            'core/event',\n            'core/str',\n            'core/notification',\n            'core/custom_interaction_events',\n            'core/modal',\n            'core/modal_registry',\n            'core/fragment',\n            'local_booking/events',\n            'local_booking/repository',\n        ],\n        function(\n            $,\n            Event,\n            Str,\n            Notification,\n            CustomEvents,\n            Modal,\n            ModalRegistry,\n            Fragment,\n            LogbookEvents,\n            Repository,\n        ) {\n\n    var registered = false;\n    var SELECTORS = {\n        SAVE_BUTTON: '[data-action=\"save\"]',\n        LOADING_ICON_CONTAINER: '[data-region=\"loading-icon-container\"]',\n    };\n\n    /**\n     * Constructor for the Modal.\n     *\n     * @param {object} root The root jQuery element for the modal\n     */\n    var ModalLogEntryForm = function(root) {\n        Modal.call(this, root);\n        this.logentryId = null;\n        this.sessionDate = null;\n        this.exerciseId = null;\n        this.courseId = null;\n        this.contextId = null;\n        this.userId = null;\n        this.isAdditional = null;\n        this.reloadingBody = false;\n        this.reloadingTitle = false;\n        this.saveButton = this.getFooter().find(SELECTORS.SAVE_BUTTON);\n    };\n\n    ModalLogEntryForm.TYPE = 'local_booking-modal_logentry_form';\n    ModalLogEntryForm.prototype = Object.create(Modal.prototype);\n    ModalLogEntryForm.prototype.constructor = ModalLogEntryForm;\n\n    /**\n     * Set the context id to the given value.\n     *\n     * @method setContextId\n     * @param {Number} id The context id\n     */\n    ModalLogEntryForm.prototype.setContextId = function(id) {\n        this.contextId = id;\n    };\n\n    /**\n     * Retrieve the current context id, if any.\n     *\n     * @method getContextId\n     * @return {Number|null} The context id\n     */\n    ModalLogEntryForm.prototype.getContextId = function() {\n        return this.contextId;\n    };\n\n    /**\n     * Set the course id to the given value.\n     *\n     * @method setCourseId\n     * @param {int} id The course id\n     */\n    ModalLogEntryForm.prototype.setCourseId = function(id) {\n        this.courseId = id;\n    };\n\n    /**\n     * Retrieve the current course id, if any.\n     *\n     * @method getCourseId\n     * @return {int|null} The course id\n     */\n    ModalLogEntryForm.prototype.getCourseId = function() {\n        return this.courseId;\n    };\n\n    /**\n     * Check if the modal has an course id.\n     *\n     * @method hasCourseId\n     * @return {bool}\n     */\n    ModalLogEntryForm.prototype.hasCourseId = function() {\n        return this.courseId !== null;\n    };\n\n    /**\n     * Set the exercise id to the given value.\n     *\n     * @method setExerciseId\n     * @param {int} id The exercise id\n     */\n     ModalLogEntryForm.prototype.setExerciseId = function(id) {\n        this.exerciseId = id;\n    };\n\n    /**\n     * Retrieve the current exercise id, if any.\n     *\n     * @method getExerciseId\n     * @return {int|null} The exercise id\n     */\n    ModalLogEntryForm.prototype.getExerciseId = function() {\n        return this.exerciseId;\n    };\n\n    /**\n     * Check if the modal has an exercise id.\n     *\n     * @method hasExerciseId\n     * @return {bool}\n     */\n     ModalLogEntryForm.prototype.hasExerciseId = function() {\n        return this.exerciseId !== null;\n    };\n\n    /**\n     * Set the user id to the given value.\n     *\n     * @method setUserId\n     * @param {int} id The user id\n     */\n     ModalLogEntryForm.prototype.setUserId = function(id) {\n        this.userId = id;\n    };\n\n    /**\n     * Retrieve the current user id, if any.\n     *\n     * @method getUserId\n     * @return {int|null} The user id\n     */\n    ModalLogEntryForm.prototype.getUserId = function() {\n        return this.userId;\n    };\n\n    /**\n     * Check if the modal has an user id.\n     *\n     * @method hasUserId\n     * @return {bool}\n     */\n     ModalLogEntryForm.prototype.hasUserId = function() {\n        return this.userId !== null;\n    };\n\n    /**\n     * Set the logentry id to the given value.\n     *\n     * @method setLogentryId\n     * @param {int} id The logentry id\n     */\n    ModalLogEntryForm.prototype.setLogentryId = function(id) {\n        this.logentryId = id;\n    };\n\n    /**\n     * Retrieve the current logentry id, if any.\n     *\n     * @method getLogentryId\n     * @return {int|null} The logentry id\n     */\n    ModalLogEntryForm.prototype.getLogentryId = function() {\n        return this.logentryId;\n    };\n\n    /**\n     * Check if the modal has an logentry id.\n     *\n     * @method hasLogentryId\n     * @return {bool}\n     */\n    ModalLogEntryForm.prototype.hasLogentryId = function() {\n        return this.logentryId !== null && this.logentryId != 0;\n    };\n\n    /**\n     * Set the start time to the given value.\n     *\n     * @method setSessionDate\n     * @param {int} time The session date time\n     */\n    ModalLogEntryForm.prototype.setSessionDate = function(time) {\n        this.sessionDate = time;\n    };\n\n    /**\n     * Retrieve the current start time, if any.\n     *\n     * @method getSessionDate\n     * @return {int|null} The start time\n     */\n    ModalLogEntryForm.prototype.getSessionDate = function() {\n        return this.sessionDate;\n    };\n\n    /**\n     * Check if the modal has session date time.\n     *\n     * @method hasSessionDate\n     * @return {bool}\n     */\n    ModalLogEntryForm.prototype.hasSessionDate = function() {\n        return this.sessionDate !== null;\n    };\n\n    /**\n     * Set the modal isAdditional variable for new logbook\n     * entry triggered from the booking confrimation view.\n     *\n     * @method setAdditionalEntry\n     * @param {bool} additionalEntry Indicates additional logbook entry.\n     */\n    ModalLogEntryForm.prototype.setAdditionalEntry = function(additionalEntry) {\n        this.isAdditional = additionalEntry;\n    };\n\n    /**\n     * Check if the logbook entery is an additional entry\n     * triggered from the booking confirmation view.\n     *\n     * @method isAdditionalEntry\n     * @return {bool}\n     */\n    ModalLogEntryForm.prototype.isAdditionalEntry = function() {\n        return this.isAdditional;\n    };\n\n    /**\n     * Get the form element from the modal.\n     *\n     * @method getForm\n     * @return {object}\n     */\n    ModalLogEntryForm.prototype.getForm = function() {\n        return this.getBody().find('form');\n    };\n\n    /**\n     * Disable the buttons in the footer.\n     *\n     * @method disableButtons\n     */\n    ModalLogEntryForm.prototype.disableButtons = function() {\n        this.saveButton.prop('disabled', true);\n    };\n\n    /**\n     * Enable the buttons in the footer.\n     *\n     * @method enableButtons\n     */\n    ModalLogEntryForm.prototype.enableButtons = function() {\n        this.saveButton.prop('disabled', false);\n    };\n\n    /**\n     * Reload the title for the modal to the appropriate value\n     * depending on whether we are creating a new log book entry\n     * or editing an existing one.\n     *\n     * @method reloadTitleContent\n     * @return {object} A promise resolved with the new title text\n     */\n    ModalLogEntryForm.prototype.reloadTitleContent = function() {\n        if (this.reloadingTitle) {\n            return this.titlePromise;\n        }\n\n        this.reloadingTitle = true;\n\n        if (this.hasLogentryId()) {\n            this.titlePromise = Str.get_string('editlogentry', 'local_booking');\n        } else {\n            this.titlePromise = Str.get_string('newlogentry', 'local_booking');\n        }\n\n        this.titlePromise.then(function(string) {\n            this.setTitle(string);\n            return string;\n        }.bind(this))\n        .always(function() {\n            this.reloadingTitle = false;\n            return;\n        }.bind(this))\n        .fail(Notification.exception);\n\n        return this.titlePromise;\n    };\n\n    /**\n     * Send a request to the server to get the logentry_form in a fragment\n     * and render the result in the body of the modal.\n     *\n     * If serialised form data is provided then it will be sent in the\n     * request to the server to have the form rendered with the data. This\n     * is used when the form had a server side error and we need the server\n     * to re-render it for us to display the error to the user.\n     *\n     * @method reloadBodyContent\n     * @param {string} formData The serialised form data\n     * @return {object} A promise resolved with the fragment html and js from\n     */\n    ModalLogEntryForm.prototype.reloadBodyContent = function(formData) {\n        if (this.reloadingBody) {\n            return this.bodyPromise;\n        }\n\n        this.reloadingBody = true;\n        this.disableButtons();\n\n        var args = {};\n\n        if (this.hasUserId()) {\n            args.userid = this.getUserId();\n        }\n\n        if (this.hasLogentryId()) {\n            args.logentryid = this.getLogentryId();\n        }\n\n        if (this.hasSessionDate()) {\n            args.sessiondate = this.getSessionDate();\n        }\n\n        if (this.hasCourseId()) {\n            args.courseid = this.getCourseId();\n        }\n\n        if (this.hasExerciseId()) {\n            args.exerciseid = this.getExerciseId();\n        }\n\n        if (typeof formData !== 'undefined') {\n            args.formdata = formData;\n        }\n\n        // Get the content of the modal\n        this.bodyPromise = Fragment.loadFragment('local_booking', 'logentry_form', this.getContextId(), args);\n\n        this.setBody(this.bodyPromise);\n\n        this.bodyPromise.then(function() {\n            this.enableButtons();\n\n            // Mask session, flight, and solo times < 5hrs\n            $(document).ready(function() {\n                var flighttimemins = document.getElementById(\"id_flighttimemins\"),\n                    soloflighttimemins = document.getElementById(\"id_soloflighttimemins\"),\n                    sessiontimemins = document.getElementById(\"id_sessiontimemins\");\n                Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(flighttimemins);\n                Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(soloflighttimemins);\n                Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(sessiontimemins);\n            });\n\n            return;\n        }.bind(this))\n        .fail(Notification.exception)\n        .always(function() {\n            this.reloadingBody = false;\n            return;\n        }.bind(this))\n        .fail(Notification.exception);\n\n        return this.bodyPromise;\n    };\n\n    /**\n     * Reload both the title and body content.\n     *\n     * @method reloadAllContent\n     * @return {object} promise\n     */\n    ModalLogEntryForm.prototype.reloadAllContent = function() {\n        return $.when(this.reloadTitleContent(), this.reloadBodyContent());\n    };\n\n    /**\n     * Kick off a reload the modal content before showing it. This\n     * is to allow us to re-use the same modal for creating and\n     * editing different log book entries within the booking view page.\n     *\n     * We do the reload when showing the modal rather than hiding it\n     * to save a request to the server if the user closes the modal\n     * and never re-opens it.\n     *\n     * @method show\n     */\n    ModalLogEntryForm.prototype.show = function() {\n        this.reloadAllContent();\n        Modal.prototype.show.call(this);\n    };\n\n    /**\n     * Clear the logentry id from the modal when it's closed so\n     * that it is loaded fresh next time it's displayed.\n     *\n     * The logentry id will be set by the calling code if it wants\n     * to edit a specific log entry.\n     *\n     * @method hide\n     */\n    ModalLogEntryForm.prototype.hide = function() {\n        Modal.prototype.hide.call(this);\n        this.setLogentryId(null);\n        this.setSessionDate(null);\n        this.setContextId(null);\n        this.setCourseId(null);\n        this.setExerciseId(null);\n    };\n\n    /**\n     * Get the serialised form data.\n     *\n     * @method getFormData\n     * @return {string} serialised form data\n     */\n    ModalLogEntryForm.prototype.getFormData = function() {\n        return this.getForm().serialize();\n    };\n\n    /**\n     * Send the form data to the server to create or update\n     * a log book entry.\n     *\n     * If there is a server side validation error then we re-request the\n     * rendered form (with the data) from the server in order to get the\n     * server side errors to display.\n     *\n     * On success the modal is hidden and the page is reloaded so that the\n     * new log book entry will display in the booking view user tooltip.\n     *\n     * @method save\n     * @return {object} A promise\n     */\n    ModalLogEntryForm.prototype.save = function() {\n        var invalid,\n            loadingContainer = this.saveButton.find(SELECTORS.LOADING_ICON_CONTAINER);\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        invalid = this.getForm().find('[aria-invalid=\"true\"]');\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return;\n        }\n\n        loadingContainer.removeClass('hidden');\n        this.disableButtons();\n\n        var formData = this.getFormData();\n        var formArgs = 'contextid=' + this.contextId + '&courseid=' + this.courseId\n            + '&exerciseid=' + this.exerciseId + '&userid=' + this.userId;\n\n        // Send the form data to the server for processing.\n        // eslint-disable-next-line consistent-return\n        return Repository.submitCreateUpdateLogentryForm(formArgs, formData)\n            .then(function(response) {\n                if (response.validationerror) {\n                    // If there was a server side validation error then\n                    // we need to re-request the rendered form from the server\n                    // in order to display the error for the user.\n                    this.reloadBodyContent(formData);\n                    return;\n                } else {\n                    // Check whether this was a new logbook entry or not.\n                    // check if the logentry is from the prgression view or an additional\n                    // logentry from the confirmation view\n                    // The hide function unsets the form data so grab this before the hide.\n                    var isExisting = this.hasLogentryId();\n                    var isAddedEntry = this.isAdditionalEntry();\n\n                    // No problemo! Our work here is done.\n                    this.hide();\n\n                    // Trigger the appropriate logbook event so that the view can be updated.\n                    if (isExisting) {\n                        $('body').trigger(LogbookEvents.updated, [response.logentry]);\n                    } else if (!isAddedEntry) {\n                        $('body').trigger(LogbookEvents.created, [response.logentry]);\n                    }\n                }\n\n                return;\n            }.bind(this))\n            .always(function() {\n                // Regardless of success or error we should always stop\n                // the loading icon and re-enable the buttons.\n                loadingContainer.addClass('hidden');\n                Notification.fetchNotifications();\n                this.enableButtons();\n\n                return;\n            }.bind(this))\n            .fail(Notification.exception);\n    };\n\n    /**\n     * Set up all of the event handling for the modal.\n     *\n     * @method registerEventListeners\n     */\n    ModalLogEntryForm.prototype.registerEventListeners = function() {\n        // Apply parent event listeners.\n        Modal.prototype.registerEventListeners.call(this);\n\n        // When the user clicks the save button we trigger the form submission. We need to\n        // trigger an actual submission because there is some JS code in the form that is\n        // listening for this event and doing some stuff (e.g. saving draft areas etc).\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.SAVE_BUTTON, function(e, data) {\n            this.getForm().submit();\n            data.originalEvent.preventDefault();\n            e.stopPropagation();\n        }.bind(this));\n\n        // Catch the submit event before it is actually processed by the browser and\n        // prevent the submission. We'll take it from here.\n        this.getModal().on('submit', function(e) {\n            Event.notifyFormSubmitAjax(this.getForm()[0]);\n\n            this.save();\n\n            // Stop the form from actually submitting and prevent it's\n            // propagation because we have already handled the event.\n            e.preventDefault();\n            e.stopPropagation();\n        }.bind(this));\n    };\n\n    // Automatically register with the modal registry the first time this module is imported so that you can create modals\n    // of this type using the modal factory.\n    if (!registered) {\n        ModalRegistry.register(ModalLogEntryForm.TYPE, ModalLogEntryForm, 'local_booking/modal_logentry_form');\n        registered = true;\n    }\n\n    return ModalLogEntryForm;\n});\n"],"file":"modal_logentry_form.min.js"}