{"version":3,"file":"calendar_actions.min.js","sources":["../src/calendar_actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the quick add or update event modal.\n *\n * @module     local_booking/calendar_actions\n * @author     Mustafa Hajjar (mustafa.hajjar)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery',\n    'core/notification',\n    'local_booking/repository',\n    'local_booking/calendar_view_manager',\n    'local_booking/events',\n    'local_booking/modal_actions',\n    'local_booking/selectors',\n    ],\n    function(\n        $,\n        Notification,\n        Repository,\n        CalendarViewManager,\n        BookingEvents,\n        ModalActions,\n        Selectors,\n    ) {\n\n    var SELECTORS = {\n        LOADING_ICON_CONTAINER: '[data-region=\"loading-icon-container\"]',\n    };\n\n    var Slots = [];\n    var BookedSlots = [];\n    var SlotIndexes = [];\n    let postActive = false;\n    let formSaved = true;\n\n    /**\n     * Save marked availability posts.\n     *\n     * @method saveWeekSlots\n     * @param {object} root The calendar root element\n     * @param {event} e The calendar move event\n     * @return {object} The create modal promise\n     */\n    function saveWeekSlots(root, e = null) {\n\n        CalendarViewManager.startLoading(root);\n\n        // Get year and week\n        const course = root.find(Selectors.wrappers.calendarwrapper).data('courseid'),\n              year = root.find(Selectors.wrappers.calendarwrapper).data('year'),\n              week = root.find(Selectors.wrappers.calendarwrapper).data('week'),\n              time = root.find(Selectors.wrappers.calendarwrapper).data('time'),\n              eventData = e !== null ? e.eventData : {year, week, time, course},\n              minslotperiod = root.find(Selectors.wrappers.calendarwrapper).data('minslotperiod'),\n              unixTsHr = 3600,\n              lastMinute = 60;\n\n        // Get marked availability slots\n        getSlots(root);\n\n        // Evaluate each slot to ensure it is a minimum of 2hrs if minimum slots is required (minslotperiod!=0)\n        let minSlotPeriodMet = true;\n        $.map(Slots, function(val) {\n            if ((val.endtime - val.starttime + lastMinute) < (minslotperiod * unixTsHr) && minslotperiod != 0) {\n                minSlotPeriodMet = false;\n            }\n        });\n\n        if (minSlotPeriodMet) {\n            let serverCall = null;\n            if (Slots.length != 0) {\n                serverCall = Repository.saveSlots(Slots, course, year, week);\n            } else {\n                serverCall = Repository.clearSlots(course, year, week);\n            }\n\n            // Send a request to the server to clear slots.\n            return serverCall\n                .then(function(response) {\n                    if (response.validationerror) {\n                        // eslint-disable-next-line no-alert\n                        alert('Errors encountered: Unable to process availability posting action!');\n                    }\n                    clean();\n                    const slotsSavedEvent = $.Event(BookingEvents.slotsSaved, {'eventData': eventData});\n                    root.trigger(slotsSavedEvent, this);\n\n                    return;\n                })\n                .always(function() {\n                    Notification.fetchNotifications();\n                    return CalendarViewManager.stopLoading(root);\n                })\n                .fail(Notification.exception);\n        } else {\n            // Show warning message\n            CalendarViewManager.stopLoading(root);\n            ModalActions.showWarning('warnminslotperiod', 'warnminslotperiodtitle', minslotperiod, {fromComponent: true});\n            return false;\n        }\n    }\n\n    /**\n     * Save marked booking posts.\n     *\n     * @method saveBookedSlot\n     * @param {object} root The calendar root element\n     * @return {object} The create modal promise\n     */\n     async function saveBookedSlot(root) {\n\n        const bookButton = $(Selectors.regions.bookbutton),\n              loadingContainer = bookButton.find(SELECTORS.LOADING_ICON_CONTAINER);\n\n            loadingContainer.removeClass('hidden');\n            bookButton.prop('disabled', true);\n            CalendarViewManager.startLoading(root);\n\n            // Get exercise id and the user id from the URL\n            const course = $(Selectors.wrappers.calendarwrapper).data('courseid');\n            const exercise = $(Selectors.wrappers.calendarwrapper).data('exercise-id');\n            const studentid = $(Selectors.wrappers.calendarwrapper).data('student-id');\n\n            // Get marked availability slots\n            getSlots(root, 'book');\n\n            // Check if the instructor has conflicting bookings\n            let hasConflictingBooking = await Repository.hasConflictingBooking(studentid, BookedSlots[0])\n                .then(function(response) {\n                    if (response.validationerror) {\n                        // eslint-disable-next-line no-alert\n                        alert('Errors encountered: Unable to check conflicting bookings!');\n                        CalendarViewManager.stopLoading(root);\n                    } else {\n                        // Check if there are no conflicting messages\n                        if (response.result) {\n                            ModalActions.showWarning(response.warnings[0].message, 'Warning');\n                            CalendarViewManager.stopLoading(root);\n                            loadingContainer.addClass('hidden');\n                            bookButton.prop('disabled', false);\n                        }\n                    }\n                    return response.result;\n                })\n                .fail(Notification.exception);\n\n            // Save booking if no conflicting bookings were found\n            if (!hasConflictingBooking) {\n                Repository.saveBookedSlot(BookedSlots[0], course, exercise, studentid)\n                .then(function(response) {\n                    if (response.validationerror) {\n                        // eslint-disable-next-line no-alert\n                        alert('Errors encountered: Unable to save slot!');\n                        CalendarViewManager.stopLoading(root);\n                    } else {\n                        clean();\n                        // Redirect to bookings view\n                        location.href = M.cfg.wwwroot + '/local/booking/view.php?courseid=' + course;\n                    }\n                    return;\n                })\n                .fail(Notification.exception);\n            }\n        }\n\n    /**\n     * Update Slots & BookedSlots with marked availability\n     * posts in the calendar view.\n     *\n     * @method getSlots\n     * @param {object} root     The calendar root element\n     * @param {String} action   The action for display view/book\n     */\n    function getSlots(root, action) {\n\n        const slotType = action == 'book' ? 'slot-booked' : 'slot-marked';\n        const year = $(Selectors.wrappers.calendarwrapper).data('year');\n        const week = $(Selectors.wrappers.calendarwrapper).data('week');\n        const minute59 = 3540; // 59 minutes end of slot but before next hour\n\n        const tableId = $(Selectors.regions.slotsweek).attr('id');\n        const head = $('#' + tableId + ' th');\n        const colCount = document.getElementById(tableId).rows[0].cells.length;\n        var colOffset;\n\n        Slots.length = 0;\n        BookedSlots.length = 0;\n\n        // Get column index for the start of the week\n        head.each(function() {\n            if ($(this).data('region') == 'slot-week-day') {\n                colOffset = head.index(this) + 1;\n                return false;\n            }\n            return true;\n        });\n\n        // Get all slots for this week from the UI table\n        for (let i = colOffset; i <= colCount; i++) {\n            // Get slots for the current day\n            const dayHour = $('#' + tableId + ' td:nth-child(' + i + ')').map(function() {\n                return [[$(this).data(slotType), $(this).data('slot-timestamp')]];\n            }).get();\n\n            // Get each slot in the day (start and end times)\n            let aSlot = {};\n\n            // Check each day (column) and record marked slot start-end times\n            dayHour.forEach((hourSlot, index) => {\n                let isLastElement = index == dayHour.length - 1;\n\n                // Check if the slot is marked to record start or end time in marked sequence\n                if (hourSlot[0]) {\n                    if (Object.keys(aSlot).length === 0 && aSlot.constructor === Object) {\n                        aSlot.starttime = hourSlot[1];\n                        aSlot.endtime = hourSlot[1] + minute59;\n                    } else {\n                        aSlot.endtime = hourSlot[1] + minute59;\n                    }\n\n                // Add the slot if it has start and end, and this slot is empty => slot sequence ended\n                } else if (!(Object.keys(aSlot).length === 0 && aSlot.constructor === Object)) {\n                    aSlot = addSlot(aSlot, slotType, week, year);\n                }\n\n                // Add slot if it ends at the end of the day, edge case handling\n                if (isLastElement && !(Object.keys(aSlot).length === 0 && aSlot.constructor === Object)) {\n                    aSlot = addSlot(aSlot, slotType, week, year);\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds a slot to local object array (Slots).\n     *\n     * @method addSlot\n     * @param {object} aSlot The slot to be add to the local object array\n     * @param {string} slotType The slot type availability post vs booked\n     * @param {int} week The week of the year\n     * @param {int} year The year\n     * @return {object} empty object\n     */\n     function addSlot(aSlot, slotType, week = 0, year = 0) {\n        if (slotType == 'slot-marked') {\n            Slots.push(aSlot);\n        } else if (slotType == 'slot-booked') {\n            aSlot.week = week;\n            aSlot.year = year;\n            BookedSlots.push(aSlot);\n        }\n        return {};\n    }\n\n    /**\n     * Update the indexes array tracking copied table indexes\n     * editing existing events.\n     *\n     * @param {object} root The calendar root element\n     * @method copySlots\n     */\n    function copySlots(root) {\n        SlotIndexes.length = 0;\n\n        $(Selectors.regions.day).each((idx, el) => {\n            if ($(el).data('slot-marked')) {\n                SlotIndexes.push([el.closest('tr').rowIndex, el.cellIndex]);\n            }\n        });\n\n        setPasteState(root);\n\n        return;\n    }\n\n    /**\n     * Paste slots by setting the cells from\n     * SlotIndexes (copied cells) to the calendar\n     *\n     * @method pasteSlots\n     * @param {object} root The calendar root element\n     */\n    function pasteSlots(root) {\n        if (SlotIndexes.length > 0) {\n            const table = document.getElementById(root.find(Selectors.regions.slotsweek).attr('id'));\n            SlotIndexes.forEach((idx) => {\n                let slot = table.rows[idx[0]].cells[idx[1]];\n                if (!$(slot).hasClass(\"slot-unavailable\")) {\n                    $(slot).data('slot-marked', 1);\n                    $(slot).addClass('slot-selected', 1);\n                }\n            });\n            formSaved = false;\n        }\n\n        return;\n     }\n\n    /**\n     * Clear slots for a user per course in week and year\n     * given they are not otherwise booked\n     *\n     * @method clearWeekSlots\n     */\n    function clearWeekSlots() {\n        $('td').filter(function() {\n            if ($(this).data('slot-booked') == 0) {\n                $(this).data('slot-marked', 0);\n                $(this).removeClass('slot-selected');\n            }\n            return true;\n        });\n        formSaved = false;\n        return;\n    }\n\n    /**\n     * Set the cells from the copied SlotIndexes to the current table\n     *\n     * @method setPasteState\n     * @param {object} root The week calendar root element\n     */\n    function setPasteState(root) {\n        if (SlotIndexes.length > 0) {\n            root.find(Selectors.regions.pastebutton).addClass('btn-primary').removeClass('btn-secondary');\n        } else {\n            root.find(Selectors.regions.pastebutton).addClass('btn-secondary').removeClass('btn-primary');\n        }\n\n        return;\n     }\n\n    /**\n     * Set the cells from the CopiedSlotsIndexes to the current table\n     *\n     * @method setSlot\n     * @param {object} cell     The copied cell\n     * @param {String} action   The action mode: book|post\n     */\n    function setSlot(cell, action) {\n        const slotAction = action == 'book' ? 'slot-booked' : 'slot-marked';\n        const slotActionClass = action == 'book' ? 'slot-booked' : 'slot-selected';\n\n        if (!$(cell).data(slotAction)) {\n            $(cell).addClass(slotActionClass);\n        } else {\n            $(cell).removeClass(slotActionClass);\n        }\n        $(cell).data(slotAction, !$(cell).data(slotAction));\n\n        return;\n    }\n\n    /**\n     * Set cells selected and save buttons state\n     *\n     * @method setPosting\n     * @param {bool} state  The posting state\n     */\n    function setPosting(state) {\n        postActive = state;\n    }\n\n    /**\n     * Set cells selected and save buttons state\n     *\n     * @method postSlots\n     * @param {object} root     The calendar root element\n     * @param {String} action   The action behind the active view\n     * @param {object} target   The target event object (cell)\n     * @param {String} overridePost The override flag for posting state\n     */\n    function postSlots(root, action, target, overridePost = false) {\n        // Change marked state\n        if (typeof target !== 'undefined' && (postActive || overridePost) &&\n            !target.is(Selectors.regions.daytimeslot) && action !== 'all' && action !== '') {\n                formSaved = false;\n                setSlot(target, action);\n        }\n    }\n\n    /**\n     * Checks whether the calendar has been edited without saving\n     *\n     * @method isDirty\n     * @return {bool} dirtyState  The posting state\n     */\n    function isDirty() {\n        return !formSaved;\n    }\n\n    /**\n     * Reset the form saved flag so the form is no longer dirty\n     *\n     * @method clean\n     * @return {bool} dirtyState  The posting state\n     */\n    function clean() {\n        formSaved = true;\n    }\n\n    return {\n        saveWeekSlots: saveWeekSlots,\n        saveBookedSlot: saveBookedSlot,\n        clearWeekSlots: clearWeekSlots,\n        pasteSlots: pasteSlots,\n        setPasteState: setPasteState,\n        copySlots: copySlots,\n        postSlots: postSlots,\n        setPosting: setPosting,\n        isDirty: isDirty,\n        clean: clean,\n        Slots: Slots,\n        SlotIndexes: SlotIndexes\n    };\n});"],"names":["define","$","Notification","Repository","CalendarViewManager","BookingEvents","ModalActions","Selectors","SELECTORS","Slots","BookedSlots","SlotIndexes","postActive","formSaved","getSlots","root","action","slotType","year","wrappers","calendarwrapper","data","week","tableId","regions","slotsweek","attr","head","colCount","document","getElementById","rows","cells","length","colOffset","each","this","index","i","dayHour","map","get","aSlot","forEach","hourSlot","isLastElement","Object","keys","constructor","starttime","endtime","addSlot","push","setPasteState","find","pastebutton","addClass","removeClass","setSlot","cell","slotAction","slotActionClass","clean","saveWeekSlots","e","startLoading","course","time","eventData","minslotperiod","unixTsHr","lastMinute","minSlotPeriodMet","val","serverCall","saveSlots","clearSlots","then","response","validationerror","alert","slotsSavedEvent","Event","slotsSaved","trigger","always","fetchNotifications","stopLoading","fail","exception","showWarning","fromComponent","saveBookedSlot","bookButton","bookbutton","loadingContainer","prop","exercise","studentid","hasConflictingBooking","result","warnings","message","location","href","M","cfg","wwwroot","clearWeekSlots","filter","pasteSlots","table","idx","slot","hasClass","copySlots","day","el","closest","rowIndex","cellIndex","postSlots","target","overridePost","is","daytimeslot","setPosting","state","isDirty"],"mappings":"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"}