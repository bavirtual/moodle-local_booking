{"version":3,"file":"mybookings.min.js","sources":["../src/mybookings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module is responsible for registering listeners\n * for the instructor's 'My bookings' events.\n *\n * @module     local_booking/mybookings\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n        'jquery',\n        'core/str',\n        'core/notification',\n        'local_booking/booking_view_manager',\n        'local_booking/booking_actions',\n        'local_booking/events',\n        'local_booking/selectors'\n    ],\n    function(\n        $,\n        Str,\n        Notification,\n        ViewManager,\n        BookingActions,\n        BookingEvents,\n        Selectors\n    ) {\n\n    /**\n     * Listen to and handle any logentry events fired by\n     * Logentry and PIREP the modal forms.\n     *\n     * @method registerMyBookingsEventListeners\n     * @param  {object} root The booking root element\n     */\n     const registerMyBookingsEventListeners = function(root) {\n        const body = $('body');\n\n        body.on(BookingEvents.sessioncanceled, function() {\n            ViewManager.refreshInstructorBookingsContent(root);\n        });\n\n        // Listen to the click on the Cancel booking buttons in 'Instructor dashboard' page.\n        root.on('click', Selectors.cancelbutton, function(e) {\n            Str.get_string('commentcancel', 'local_booking').then(function(promptMsg) {\n                // eslint-disable-next-line no-alert\n                const comment = window.prompt(promptMsg);\n                if (comment !== null) {\n                    BookingActions.cancelBooking(root, e, comment, false);\n                }\n                return;\n            }).catch(Notification.exception);\n        });\n\n        // Listen to the click on the 'No-show' booking buttons in 'Instructor dashboard' page.\n        root.on('click', Selectors.noshowbutton, function(e) {\n            // Get number of no shows\n            const noshows = $(e.target).closest(Selectors.noshowbutton).data('noshows');\n            // Get the message associated with the number of no-show occurence\n            const noShowComment = Str.get_string('commentnoshow' + noshows, 'local_booking').then(function(noshowMsg) {\n                return noshowMsg;\n            }).catch(Notification.exception);\n            // Chain the two retrieved strings in the prompt\n            $.when(Str.get_string('commentnoshow', 'local_booking'), noShowComment)\n            .then(function(promptMsg, noshowMsg) {\n                // eslint-disable-next-line no-alert\n                if (window.confirm(promptMsg + '\\n\\n' + noshowMsg)) {\n                    BookingActions.cancelBooking(root, e, null, true);\n                }\n                return;\n            }).catch(Notification.exception);\n        });\n    };\n\n    /**\n     * Register event listeners for logbook entry,\n     * and session cancellation in both\n     * 'Instructor dashboard' and 'Session selection' pages.\n     *\n     * @method  registerEventListeners\n     * @param   {object} root The booking root element\n     */\n     const registerEventListeners = function(root) {\n\n        // Register listeners to booking actions\n        registerMyBookingsEventListeners(root);\n    };\n\n    return {\n        init: function(rt) {\n            var root = $(rt);\n            registerEventListeners(root);\n        }\n    };\n});\n"],"names":["define","$","Str","Notification","ViewManager","BookingActions","BookingEvents","Selectors","registerEventListeners","root","on","sessioncanceled","refreshInstructorBookingsContent","cancelbutton","e","get_string","then","promptMsg","comment","window","prompt","cancelBooking","catch","exception","noshowbutton","noshows","target","closest","data","noShowComment","noshowMsg","when","confirm","registerMyBookingsEventListeners","init","rt"],"mappings":";;;;;;;;;AAyBAA,OAAO,2BAAA,CACC,SACA,WACA,oBACA,qCACA,gCACA,uBACA,4BAEJ,SACIC,EACAC,IACAC,aACAC,YACAC,eACAC,cACAC,WAUH,MA+CMC,uBAAyB,SAASC,OA/CC,SAASA,MAClCR,EAAE,QAEVS,GAAGJ,cAAcK,iBAAiB,WACnCP,YAAYQ,iCAAiCH,KACjD,IAGAA,KAAKC,GAAG,QAASH,UAAUM,cAAc,SAASC,GAC9CZ,IAAIa,WAAW,gBAAiB,iBAAiBC,MAAK,SAASC,WAE3D,MAAMC,QAAUC,OAAOC,OAAOH,WACd,OAAZC,SACAb,eAAegB,cAAcZ,KAAMK,EAAGI,SAAS,EAGtD,IAAEI,MAAMnB,aAAaoB,UAC1B,IAGAd,KAAKC,GAAG,QAASH,UAAUiB,cAAc,SAASV,GAE9C,MAAMW,QAAUxB,EAAEa,EAAEY,QAAQC,QAAQpB,UAAUiB,cAAcI,KAAK,WAE3DC,cAAgB3B,IAAIa,WAAW,gBAAkBU,QAAS,iBAAiBT,MAAK,SAASc,WAC3F,OAAOA,SACV,IAAER,MAAMnB,aAAaoB,WAEtBtB,EAAE8B,KAAK7B,IAAIa,WAAW,gBAAiB,iBAAkBc,eACxDb,MAAK,SAASC,UAAWa,WAElBX,OAAOa,QAAQf,UAAY,OAASa,YACpCzB,eAAegB,cAAcZ,KAAMK,EAAG,MAAM,EAGnD,IAAEQ,MAAMnB,aAAaoB,UAC1B,IAcAU,CAAiCxB,OAGrC,MAAO,CACHyB,KAAM,SAASC,IACX,IAAI1B,KAAOR,EAAEkC,IACb3B,uBAAuBC,KAC3B,EAER"}