{"version":3,"file":"modal_logentry_form.min.js","sources":["../src/modal_logentry_form.js"],"sourcesContent":["/* eslint-disable no-nested-ternary */\n/* eslint-disable complexity */\n/* eslint-disable babel/new-cap */\n/* eslint-disable no-undef */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles logbook entry form.\n *\n * @module     local_booking/modal_logentry_form\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery',\n    'core/event',\n    'core/str',\n    'core/notification',\n    'core/custom_interaction_events',\n    'core/modal',\n    'core/modal_registry',\n    'core/fragment',\n    'local_booking/events',\n    'local_booking/repository',\n    'local_booking/selectors',\n],\nfunction(\n    $,\n    Event,\n    Str,\n    Notification,\n    CustomEvents,\n    Modal,\n    ModalRegistry,\n    Fragment,\n    LogbookEvents,\n    Repository,\n    Selectors,\n) {\n\nvar registered = false;\nvar SELECTORS = {\n    ADVANCED_FORM: '[data-form-type=\"other\"]',\n    SAVE_BUTTON: '[data-action=\"save\"]',\n    LOADING_ICON_CONTAINER: '[data-region=\"loading-icon-container\"]',\n};\n\n/**\n * Constructor for the Modal.\n *\n * @param {object} root The root jQuery element for the modal\n */\nvar ModalLogEntryForm = function(root) {\n    Modal.call(this, root);\n    this.contextId = null;\n    this.courseId = null;\n    this.userId = null;\n    this.logentryId = null;\n    this.flightDate = null;\n    this.exerciseId = null;\n    this.pirepLookupId = null;\n    this.hasfindpirep = false;\n    this.reloadingBody = false;\n    this.reloadingTitle = false;\n    this.saveButton = this.getFooter().find(SELECTORS.SAVE_BUTTON);\n};\n\nModalLogEntryForm.TYPE = 'local_booking-modal_logentry_form';\nModalLogEntryForm.prototype = Object.create(Modal.prototype);\nModalLogEntryForm.prototype.constructor = ModalLogEntryForm;\n\n/**\n * Set the context id to the given value.\n *\n * @method setContextId\n * @param {Number} id The context id\n */\nModalLogEntryForm.prototype.setContextId = function(id) {\n    this.contextId = id;\n};\n\n/**\n * Retrieve the current context id, if any.\n *\n * @method getContextId\n * @return {Number|null} The context id\n */\nModalLogEntryForm.prototype.getContextId = function() {\n    return this.contextId;\n};\n\n/**\n * Set the course id to the given value.\n *\n * @method setCourseId\n * @param {int} id The course id\n */\nModalLogEntryForm.prototype.setCourseId = function(id) {\n    this.courseId = id;\n};\n\n/**\n * Retrieve the current course id, if any.\n *\n * @method getCourseId\n * @return {int|null} The course id\n */\nModalLogEntryForm.prototype.getCourseId = function() {\n    return this.courseId;\n};\n\n/**\n * Check if the modal has an course id.\n *\n * @method hasCourseId\n * @return {bool}\n */\nModalLogEntryForm.prototype.hasCourseId = function() {\n    return this.courseId !== null;\n};\n\n/**\n * Set the exercise id to the given value.\n *\n * @method setExerciseId\n * @param {int} id The exercise id\n */\n    ModalLogEntryForm.prototype.setExerciseId = function(id) {\n    this.exerciseId = id;\n};\n\n/**\n * Retrieve the current exercise id, if any.\n *\n * @method getExerciseId\n * @return {int|null} The exercise id\n */\nModalLogEntryForm.prototype.getExerciseId = function() {\n    return this.exerciseId;\n};\n\n/**\n * Check if the modal has an exercise id.\n *\n * @method hasExerciseId\n * @return {bool}\n */\n    ModalLogEntryForm.prototype.hasExerciseId = function() {\n    return this.exerciseId !== null;\n};\n\n/**\n * Set the user id to the given value.\n *\n * @method setUserId\n * @param {int} id The user id\n */\n    ModalLogEntryForm.prototype.setUserId = function(id) {\n    this.userId = id;\n};\n\n/**\n * Retrieve the current user id, if any.\n *\n * @method getUserId\n * @return {int|null} The user id\n */\nModalLogEntryForm.prototype.getUserId = function() {\n    return this.userId;\n};\n\n/**\n * Check if the modal has an user id.\n *\n * @method hasUserId\n * @return {bool}\n */\n    ModalLogEntryForm.prototype.hasUserId = function() {\n    return this.userId !== null;\n};\n\n/**\n * Set the logentry id to the given value.\n *\n * @method setLogentryId\n * @param {int} id The logentry id\n */\nModalLogEntryForm.prototype.setLogentryId = function(id) {\n    this.logentryId = id;\n};\n\n/**\n * Retrieve the current logentry id, if any.\n *\n * @method getLogentryId\n * @return {int|null} The logentry id\n */\nModalLogEntryForm.prototype.getLogentryId = function() {\n    return this.logentryId;\n};\n\n/**\n * Check if the modal has an logentry id.\n *\n * @method hasLogentryId\n * @return {bool}\n */\nModalLogEntryForm.prototype.hasLogentryId = function() {\n    return this.logentryId !== null && this.logentryId != 0;\n};\n\n/**\n * Set the start time to the given value.\n *\n * @method setFlightDate\n * @param {int} time The session date time\n */\nModalLogEntryForm.prototype.setFlightDate = function(time) {\n    this.flightDate = time;\n};\n\n/**\n * Retrieve the current start time, if any.\n *\n * @method getFlightDate\n * @return {int|null} The start time\n */\nModalLogEntryForm.prototype.getFlightDate = function() {\n    return this.flightDate;\n};\n\n/**\n * Check if the modal has session date time.\n *\n * @method hasFlightDate\n * @return {bool}\n */\nModalLogEntryForm.prototype.hasFlightDate = function() {\n    return this.flightDate !== null;\n};\n\n/**\n * Set the flight type of the logentry to the given value.\n *\n * @method setFlightType\n * @param {string} flighttype The flight type (training/solo/check)\n */\n ModalLogEntryForm.prototype.setFlightType = function(flighttype) {\n    this.flightType = flighttype;\n};\n\n/**\n * Retrieve flight type of the logentry.\n *\n * @method getFlightType\n * @return {string} The flight type (training/solo/check)\n */\nModalLogEntryForm.prototype.getFlightType = function() {\n    return this.flightType;\n};\n\n/**\n * Check if the modal has an logentry id.\n *\n * @param  {bool} hasfindpirep  Whether find PIREP is enabled\n * @method hasFindPIREP\n * @return {bool}\n */\n ModalLogEntryForm.prototype.hasFindPIREP = function(hasfindpirep) {\n    if (typeof hasfindpirep !== 'undefined') {\n        this.hasfindpirep = hasfindpirep;\n    }\n    return this.hasfindpirep;\n};\n\n/**\n * Get the form element from the modal.\n *\n * @method getForm\n * @return {object}\n */\nModalLogEntryForm.prototype.getForm = function() {\n    return this.getBody().find('form');\n};\n\n/**\n * Disable the buttons in the footer.\n *\n * @method disableButtons\n */\nModalLogEntryForm.prototype.disableButtons = function() {\n    this.saveButton.prop('disabled', true);\n};\n\n/**\n * Enable the buttons in the footer.\n *\n * @method enableButtons\n */\nModalLogEntryForm.prototype.enableButtons = function() {\n    this.saveButton.prop('disabled', false);\n};\n\n/**\n * Reload the title for the modal to the appropriate value\n * depending on whether we are creating a new log book entry\n * or editing an existing one.\n *\n * @method reloadTitleContent\n * @return {object} A promise resolved with the new title text\n */\nModalLogEntryForm.prototype.reloadTitleContent = function() {\n    if (this.reloadingTitle) {\n        return this.titlePromise;\n    }\n\n    this.reloadingTitle = true;\n\n    // Get exercise name\n    this.titlePromise = Repository.getExerciseName(this.courseId, this.exerciseId)\n        .then(function(response) {\n            // Handle the response\n            return response.exercisename;\n        })\n    .fail(Notification.exception);\n\n    this.titlePromise.then(function(string) {\n        this.setTitle(string);\n        return string;\n    }.bind(this))\n    .always(function() {\n        this.reloadingTitle = false;\n        return;\n    }.bind(this))\n    .fail(Notification.exception);\n\n    return this.titlePromise;\n};\n\n/**\n * Send a request to the server to get the logentry_form in a fragment\n * and render the result in the body of the modal.\n *\n * If serialised form data is provided then it will be sent in the\n * request to the server to have the form rendered with the data. This\n * is used when the form had a server side error and we need the server\n * to re-render it for us to display the error to the user.\n *\n * @method reloadBodyContent\n * @param {string} formData The serialised form data\n * @return {object} A promise resolved with the fragment html and js from\n */\nModalLogEntryForm.prototype.reloadBodyContent = function(formData) {\n    if (this.reloadingBody) {\n        return this.bodyPromise;\n    }\n\n    this.reloadingBody = true;\n    this.disableButtons();\n\n    var args = {};\n\n    if (this.hasUserId()) {\n        args.userid = this.getUserId();\n    }\n\n    if (this.hasLogentryId()) {\n        args.logentryid = this.getLogentryId();\n    }\n\n    if (this.hasFlightDate()) {\n        args.flightdate = this.getFlightDate();\n    }\n\n    if (this.hasCourseId()) {\n        args.courseid = this.getCourseId();\n    }\n\n    if (this.hasExerciseId()) {\n        args.exerciseid = this.getExerciseId();\n    }\n\n    if (typeof formData !== 'undefined') {\n        args.formdata = formData;\n    }\n\n    // Get the content of the modal\n    this.bodyPromise = Fragment.loadFragment('local_booking', 'logentry_form', this.getContextId(), args);\n\n    // Set the body data using the promise\n    this.setBody(this.bodyPromise);\n\n    this.bodyPromise.then(function() {\n        // Add Find PIREP button\n        if (this.hasFindPIREP()) {\n            if (!$('#id_error2_p1pirep').length) {\n                let p1pirep = $('#id_p1pirep');\n                let pirepdiv = p1pirep.parent();\n\n                // Append PIREP search group\n                pirepdiv.prepend('<div class=\"input-group\" id=\"id_pirepgroup\">');\n                $('#id_pirepgroup').append(p1pirep);\n                $('#id_pirepgroup').append('<div class=\"input-group-append\" id=\"id_find_pirep\">');\n                $('#id_find_pirep').append('<button type=\"button\" class=\"btn btn-primary search-icon\"><i class=\"icon ' +\n                    'fa fa-search fa-fw \" aria-hidden=\"true\"></i></button>');\n            }\n        }\n\n        // Hide/show elements set training type\n        this.doDynamicDisplay();\n        this.enableButtons();\n        this.setInputMask();\n        this.registerChangeListeners();\n\n        return;\n    }.bind(this))\n    .fail(Notification.exception)\n    .always(function() {\n        this.reloadingBody = false;\n        return;\n    }.bind(this))\n    .fail(Notification.exception);\n\n    return this.bodyPromise;\n};\n\n/**\n * Sets the input mask for all masked elements.\n *\n * @method setInputMask\n */\nModalLogEntryForm.prototype.setInputMask = function() {\n    // Mask flight times < 5hrs and departure/arrival times to 24hr format\n    // Mask flight time elements based on training type\n    if ($(Selectors.bookingwrapper).data('trainingtype') == \"Dual\") {\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_dualtime\"));\n    } else if ($(Selectors.bookingwrapper).data('trainingtype') == \"Multicrew\") {\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_multipilottime\"));\n\n        // TODO: Instructor logentry edit:\n        // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_copilottime\"));\n    }\n    // Check for the flight type before masking related elements\n    if ($(\"input[name='flighttypehidden']\").val() == 'check') {\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_picustime\"));\n\n        // TODO: Instructor logentry edit:\n        // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_checkpilottime\"));\n    } else if ($(\"input[name='flighttypehidden']\").val() == 'solo') {\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_flighttime\"));\n    } else {\n        Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_groundtime\"));\n    }\n\n    // TODO: Instructor logentry edit:\n    // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_pictime\"));\n    // Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_instructortime\"));\n\n    // Mask remaining elements\n    Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_flighttime\"));\n    Inputmask({\"regex\": \"^([01]?[0-9]|2[0-3]):[0-5][0-9]\"}).mask(document.getElementById(\"id_deptime\"));\n    Inputmask({\"regex\": \"^([01]?[0-9]|2[0-3]):[0-5][0-9]\"}).mask(document.getElementById(\"id_arrtime\"));\n    Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_nighttime\"));\n    Inputmask({\"regex\": \"^([0]?[0-4]):([0-5]?[0-9])$\"}).mask(document.getElementById(\"id_ifrtime\"));\n    Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp1day\"));\n    Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp1night\"));\n\n    // Check for new logentries noting landings of both instructor and student\n    if (this.getLogentryId() == 0) {\n        Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp2day\"));\n        Inputmask({\"regex\": \"[0-9]\"}).mask(document.getElementById(\"id_landingsp2night\"));\n    }\n};\n\n/**\n * Sets the input mask for all masked elements.\n *\n * @method registerChangeListeners\n */\nModalLogEntryForm.prototype.registerChangeListeners = function() {\n\n    // PIREP search trigger\n    if (this.hasFindPIREP()) {\n        var pirepbutton = $('#id_find_pirep');\n        pirepbutton.on('click', function(e) {\n            if (!isNaN($('#id_p1pirep').val())) {\n                return this.getPIREPData(e);\n            }\n        }.bind(this));\n    }\n\n    // Update elements based on selected flighttype (Training/Solo)\n    var flighttype = $('input[name=\"flighttype\"]');\n    flighttype.on('change', function() {\n        // Assign the value selected in the radio buttons to the hidden flight type element\n        $(\"input[name='flighttypehidden']\").val($(\"input[name='flighttype']:checked\").val());\n        this.doDynamicDisplay();\n        this.applyFlightTimes();\n    }.bind(this));\n\n    // Update flight times when the test result status is changed\n    var passfail = $('input[name=\"passfail\"]');\n    passfail.on('change', function() {\n        this.doDynamicDisplay();\n        this.applyFlightTimes();\n    }.bind(this));\n\n    // Update flight times when the test result status is changed\n    var flightrule = $('input[name=\"flightrule\"]');\n    flightrule.on('change', function() {\n        this.doDynamicDisplay();\n        this.applyFlightTimes();\n    }.bind(this));\n\n    // The onchange property has to be set due to the flighttime element being masked\n    flighttime = document.getElementById(\"id_flighttime\");\n    flighttime.onchange = function() {\n        return this.applyFlightTimes(true);\n    }.bind(this);\n};\n\n/**\n * Retrieve and populate log entry data from\n * the server's PIREP lookup service.\n *\n * @method getPIREPData\n * @param  {object} e The triggered event\n * @return {object} pirep of the logentry\n */\n ModalLogEntryForm.prototype.getPIREPData = function(e) {\n    var loadingContainer = this.getFooter().find(SELECTORS.LOADING_ICON_CONTAINER);\n    rule = $(Selectors.bookingwrapper).data('trainingtype');\n    pirepdiv = $('#id_p1pirep').parent();\n    pirep = $('#id_p1pirep').val();\n    courseid = this.getCourseId();\n    exerciseid = this.getExerciseId();\n\n    if (pirep != '') {\n        loadingContainer.removeClass('hidden');\n        return Repository.findPirep(pirep, courseid, $('#id_p1id').val(), exerciseid)\n            .then(function(response) {\n                // Clean up any past client side errors\n                $('#id_p1pirep').removeClass('is-invalid');\n\n                // Handle the response\n                if (response.result) {\n                    // Get found message\n                    if (!$('#id_valid_p1pirep').length) {\n                        Str.get_string('pirepfound', 'local_booking').then(function(string) {\n                            pirepdiv.append('<div class=\"form-control-feedback valid-feedback\" id=\"id_valid_p1pirep\" ' +\n                            'tabindex=\"0\" style=\"\">' + string + '</div>');\n                            $('#id_p1pirep').addClass('is-valid');\n                            return string;\n                        })\n                        .fail(Notification.exception);\n                    }\n\n                    // Update elements with PIREP returned data depending on\n                    // solo flight status and flight rule (Dual/Multicrew)\n                    var d = new Date(response.logentry.flightdate * 1000),\n                        month = '' + (d.getMonth() + 1),\n                        day = '' + d.getDate(),\n                        year = d.getFullYear(),\n                        time = response.logentry.deptime,\n                        hour = time.substring(0, 2),\n                        minute = time.substring(time.indexOf(':') + 1, time.length);\n                    // Fill remaining data\n                    $('#id_flightdate_day').val(day);\n                    $('#id_flightdate_month').val(month);\n                    $('#id_flightdate_year').val(year);\n                    $('#id_flightdate_hour').val(hour);\n                    $('#id_flightdate_minute').val(minute);\n                    $('input[name=\"linkedpirep\"]').val(response.logentry.linkedpirep);\n                    $('#id_flighttime').val(response.logentry.flighttime);\n                    $('#id_depicao').val(response.logentry.depicao);\n                    $('#id_arricao').val(response.logentry.arricao);\n                    $('#id_deptime').val(response.logentry.deptime);\n                    $('#id_arrtime').val(response.logentry.arrtime);\n                    $('#id_callsign').val(response.logentry.callsign);\n                    $('#id_aircraft').val(response.logentry.aircraft);\n                    $('#id_aircraftreg').val(response.logentry.aircraftreg);\n                    $('#id_enginetype').val(response.logentry.enginetype);\n                    $('#id_route').val(response.logentry.route);\n                    $('#id_fstd').val(response.logentry.fstd);\n                    this.doDynamicDisplay();\n                    this.applyFlightTimes();\n                } else {\n                    // Display inline error for the PIREP then clear it and give it focus\n                    $('#id_p1pirep').addClass('is-invalid');\n                    if (!$('#id_error2_p1pirep').length) {\n                        pirepdiv.append('<div class=\"form-control-feedback invalid-feedback\" id=\"id_error2_p1pirep\" ' +\n                            'tabindex=\"0\" style=\"\">' + response.warnings[0].message + '</div>');\n                        $('#id_p1pirep').val('');\n                        $('#id_p1pirep').focus();\n                    } else {\n                        $('#id_error2_p1pirep').show();\n                    }\n                    // Make sure the find button is always after the P1 PIREP element\n                    if (this.hasFindPIREP()) {\n                        $('#id_p1pirep').parent().each(function() {\n                            $('#id_find_pirep').insertAfter($('#id_p1pirep'), this);\n                        });\n                    }\n                }\n\n                return;\n            }.bind(this))\n            .always(function() {\n                // Regardless of success or error we should always stop\n                // the loading icon and re-enable the buttons.\n                loadingContainer.addClass('hidden');\n                e.preventDefault();\n                e.stopPropagation();\n\n                return;\n            })\n            .fail(Notification.exception);\n    } else {\n        return '';\n    }\n};\n\n/**\n * Apply default values set flight operation\n * Dual vs Multicrew taking solo flights in conisderation\n *\n * Populates a log book entry with a modal form data.\n *\n * @param {bool} force Force applying flight times\n * @method applyFlightTimes\n */\n ModalLogEntryForm.prototype.applyFlightTimes = function(force) {\n\n    const rule = $(Selectors.bookingwrapper).data('trainingtype');\n    var flighttype = $(\"input[name='flighttypehidden']\").val(),\n        flighttime = $('#id_flighttime').val(),\n        passfail = $(\"input[name='passfail']:checked\").val(),\n        ifr = $(\"input[name='flightrule']:checked\").val() == 'ifr',\n        editmode = this.getLogentryId() != 0,\n        newentry = !editmode;\n\n    // Check the training rule type\n    if (newentry || force) {\n        if (flighttype == 'training' || (flighttype == 'check' && passfail == 'fail')) {\n            $('#id_dualtime').val(rule == 'Dual' ? flighttime : '');\n            $('#id_ifrtime').val(ifr ? flighttime : '');\n            $('#id_multipilottime').val(rule == 'Multicrew' ? flighttime : '');\n            $('#id_copilottime').val(rule == 'Multicrew' ? flighttime : '');\n            $('#id_checkpilottime').val(flighttype == 'check' ? flighttime : '');\n            $('#id_picustime').val('');\n        } else if (flighttype == 'solo') {\n            $('#id_ifrtime').val(ifr ? flighttime : '');\n            $('#id_dualtime').val('');\n            $('#id_multipilottime').val('');\n            $('#id_copilottime').val('');\n            $('#id_picustime').val('');\n        } else if (flighttype == 'check' || passfail == 'pass') {\n            $('#id_ifrtime').val(ifr ? flighttime : '');\n            $('#id_picustime').val(flighttime);\n            $('#id_checkpilottime').val(flighttime);\n            $('#id_multipilottime').val(rule == 'Multicrew' ? flighttime : '');\n            $('#id_dualtime').val('');\n            $('#id_copilottime').val('');\n        }\n    }\n };\n\n/**\n * Apply default values set flight operation\n * Dual vs Multicrew taking solo flights in conisderation\n *\n * Populates a log book entry with a modal form data.\n *\n * @method doDynamicDisplay\n */\n ModalLogEntryForm.prototype.doDynamicDisplay = function() {\n\n    const rule = $(Selectors.bookingwrapper).data('trainingtype');\n    var flighttype = $(\"input[name='flighttypehidden']\").val(),\n        passfail = $(\"input[name='passfail']:checked\").val(),\n        ifr = $(\"input[name='flightrule']:checked\").val() == 'ifr',\n        editmode = this.getLogentryId() != 0;\n\n    // Toggle the display of elements depending on flight type\n    var toggle = function(div, element, show, value, force = false) {\n        if (typeof div !== 'undefined' && typeof element !== 'undefined') {\n            // Check expanded status of Advanced elements\n            var ariaexpanded = this.getForm().find('[aria-expanded=\"true\"]').attr('aria-expanded');\n            if (ariaexpanded || force) {\n                if (show) {\n                    $(div).slideDown('fast');\n                } else {\n                    $(div).slideUp('fast');\n                }\n            }\n\n            // Process the passed value\n            if (typeof value !== 'undefined') {\n                $(element).val(value);\n            }\n        }\n    }.bind(this);\n\n    // Set dynamic element labels\n    var setLabel = function(element, editlabelkey, labelkey) {\n        if (editmode) {\n            Str.get_string(editlabelkey, 'local_booking').then(function(label) {\n                $(element).text(label);\n                return label;\n            }).fail(Notification.exception);\n        } else {\n            Str.get_string(labelkey, 'local_booking').then(function(label) {\n                $(element).text(label);\n                return label;\n            }).fail(Notification.exception);\n        }\n    };\n\n    // TODO: Instructor logentry edit:\n    // // Toggle PIC time in new and edit\n    // toggle('#fitem_id_pictime', '#id_pictime', $('#id_pictime').val());\n\n    // Check the training rule type\n    if (flighttype == 'training' || (flighttype == 'check' && passfail == 'fail')) {\n\n        // Set P1 id and label, and handle edit mode\n        if (flighttype == 'training' || editmode) {\n            p1label = rule == 'Dual' ? 'p1dual' : 'p1multicrew';\n        } else {\n            p1label = 'examiner';\n        }\n\n        setLabel(\"label[for='id_p1pirep']\", 'pirep', flighttype == 'training' ? 'instpirep' : 'examinerpirep');\n        setLabel(\"label[for='id_p1id']\", p1label, p1label);\n\n        // Toggle showing elements conditionally for training flight and failed check flights\n        toggle('#fitem_id_p2id', '#id_p2id', true);\n        toggle('#fitem_id_dualtime', '#id_dualtime', rule == 'Dual');\n        toggle('#fitem_id_groundtime', '#id_groundtime', true, $('#id_groundtime').val(), true);\n        toggle('#fitem_id_ifrtime', '#id_ifrtime', ifr);\n        toggle('#fitem_id_nighttime', '#id_nighttime', ifr);\n        toggle('#fitem_id_multipilottime', '#id_multipilottime', rule == 'Multicrew');\n        toggle('#fitem_id_copilottime', '#id_copilottime', rule == 'Multicrew');\n\n        // Toggle hiding elements\n        toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false);\n        toggle('#fitem_id_picustime', '#id_picustime', false);\n\n        // TODO: Instructor logentry edit:\n        // // Toggle instructor time in new and edit\n        // toggle('#fitem_id_instructortime', '#id_instructortime', ((newentry && flighttype != 'check') || (editmode &&\n        //     $('#id_instructortime').val() != '')), editmode || flighttype == 'check' ?\n        //     $('#id_instructortime').val() ? $('#id_instructortime').val() : '' : flighttime);\n        // TODO: Instructor logentry edit:\n        // toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false, '');\n\n    } else if (flighttype == 'solo') {\n        // Set P1 PIREP label for student solo flights, and handle edit mode\n        setLabel(\"label[for='id_p1pirep']\", 'logbooksolopirep', 'logbooksolopirep');\n        setLabel(\"label[for='id_p1id']\", 'p2dual', 'p2dual');\n        if (!editmode) {\n            $('#id_p1id').val($('#id_p2id').val());\n        }\n\n        // Toggle showing elements for solo flight\n        toggle('#fitem_id_ifrtime', '#id_ifrtime', ifr);\n        $('#id_landingsp1day').val('1');\n        $('#id_landingsp2day').val('0');\n\n        // Toggle hiding elements for solo flights\n        toggle('#fitem_id_p2id', '#id_p2id', false, $('#id_p2id').val(), true);\n        toggle('#fitem_id_groundtime', '#id_groundtime', false, '', true);\n        toggle('#fitem_id_dualtime', '#id_dualtime', false);\n        toggle('#fitem_id_multipilottime', '#id_multipilottime', false);\n        toggle('#fitem_id_copilottime', '#id_copilottime', false);\n        toggle('#fitem_id_picustime', '#id_picustime', false);\n        toggle('#fgroup_id_landingsp2', '#id_landingsp2', false);\n\n        // TODO: Instructor logentry edit:\n        // toggle('#fitem_id_instructortime', '#id_instructortime', false);\n        // TODO: Instructor logentry edit:\n        // toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false);\n\n    } else if (flighttype == 'check' || passfail == 'pass') {\n        // Get id and label for P1 and PIREP\n        setLabel(\"label[for='id_p1pirep']\", 'pirep', 'examinerpirep');\n        setLabel(\"label[for='id_p1id']\", 'examiner', 'examiner');\n\n        // Toggle showing elements for passsed check flight\n        toggle('#fitem_id_p2id', '#id_p2id', true);\n        toggle('#fitem_id_ifrtime', '#id_ifrtime', ifr);\n        toggle('#fitem_id_multipilottime', '#id_multipilottime', rule == 'Multicrew');\n        toggle('#fitem_id_picustime', '#id_picustime', true);\n\n        // Toggle hiding elements for passed check flight\n        toggle('#fitem_id_dualtime', '#id_dualtime', false);\n        toggle('#fitem_id_copilottime', '#id_copilottime', false);\n\n        // TODO: Instructor logentry edit:\n        // toggle('#fitem_id_instructortime', '#id_instructortime', false);\n        toggle('#fitem_id_checkpilottime', '#id_checkpilottime', false);\n    }\n};\n\n/**\n * Reload both the title and body content.\n *\n * @method reloadAllContent\n * @return {object} promise\n */\nModalLogEntryForm.prototype.reloadAllContent = function() {\n    return $.when(this.reloadTitleContent(), this.reloadBodyContent());\n};\n\n/**\n * Kick off a reload the modal content before showing it. This\n * is to allow us to re-use the same modal for creating and\n * editing different log book entries within the booking view page.\n *\n * We do the reload when showing the modal rather than hiding it\n * to save a request to the server if the user closes the modal\n * and never re-opens it.\n *\n * @method show\n */\nModalLogEntryForm.prototype.show = function() {\n    this.reloadAllContent();\n    Modal.prototype.show.call(this);\n};\n\n/**\n * Clear the logentry id from the modal when it's closed so\n * that it is loaded fresh next time it's displayed.\n *\n * The logentry id will be set by the calling code if it wants\n * to edit a specific log entry.\n *\n * @method hide\n */\nModalLogEntryForm.prototype.hide = function() {\n    Modal.prototype.hide.call(this);\n    this.setLogentryId(null);\n    this.setFlightDate(null);\n    this.setContextId(null);\n    this.setCourseId(null);\n    this.setExerciseId(null);\n};\n\n/**\n * Get the serialised form data.\n *\n * @method getFormData\n * @return {string} serialised form data\n */\nModalLogEntryForm.prototype.getFormData = function() {\n    return this.getForm().serialize();\n};\n\n/**\n * Send the form data to the server to create or update\n * a log book entry.\n *\n * If there is a server side validation error then we re-request the\n * rendered form (with the data) from the server in order to get the\n * server side errors to display.\n *\n * On success the modal is hidden and the page is reloaded so that the\n * new log book entry will display in the booking view user tooltip.\n *\n * @method save\n * @return {object} A promise\n */\nModalLogEntryForm.prototype.save = function() {\n    var invalid,\n        loadingContainer = this.saveButton.find(SELECTORS.LOADING_ICON_CONTAINER);\n\n    // Set ground time to 0 for none training flights as it is a required a value\n    if (!($(\"input[name='flighttypehidden']\").val() == 'training')) {\n        $('#id_groundtime').val(\"00:00\");\n    }\n\n    // Now the change events have run, see if there are any \"invalid\" form fields.\n    invalid = this.getForm().find('[aria-invalid=\"true\"]');\n\n    // If we found invalid fields, focus on the first one and do not submit via ajax.\n    if (invalid.length) {\n        invalid.first().focus();\n        return;\n    }\n\n    loadingContainer.removeClass('hidden');\n    this.disableButtons();\n\n    var formData = this.getFormData();\n    var formArgs = 'contextid=' + this.contextId + '&courseid=' + this.courseId\n        + '&exerciseid=' + this.exerciseId + '&userid=' + this.userId;\n\n    // Send the form data to the server for processing.\n    // eslint-disable-next-line consistent-return\n    return Repository.submitCreateUpdateLogentryForm(formArgs, formData)\n        .then(function(response) {\n            if (response.validationerror) {\n                // If there was a server side validation error then\n                // we need to re-request the rendered form from the server\n                // in order to display the error for the user.\n                this.reloadBodyContent(formData);\n                return;\n            } else {\n                // Check whether this was a new logbook entry or not.\n                // check if the logentry is from the prgression view\n                // logentry from the confirmation view\n                // The hide function unsets the form data so grab this before the hide.\n                var isExisting = this.hasLogentryId();\n\n                // No problemo! Our work here is done.\n                this.hide();\n\n                // Trigger the appropriate logbook event so that the view can be updated.\n                if (isExisting) {\n                    $('body').trigger(LogbookEvents.updated, [response.logentry]);\n                } else {\n                    $('body').trigger(LogbookEvents.created, [response.logentry]);\n                }\n            }\n\n            return;\n        }.bind(this))\n        .always(function() {\n            // Regardless of success or error we should always stop\n            // the loading icon and re-enable the buttons.\n            loadingContainer.addClass('hidden');\n            Notification.fetchNotifications();\n            this.enableButtons();\n\n            return;\n        }.bind(this))\n        .fail(Notification.exception);\n};\n\n/**\n * Set up all of the event handling for the modal.\n *\n * @method registerEventListeners\n */\nModalLogEntryForm.prototype.registerEventListeners = function() {\n    // Apply parent event listeners.\n    Modal.prototype.registerEventListeners.call(this);\n\n    // When the user clicks the save button we trigger the form submission. We need to\n    // trigger an actual submission because there is some JS code in the form that is\n    // listening for this event and doing some stuff (e.g. saving draft areas etc).\n    this.getModal().on(CustomEvents.events.activate, SELECTORS.SAVE_BUTTON, function(e, data) {\n        this.getForm().submit();\n        data.originalEvent.preventDefault();\n        e.stopPropagation();\n    }.bind(this));\n\n    // Catch the submit event before it is actually processed by the browser and\n    // prevent the submission. We'll take it from here.\n    this.getModal().on('submit', function(e) {\n        Event.notifyFormSubmitAjax(this.getForm()[0]);\n\n        this.save();\n\n        // Stop the form from actually submitting and prevent it's\n        // propagation because we have already handled the event.\n        e.preventDefault();\n        e.stopPropagation();\n    }.bind(this));\n\n    // Register a lister to Update elements for Advanced section when expanded, after its loaded\n    this.getModal().on('click', 'a[aria-expanded]', function() {\n        setTimeout(function() {\n            this.doDynamicDisplay();\n         }.bind(this), 100);\n    }.bind(this));\n};\n\n// Automatically register with the modal registry the first time this module is imported so that you can create modals\n// of this type using the modal factory.\nif (!registered) {\n    ModalRegistry.register(ModalLogEntryForm.TYPE, ModalLogEntryForm, 'local_booking/modal_logentry_form');\n    registered = true;\n}\n\nreturn ModalLogEntryForm;\n});\n"],"names":["define","$","Event","Str","Notification","CustomEvents","Modal","ModalRegistry","Fragment","LogbookEvents","Repository","Selectors","registered","SELECTORS","ModalLogEntryForm","root","call","this","contextId","courseId","userId","logentryId","flightDate","exerciseId","pirepLookupId","hasfindpirep","reloadingBody","reloadingTitle","saveButton","getFooter","find","TYPE","prototype","Object","create","constructor","setContextId","id","getContextId","setCourseId","getCourseId","hasCourseId","setExerciseId","getExerciseId","hasExerciseId","setUserId","getUserId","hasUserId","setLogentryId","getLogentryId","hasLogentryId","setFlightDate","time","getFlightDate","hasFlightDate","setFlightType","flighttype","flightType","getFlightType","hasFindPIREP","getForm","getBody","disableButtons","prop","enableButtons","reloadTitleContent","titlePromise","getExerciseName","then","response","exercisename","fail","exception","string","setTitle","bind","always","reloadBodyContent","formData","bodyPromise","args","userid","logentryid","flightdate","courseid","exerciseid","formdata","loadFragment","setBody","length","p1pirep","parent","prepend","append","doDynamicDisplay","setInputMask","registerChangeListeners","bookingwrapper","data","Inputmask","regex","mask","document","getElementById","val","on","e","isNaN","getPIREPData","applyFlightTimes","flighttime","onchange","loadingContainer","rule","pirepdiv","pirep","removeClass","findPirep","result","get_string","addClass","d","Date","logentry","month","getMonth","day","getDate","year","getFullYear","deptime","hour","substring","minute","indexOf","linkedpirep","depicao","arricao","arrtime","callsign","aircraft","aircraftreg","enginetype","route","fstd","show","warnings","message","focus","each","insertAfter","preventDefault","stopPropagation","force","passfail","ifr","editmode","toggle","div","element","value","arguments","undefined","attr","slideDown","slideUp","setLabel","editlabelkey","labelkey","label","text","p1label","reloadAllContent","when","hide","getFormData","serialize","save","invalid","formArgs","submitCreateUpdateLogentryForm","validationerror","isExisting","trigger","updated","created","fetchNotifications","first","registerEventListeners","getModal","events","activate","submit","originalEvent","notifyFormSubmitAjax","setTimeout","register"],"mappings":"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"}