{"version":3,"file":"booking.min.js","sources":["../src/booking.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module is responsible for registering listeners\n * for all session booking and logentry events.\n *\n * @module     local_booking/booking\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2024\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n        'jquery',\n        'core/str',\n        'core/pending',\n        'core/modal',\n        'core/notification',\n        'local_booking/booking_view_manager',\n        'local_booking/booking_actions',\n        'local_booking/events',\n        'local_booking/modal_logentry_form',\n        'local_booking/selectors'\n    ],\n    function(\n        $,\n        Str,\n        Pending,\n        Modal,\n        Notification,\n        ViewManager,\n        BookingActions,\n        BookingEvents,\n        ModalLogentryEditForm,\n        Selectors\n    ) {\n\n    /**\n     * Listen to and handle any logentry events fired by\n     * Logentry and PIREP the modal forms.\n     *\n     * @method registerBookingEventListeners\n     * @param  {object} root The booking root element\n     */\n     const registerBookingEventListeners = function(root) {\n        const body = $('body');\n\n        body.on(BookingEvents.sessioncanceled, function() {\n            ViewManager.refreshBookingsContent(root);\n        });\n\n        body.on(BookingEvents.logentrycreated, function() {\n            ViewManager.refreshBookingsContent(root);\n        });\n        body.on(BookingEvents.logentryupdated, function() {\n            ViewManager.refreshBookingsContent(root);\n        });\n        body.on(BookingEvents.logentrydeleted, function() {\n            ViewManager.refreshBookingsContent(root);\n        });\n\n        // Register the listeners required to refresh students progress table based on filter\n        root.on('change', 'input[type=radio][name=studentsfilter]', function() {\n            // Call redirect to assignment feedback page\n            ViewManager.refreshBookingsContent(root, 0, 0, 0, null, $('input[name=\"studentsfilter\"]:checked').val());\n        });\n\n        // Register the listeners required to search for a specific user\n        $('#id_searchstudents').on('click', function(e) {\n            let selectedOption = $(\"[id^=form_autocomplete_suggestions-]\")[1];\n            let userId = $(selectedOption).data('value');\n            if (userId != 0) {\n                ViewManager.refreshBookingsContent(root, 0, 0, userId);\n                $('html,body').scrollTop(0);\n            }\n            e.preventDefault();\n        });\n\n        // Register the listeners required to clear the search\n        $('#id_clearsearch').on('click', function(e) {\n            ViewManager.refreshBookingsContent(root);\n            e.preventDefault();\n        });\n\n        // Register the listeners required to redirect to the Moodle grade page\n        root.on('click', Selectors.actions.gotoFeedback, function(e) {\n            BookingActions.gotoFeedback(root, e);\n\n            e.preventDefault();\n        });\n    };\n\n    /**\n     * Register event listeners for session clicks.\n     *\n     * @param {object} root The root element.\n     */\n    const registerSessionEventListeners = (root) => {\n\n        // Get promise for the logentry form for create and edit\n        const contextId = $(Selectors.bookingwrapper).data('contextid'),\n        courseId = $(Selectors.bookingwrapper).data('courseid');\n\n        if (contextId) {\n            // Listen the click on the progression table of sessions for a logentry (new/view).\n            root.on('click', Selectors.actions.viewLogEntry, function(e) {\n                let logentryId = $(this).attr('data-logentry-id'),\n                sessionId = $(this).attr('data-session-id'),\n                userId = $(this).attr('data-student-id');\n\n                // A logentry needs to be created or edite, show the modal form.\n                e.preventDefault();\n                // We've handled the event so stop it from bubbling\n                // and causing the day click handler to fire.\n                e.stopPropagation();\n\n                if (sessionId == 0) {\n                    BookingActions.gotoFeedback(root, e);\n                } else if (logentryId == 0) {\n                    registerLogentryEditForm(null, e, contextId, courseId, userId, logentryId, true);\n                } else {\n                    registerLogentrySummaryForm(contextId, courseId, userId, logentryId);\n                }\n                e.stopImmediatePropagation();\n            });\n        }\n    };\n\n    /**\n     * Register the form and listeners required for\n     * creating and editing logentries.\n     *\n     * @method registerLogentryEditForm\n     * @param  {object} root       The root element.\n     * @param  {object} e          The triggered event.\n     * @param  {Number} contextId  The course context id of the logentry.\n     * @param  {Number} courseId   The course id of the logentry.\n     * @param  {Number} userId     The user id the logentry belongs to.\n     * @param  {Number} logentryId The logentry id.\n     * @param  {bool}   isNew      Whether to register for edit mode.\n     */\n    const registerLogentryEditForm = (root, e, contextId, courseId, userId, logentryId, isNew) => {\n        const LogentryFormPromise = ModalLogentryEditForm.create();\n        const target = e.target;\n        const pendingPromise = new Pending('local_booking/registerLogentryEditForm');\n\n        ViewManager.renderLogentryEditForm(root, e, LogentryFormPromise, target, contextId, courseId, userId, logentryId, isNew)\n        .then(pendingPromise.resolve())\n        .catch(e);\n    };\n\n    /**\n     * Register the form and listeners required for\n     * viewing the logentry summary form.\n     *\n     * @method registerLogentrySummaryForm\n     * @param  {Number} contextId  The course context id of the logentry.\n     * @param  {Number} courseId   The course id of the logentry.\n     * @param  {Number} userId     The user id the logentry belongs to.\n     * @param  {Number} logentryId The logentry id.\n     */\n    const registerLogentrySummaryForm = (contextId, courseId, userId, logentryId) => {\n        const pendingPromise = new Pending('local_booking/registerLogentrySummaryForm');\n\n        if (logentryId) {\n            ViewManager.renderLogentrySummaryModal(courseId, userId, logentryId)\n            .then(function(modal) {\n                $('body').on(BookingEvents.editLogentry, function(e, userId, logentryId) {\n                    registerLogentryEditForm(modal.getRoot(), e, contextId, courseId, userId, logentryId);\n                    e.stopImmediatePropagation();\n                });\n                $('body').on(BookingEvents.addLogentry, function(e, userId) {\n                    registerLogentryEditForm(modal.getRoot(), e, contextId, courseId, userId, 0);\n                    e.stopImmediatePropagation();\n                });\n                return modal;\n            })\n            .then(pendingPromise.resolve())\n            .catch(window.console.error);\n        } else {\n            pendingPromise.resolve();\n        }\n    };\n\n    /**\n     * Register event listeners for logbook entry,\n     * and session cancellation in both\n     * 'Instructor dashboard' and 'Session selection' pages.\n     *\n     * @method  registerEventListeners\n     * @param   {object} root The booking root element\n     */\n     const registerEventListeners = function(root) {\n\n        // Register listeners to booking actions\n        registerBookingEventListeners(root);\n\n        // Register listeners to session click actions\n        registerSessionEventListeners(root);\n    };\n\n    return {\n        init: function(rt) {\n            var root = $(rt);\n            registerEventListeners(root);\n            ViewManager.stopLoading(root);\n        }\n    };\n});\n"],"names":["define","$","Str","Pending","Modal","Notification","ViewManager","BookingActions","BookingEvents","ModalLogentryEditForm","Selectors","registerSessionEventListeners","root","contextId","bookingwrapper","data","courseId","on","actions","viewLogEntry","e","logentryId","this","attr","sessionId","userId","preventDefault","stopPropagation","gotoFeedback","registerLogentryEditForm","registerLogentrySummaryForm","stopImmediatePropagation","isNew","LogentryFormPromise","create","target","pendingPromise","renderLogentryEditForm","then","resolve","catch","renderLogentrySummaryModal","modal","editLogentry","getRoot","addLogentry","window","console","error","registerEventListeners","body","sessioncanceled","refreshBookingsContent","logentrycreated","logentryupdated","logentrydeleted","val","selectedOption","scrollTop","registerBookingEventListeners","init","rt","stopLoading"],"mappings":"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"}